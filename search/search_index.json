{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>The General Transit Feed Specification (GTFS) is a data specification that allows public transit agencies to publish their transit data in a format that can be consumed by a wide variety of software applications. Today, the GTFS data format is used by thousands of public transport providers.</p> <p>GTFS is split into a schedule component that contains schedule, fare, and geographic transit information and a real-time component that contains arrival predictions, vehicle positions and service advisories.</p> <p>More GTFS background</p> <p> GTFS ScheduleGTFS RealtimeResourcesExtensions </p>","title":"GTFS: Making Public Transit Data Universally Accessible"},{"location":"about/","text":"<p>GTFS.org is maintained by MobilityData, a Canadian non-profit that aims to broaden adoption and increase the functionality of the GTFS &amp; GBFS data formats. Thank you to Andrew Byrd for purchasing and lending use of the gtfs.org domain name and providing leadership for the GTFS community.</p> <p>For more information, contact documentation@mobilitydata.org.</p>","title":"About"},{"location":"about/#mobilitydata","text":"<p>MobilityData began in 2015 as a Rocky Mountain Institute project with the mission to improve travelers' information. It extended its mission and reach by becoming a Canadian non-profit in 2019 and a French one in 2021. The MobilityData team includes a number of transportation thinkers and technical experts. With over 20 employees worldwide, MobilityData brings together and supports international mobility stakeholders such as transport agencies, software vendors, mobility apps, and cities to standardize and expand data formats such as GTFS and GBFS for public transport and shared mobility. MobilityData acts as an industry facilitator, creating opportunities for strengthened interoperability while assisting the industry\u2019s rapid transformation through training and tools. </p> <p>Learn more at mobilitydata.org.</p> <p>   </p>","title":"MobilityData"},{"location":"about/#editing-this-site","text":"<p>The GTFS Documentation Platform is based on open source content pulled from various repositories. To propose edits to content, open an issue or pull request in the respective source-of-truth repository found in the README.</p> <p>To propose a feature, content addition, or UI/UX improvement, open an issue in the GTFS.org repository.</p>","title":"Editing this site"},{"location":"about/#license","text":"<p>Except as otherwise noted, the content of this site is licensed under the Creative Commons Attribution 3.0 License, and code samples are licensed under the Apache 2.0 License.</p>","title":"License"},{"location":"background/","text":"<p>TriMet in Portland, Oregon, along with Google, was one of the first public agencies to try and tackle the problem of online transit trip planners through the use of open datasets that are shared with the general public (How Google and Portland\u2019s TriMet Set the Standard for Open Transit Data in Streetsblog SF). TriMet worked with Google to format their transit data into an easily maintainable and consumable format that could be imported into Google Maps. This transit data format was originally known as the Google Transit Feed Specification (GTFS).</p> <p>As a result of developer innovation, GTFS data is now being used by a variety of third-party software applications for many different purposes, including trip planning, timetable creation, mobile data, data visualization, accessibility, analysis tools for planning, and real-time information systems. In 2010, the GTFS format name was changed to the General Transit Feed Specification to accurately represent its use in many different applications outside of Google products.</p> <p>Among public transportation data formats, GTFS stands out because it was conceived to meet specific, practical needs in communicating service information to passengers, not as an exhaustive vocabulary for managing operational details. It is designed to be relatively simple to create and read for both people and machines. Even organizations that work with highly detailed data internally using standards like NeTEx find GTFS useful as a way to publish data for wider consumption in consumer applications.</p> <p>For further background on the origins of GTFS, see Pioneering Open Data Standards: The GTFS Story.</p>","title":"Background"},{"location":"extensions/","text":"<p>GTFS is a community driven data format. Users can propose and vote on changes. For detailed information see the GTFS Schedule and GTFS Realtime amendment process.</p> <p>Extensions that are currently in development can be found on MobilityData's roadmap.</p> <p>Extension proposals can be found in the following places:</p> <ul> <li>MobilityData maintains a portal with a list of GTFS extension proposals. The roadmap is based on their members' prioritization. You can contribute ideas or extensions via the portal.</li> <li>TransitWiki.org contains a list GTFS extension projects.</li> </ul> <p>For more information, contact specifications@mobilitydata.org</p>","title":"Extensions"},{"location":"realtime/","text":"ReferenceBest PracticesExamplesChanges","title":"GTFS Realtime Overview"},{"location":"realtime/#getting-started","text":"<p>Providing users transit data updates in real time greatly enhances their experience of your transit services. Providing up-to-date information about current arrival and departure times allows users to smoothly plan their trips. As a result, in case of an unfortunate delay, a rider would be relieved to know that they can stay home a little bit longer.</p> <p>GTFS Realtime is a feed specification that allows public transportation agencies to provide realtime updates about their fleet to application developers. It is an extension to GTFS (General Transit Feed Specification), an open data format for public transportation schedules and associated geographic information. GTFS Realtime was designed around ease of implementation, good GTFS interoperability and a focus on passenger information.</p> <p>The specification was designed through a partnership of the initial Live Transit Updates partner agencies, a number of transit developers and Google. The specification is published under the Apache 2.0 License.</p>","title":"Getting Started"},{"location":"realtime/#how-do-i-start","text":"<ol> <li>Continue reading the overview below.</li> <li>Decide which feed entities you will be providing.</li> <li>Take a look at example feeds.</li> <li>Create your own feeds using the reference.</li> <li>Publish your feed.</li> </ol>","title":"How do I start?"},{"location":"realtime/#overview-of-gtfs-realtime-feeds","text":"<p>The specification currently supports the following types of information:</p> <ul> <li>Trip updates - delays, cancellations, changed routes</li> <li>Service alerts - stop moved, unforeseen events affecting a station, route or the entire network</li> <li>Vehicle positions - information about the vehicles including location and congestion level</li> </ul> <p>A feed may, although not required to, combine entities of different types. Feeds are served via HTTP and updated frequently. The file itself is a regular binary file, so any type of webserver can host and serve the file (other transfer protocols might be used as well). Alternatively, web application servers could also be used which as a response to a valid HTTP GET request will return the feed. There are no constraints on how frequently nor on the exact method of how the feed should be updated or retrieved.</p> <p>Because GTFS Realtime allows you to present the actual status of your fleet, the feed needs to be updated regularly - preferably whenever new data comes in from your Automatic Vehicle Location system.</p> <p>More about feed entities...</p>","title":"Overview of GTFS Realtime feeds"},{"location":"realtime/#data-format","text":"<p>The GTFS Realtime data exchange format is based on Protocol Buffers</p> <p>Protocol buffers are a language- and platform-neutral mechanism for serializing structured data (think XML, but smaller, faster, and simpler). The data structure is defined in a gtfs-realtime.proto file, which then is used to generate source code to easily read and write your structured data from and to a variety of data streams, using a variety of languages \u2013 e.g. Java, C++ or Python.</p> <p>More about Protocol Buffers....</p>","title":"Data format"},{"location":"realtime/#data-structure","text":"<p>The hierarchy of elements and their type definitions are specified in the gtfs-realtime.proto file.</p> <p>This text file is used to generate the necessary libraries in your choice of programming language. These libraries provide the classes and functions needed for generating valid GTFS Realtime feeds. The libraries not only make feed creation easier but also ensure that only valid feeds are produced.</p> <p>More about the data structure...</p>","title":"Data structure"},{"location":"realtime/#getting-help","text":"<p>To participate in discussions around GTFS Realtime and suggest changes and additions to the specification, join the GTFS Realtime mailing list and follow conversations on the google/transit GitHub repository.</p>","title":"Getting Help"},{"location":"realtime/#google-maps-and-live-transit-updates","text":"<p>One of the possible applications that uses GTFS Realtime is Live Transit Updates, a feature within Google Maps that provides users with realtime transit information. If you are working for a public transportation agency that is interested in providing realtime updates to Google Maps, please visit the Google Transit Partner Page.</p>","title":"Google Maps and Live Transit Updates"},{"location":"realtime/best-practices/","text":"","title":"GTFS Realtime Best Practices"},{"location":"realtime/best-practices/#introduction","text":"<p>These are recommended practices for describing realtime public transportation information in the GTFS Realtime data format.</p>","title":"Introduction"},{"location":"realtime/best-practices/#document-structure","text":"<p>Recommended practices are organized into two primary sections</p> <ul> <li>Practice Recommendations Organized by Message: Recommendations are organized by message and field in the same order described in the official GTFS Realtime reference.</li> <li>Practice Recommendations Organized by Case: With particular cases, such as frequency-based service (vs. schedule-based service), practices may need to be applied across several messages and fields as well as the corresponding GTFS schedule data. Such recommendations are consolidated in this section.</li> </ul>","title":"Document Structure"},{"location":"realtime/best-practices/#feed-publishing-general-practices","text":"<ul> <li>Feeds should be published at a public, permanent URL</li> <li>The URL should be directly accessible without requiring a login to access the feed. If desired, API keys may be used but registration for API keys should be automated and available to all.</li> <li>Maintain persistent identifiers (id fields) within a GTFS Realtime feed (e.g., FeedEntity.id, VehicleDescriptor.id, CarriageDetails.id) across feed iterations.</li> <li>GTFS Realtime feeds should be refreshed at least once every 30 seconds, or whenever the information represented within the feed (position of a vehicle) changes, whichever is more frequent. VehiclePositions tend to change more frequently than other feed entities and should be updated as frequently as possible. If the content has not changed, the feed should be updated with a new <code>FeedHeader.timestamp</code> reflecting that the information is still relevant as of that timestamp.</li> <li>Data within a GTFS Realtime feed should not be older than 90 seconds for Trip Updates and Vehicle Positions and not older than 10 minutes for Service Alerts. For example, even if a producer is continuously refreshing the <code>FeedHeader.timestamp</code> timestamp every 30 seconds, the age of VehiclePositions within that feed should not be older than 90 seconds.</li> <li>The server hosting GTFS Realtime data should be reliable and consistently return validly-formatted protobuf-encoded responses. Fewer than 1% of responses should be invalid (protobuf errors or fetching errors).</li> <li>The web-server hosting GTFS Realtime data should be configured to correctly report the file modification date (see HTTP/1.1 - Request for Comments 2616, under Section 14.29) so consumers can leverage the <code>If-Modified-Since</code> HTTP header. This saves producers and consumers bandwidth by avoiding transferring feed contents that haven't changed.</li> <li>Feeds should provide protocol buffer-encoded feed content by default when queried via an HTTP request at the given URL - consumers should not need to define special HTTP accept headers to receive protocol-buffer encoded content.</li> <li>Due to how protocol buffers encode optional values, before reading data from a GTFS Realtime feed consumers should check for the presence of values using the protocol buffer-generated <code>hasX()</code> methods before using that value and should only use the value if <code>hasX()</code> is true (where <code>X</code> is the name of the field). If <code>hasX()</code> returns <code>false</code>, the default value for that field defined in the <code>gtfs-realtime.proto</code> value should be assumed. If the consumer uses the value without checking the <code>hasX()</code> method first, it may be reading default data that wasn't intentionally published by the producer.</li> <li>Feeds should use HTTPS instead of HTTP (without encryption) to ensure feed integrity.</li> <li>Feeds should cover the vast majority of trips included in the companion static GTFS dataset. In particular, it should include data for high-density and high-traffic city areas and busy routes.</li> </ul>","title":"Feed Publishing &amp; General Practices"},{"location":"realtime/best-practices/#practice-recommendations-organized-by-message","text":"","title":"Practice Recommendations Organized by Message"},{"location":"realtime/best-practices/#feedheader","text":"Field Name Recommendation     gtfs_realtime_version Current version is \"2.0\".  All GTFS Realtime feeds should be \"2.0\" or higher, as early version of GTFS Realtime did not require all fields needed to represent various transit situations adequately.   incrementality    timestamp This timestamp should not decrease between two sequential feed iterations.    This timestamp value should always change if the feed contents change - the feed contents should not change without updating the header <code>timestamp</code>.Common mistakes - If there are multiple instances of GTFS Realtime feed behind a load balancer, each instance may be pulling information from the realtime data source and publishing it to consumers slightly out of sync. If a GTFS Realtime consumer makes two back-to-back requests, and each request is served by a different GTFS Realtime feed instance, the same feed contents could potentially be returned to the consumer with different timestamps.Possible solution - Configure the load balancer for \"sticky routes\", so that the consumer always receives the GTFS Realtime feed contents from the same GTFS Realtime instance.","title":"FeedHeader"},{"location":"realtime/best-practices/#feedentity","text":"<p>All entities should only be removed from a GTFS Realtime feed when they are no longer relevant to users. Feeds are considered to be stateless, meaning that each feed reflects the entire real-time state of the transit system. If an entity is provided in one feed instance but dropped in a subsequent feed update, it should be assumed that there is no real-time information for that entity.</p>    Field Name Recommendation     id Should be kept stable over the entire trip duration   is_deleted    trip_update    vehicle    alert","title":"FeedEntity"},{"location":"realtime/best-practices/#tripupdate","text":"<p>General guidelines for trip cancellations: * When canceling trips over a number of days, producers should provide TripUpdates referencing the given <code>trip_ids</code> and <code>start_dates</code> as <code>CANCELED</code> as well as an Alert with <code>NO_SERVICE</code> referencing the same <code>trip_ids</code> and <code>TimeRange</code> that can be shown to riders explaining the cancellation (e.g., detour). * If no stops in a trip will be visited, the trip should be <code>CANCELED</code> instead of having all <code>stop_time_updates</code> being marked as <code>SKIPPED</code>.  </p>    Field Name Recommendation     trip refer to message TripDescriptor    If separate <code>VehiclePosition</code> and <code>TripUpdate</code> feeds are provided, TripDescriptor and VehicleDescriptor ID values pairing should match between the two feeds.For example, a <code>VehiclePosition</code> entity has <code>vehicle_id:A</code> and <code>trip_id:4</code>, then the corresponding <code>TripUpdate</code> entity should also have <code>vehicle_id:A</code> and <code>trip_id:4</code>. If any <code>TripUpdate</code> entity has <code>trip_id:4</code> and any <code>vehicle_id</code> other than 4, this is an error.   vehicle refer to message VehicleDescriptor    If separate <code>VehiclePosition</code> and <code>TripUpdate</code> feeds are provided, TripDescriptor and VehicleDescriptor ID values pairing should match between the two feeds.For example, a <code>VehiclePosition</code> entity has <code>vehicle_id:A</code> and <code>trip_id:4</code>, then the corresponding <code>TripUpdate</code> entity should also have <code>vehicle_id:A</code> and <code>trip_id:4</code>. If any <code>TripUpdate</code> entity has <code>trip_id:4</code> and any <code>vehicle_id</code> other than 4, this is an error.   stop_time_update <code>stop_time_updates</code> for a given <code>trip_id</code> should be strictly ordered by increasing <code>stop_sequence</code> and no <code>stop_sequence</code> should be repeated.    All TripUpdates should include at least one <code>stop_time_update</code> with a predicted arrival or departure time in the future. If all <code>stop_time_updates</code> for a trip reference past arrival and departure times, consumers should assume that no real-time data is available for the trip.   timestamp Should reflect the time this prediction for this trip was updated   delay <code>TripUpdate.delay</code> should represent schedule deviation, i.e., the observed past value for how ahead/behind schedule the vehicle is. Predictions for future stops should be provided through <code>StopTimeEvent.delay</code> or <code>StopTimeEvent.time</code>","title":"TripUpdate"},{"location":"realtime/best-practices/#tripdescriptor","text":"<p>If separate <code>VehiclePosition</code> and <code>TripUpdate</code> feeds are provided, TripDescriptor and VehicleDescriptor ID values pairing should match between the two feeds.</p> <p>For example, a <code>VehiclePosition</code> entity has <code>vehicle_id:A</code> and <code>trip_id:4</code>, then the corresponding <code>TripUpdate</code> entity should also have <code>vehicle_id:A</code> and <code>trip_id:4</code>.</p>    Field Name Recommendation     trip_id    route_id    direction_id    start_time    start_date    schedule_relationship The behavior of <code>ADDED</code> trips are unspecified and the use of this enumeration is not recommended.","title":"TripDescriptor"},{"location":"realtime/best-practices/#vehicledescriptor","text":"<p>If separate <code>VehiclePosition</code> and <code>TripUpdate</code> feeds are provided, TripDescriptor and VehicleDescriptor ID values pairing should match between the two feeds.For example, a <code>VehiclePosition</code> entity has <code>vehicle_id:A</code> and <code>trip_id:4</code>, then the corresponding <code>TripUpdate</code> entity should also have <code>vehicle_id:A</code> and <code>trip_id:4</code>.</p>    Field Name Recommendation     id Should uniquely and stably identify a vehicle over the entire trip duration   label    license_plate","title":"VehicleDescriptor"},{"location":"realtime/best-practices/#stoptimeupdate","text":"Field Name Recommendation     stop_sequence Provide <code>stop_sequence</code> whenever possible, as it unambiguously resolves to a GTFS stop time in <code>stop_times.txt</code> unlike <code>stop_id</code>, which can occur more than once in a trip (e.g., loop route).   stop_id    arrival Arrival times between sequential stops should increase - they should not be the same or decrease.    Arrival <code>time</code> (specified in StopTimeEvent) should be before the departure <code>time</code> for the same stop if a layover or dwell time is expected - otherwise, arrival <code>time</code> should be be the same as departure <code>time</code>.   departure Departure times between sequential stops should increase - they should not be the same or decrease.    Departure <code>time</code> (specified in StopTimeEvent) should be the same as the arrival <code>time</code> for the same stop if no layover or dwell time is expected - otherwise, departure <code>time</code> should be after arrival <code>time</code> .   schedule_relationship","title":"StopTimeUpdate"},{"location":"realtime/best-practices/#stoptimeevent","text":"Field Name Recommendation     delay If only <code>delay</code> is provided in a <code>stop_time_update</code> <code>arrival</code> or <code>departure</code> (and not <code>time</code>), then the GTFS stop_times.txt should contain arrival_times and/or departure_times for these corresponding stops. A <code>delay</code> value in the realtime feed is meaningless unless you have a clock time to add it to in the GTFS <code>stop_times.txt</code> file.   time    uncertainty","title":"StopTimeEvent"},{"location":"realtime/best-practices/#vehicleposition","text":"<p>Following are the recommended fields that should be included for a VehiclePostions feed to provide consumers with high-quality data (e.g., for generating predictions)</p>    Field name Notes     entity.id Should be kept stable over the entire trip duration   vehicle (VehiclePosition)    vehicle.timestamp Providing the timestamp at which vehicle position was measured is strongly recommended. Otherwise, consumers must use the message timestamp, which can have misleading results for riders when the last message was updated more frequently than the individual position.   vehicle.trip    vehicle.trip.trip_id    vehicle.trip.start_time    vehicle.trip.start_date    vehicle.trip.schedule_relationship    vehicle.position    vehicle.position.latitude    vehicle.position.longitude    vehicle.vehicle (VehicleDescriptor)    vehicle.vehicle.id Should uniquely and stably identify a vehicle over the entire trip duration","title":"VehiclePosition"},{"location":"realtime/best-practices/#position","text":"<p>The vehicle position should be within 200 meters of the GTFS shapes.txt data for the current trip unless there is an alert with the effect of <code>DETOUR</code> for this <code>trip_id</code>.</p>    Field Name Recommendation     latitude    longitude    bearing    odometer    speed","title":"Position"},{"location":"realtime/best-practices/#alert","text":"<p>General guidelines for alerts: * When <code>trip_id</code> and <code>start_time</code> are within <code>exact_time=1</code> interval, <code>start_time</code> should be later than the beginning of the interval by an exact multiple of <code>headway_secs</code>.  * When canceling trips over a number of days, producers should provide TripUpdates referencing the given <code>trip_ids</code> and <code>start_dates</code> as <code>CANCELED</code> as well as an Alert with <code>NO_SERVICE</code> referencing the same <code>trip_ids</code> and <code>TimeRange</code> that can be shown to riders explaining the cancellation (e.g., detour). * If an alert affects all stops on a line, use a line-based alert instead of a stop-based alert. Do not apply the alert to every stop of the line. * While there is no character limit for service alerts, transit riders will often be viewing alerts on mobile devices. Please be concise.</p>    Field Name Recommendation     active_period    informed_entity    cause    effect    url    header_text    description_text Use line breaks to make your service alert easier to read.   tts_header_text    tts_description_text    severity_level","title":"Alert"},{"location":"realtime/best-practices/#practice-recommendations-organized-by-use-case","text":"","title":"Practice Recommendations Organized by Use Case"},{"location":"realtime/best-practices/#frequency-based-trips","text":"<p>A frequency-based trip does not follow a fixed schedule but attempts to maintain predetermined headways. These trips are denoted in GTFS frequency.txt by setting <code>exact_times=0</code> or omitting the <code>exact_times</code> field (note that <code>exact_times=1</code> trips are NOT frequency-based trips - <code>frequencies.txt</code> with <code>exact_times=1</code> is simply used as a convenience method for storing schedule-based trips in a more compact manner). There are several best practices to keep in mind when constructing GTFS Realtime feeds for frequency-based trips.</p> <ul> <li> <p>In TripUpdate.StopTimeUpdate, the StopTimeEvent for <code>arrival</code> and <code>departure</code> should not contain <code>delay</code> because frequency-based trips do not follow a fixed schedule. Instead, <code>time</code> should be provided to indicate arrival/departure predictions.</p> </li> <li> <p>As required by the spec, when describing <code>trip</code> in TripUpdate or VehiclePosition by using TripDescriptor, all of <code>trip_id</code>, <code>start_time</code>, and <code>start_date</code> must be provided. Additionally, <code>schedule_relationship</code> should be <code>UNSCHEDULED</code>.  (e.g., re-enforcement trips).</p> </li> </ul>","title":"Frequency-based trips"},{"location":"realtime/best-practices/#about-this-document","text":"","title":"About This Document"},{"location":"realtime/best-practices/#objectives","text":"<p>The objectives of maintaining GTFS Realtime Best Practices are to:</p> <ul> <li>Improve end-user customer experience in public transportation apps</li> <li>Make it easier for software developers to deploy and scale applications, products, and services</li> </ul>","title":"Objectives"},{"location":"realtime/best-practices/#how-to-propose-or-amend-published-gtfs-realtime-best-practices","text":"<p>GTFS applications and practices evolve, and so this document may need to be amended from time to time. To propose an amendment to this document, open a pull request in the GTFS Realtime Best Practices GitHub repository and advocate for the change.</p>","title":"How to propose or amend published GTFS Realtime Best Practices"},{"location":"realtime/best-practices/#linking-to-this-document","text":"<p>Please link here in order to provide feed producers with guidance for correct formation of GTFS Realtime data. Each individual recommendation has an anchor link. Click the recommendation to get the URL for the in-page anchor link.</p> <p>If a GTFS Realtime-consuming application makes requirements or recommendations for GTFS Realtime data practices that are not described here, it is recommended to publish a document with those requirements or recommendations to supplement these common best practices.</p>","title":"Linking to This Document"},{"location":"realtime/extensions/","text":"<p>To allow producers to add custom information to a GTFS Realtime feed, we will take advantage of the Extensions feature of Protocol Buffers. Extensions allow us to define a namespace in a Protocol Buffer message where third-party developers can define additional fields without the need to modify the original proto definition.</p> <p>When possible we should avoid extensions and add fields useful to many agencies to the main specification to avoid fragmentation and extra work for consumers to support various extensions to the spec.  Before requesting an extension id, producers should propose adding the field to the specification (see Adding new fields to GTFS Realtime)</p> <p>The extension IDs within the range 9000-9999 are reserved for private use by GTFS-rt producers. These IDs should only be used to convey information internally to your organization. Extensions in this range must not be used in public feeds. </p> <p>To create a new extension, we will assign a producer the next available extension id, picked incrementally from a list of numbers starting at 1000 and going up and documented in the Extension Registry section found below.</p> <p>These assigned extension ids corresponds to the tag ids available in the \"extension\" namespace for each GTFS Realtime message definition. Now that the developer has an assigned extension id, they will use that id when extending any and all GTFS Realtime messages. Even if the developer only plans to extend a single message, the assigned extension id will be reserved for ALL messages.</p> <p>For a developer extending the spec, instead of adding a single field like a \"string\" or \"int32\" with their extension id, the preferred model is to define a new message like \"MyTripDescriptorExtension\", extend the underlying GTFS Realtime message with your new message, and then put all your new fields in there. This has the nice property that you can manage fields within your extension message however you want, without needing to reserve a new extension id from the master list.</p> <pre><code>message MyTripDescriptorExtension {\n  optional string some_string = 1;\n  optional bool some_bool = 2;\n  ...\n}\nextend transit_realtime.TripDescriptor {\n  optional MyTripDescriptorExtension my_trip_descriptor = YOUR_EXTENSION_ID;\n}\n</code></pre> <p>When creating extensions, developers should follow the Protocol Buffers Language Guide. A common mistake is re-using an extension field number. In the Assigning Field Numbers section, the Language Guide says:</p>  <p>Each field in the message definition has a unique number. These numbers are used to identify your fields in the message binary format, and should not be changed once your message type is in use.</p>  <p>For example, in the first example <code>some_string</code> was assigned field number <code>1</code>. When the developer no longer wishes to use <code>some_string</code>, or when <code>some_string</code> has been adopted in the official GTFS Realtime spec and there is no need for the extension, the developer cannot re-use field number <code>1</code> for a new field. Instead, the developer should deprecate the field and use a new number for the new field: <pre><code>message MyTripDescriptorExtension {\n  optional string some_string = 1 [deprecated=true];\n  optional bool some_bool = 2;\n  optional string some_new_string = 3;\n  ...\n}\n</code></pre></p>","title":"Extensions"},{"location":"realtime/extensions/#extension-registry","text":"Extension ID Developer Contact Details     1000 OneBusAway onebusaway-developers https://github.com/OneBusAway/onebusaway/wiki/GTFS-Realtime-Resources   1001 New York City MTA mtadeveloperresources https://mta.info/developers/   1002 Google transit-realtime-partner-support@google.com Google Maps Live Transit Updates   1003 OVapi gtfs-rt at ovapi.nl https://gtfs.ovapi.nl   1004 Metra William Ashbaugh w.l.ashbaugh@gmail.com    1005 Metro-North Railroad John Larsen    1006 realCity David Varga https://realcity.io   1007 Transport for NSW timetable@transport.nsw.gov.au Group discussion   1008 SEPTA - Southeastern Pennsylvania Transportation Authority Gregory Apessos https://github.com/septadev   1009 Swiftly mike@goswift.ly Group Discussion   1010 IBI Group Ritesh Warade GitHub proposal for new timestamps in Service Alerts   9000-9999 RESERVED - INTERNAL USE ONLY GTFS Community Group discussion","title":"Extension Registry"},{"location":"realtime/feed-examples/","text":"<p>The following examples show a textual representation of feeds. During development it is more convenient to produce ASCII protocol buffer output for easier debugging. You can compare your text output with these examples to check for the validity of data.</p>","title":"Feed Examples"},{"location":"realtime/feed-examples/#service-alert","text":"<p>The following example is an ASCII representation of an Alert feed.</p> <pre><code># header information\nheader {\n  # version of speed specification. Currently \"2.0\". Valid versions are \"2.0\", \"1.0\".\n  gtfs_realtime_version: \"2.0\"\n\n  # determines whether dataset is incremental or full\n  incrementality: FULL_DATASET\n\n  # the time where this dataset was generated on server\n  # for determining the sequence of alert feeds\n  timestamp: 1284457468\n}\n# multiple entities can be included in the feed\nentity {\n  # unique identifier for the entity\n  id: \"0\"\n\n  # \"type\" of the entity\n  alert {\n    # multiple periods can be defined when alert is active\n    active_period {\n      # start time in POSIX epoch format\n      start: 1284457468\n      # end time in POSIX epoch format\n      end: 1284468072\n    }\n    # selects which GTFS entities will be affected\n    informed_entity {\n      # valid parameters: \n      # agency_id, route_id, route_type, stop_id, trip (see TripDescriptor)\n      route_id: \"219\"\n    }\n    # multiple selectors (informed_entity) can be included in one alert entity\n    informed_entity {\n      stop_id: \"16230\"\n    }\n    # multiple fields can be included in one informed_entity\n    informed_entity {\n      stop_id: \"16299\"\n      route_id: \"100\"\n      # This example means route 100 at stop 16299.\n      # This does not apply to any other stop on route 100 and any other route at stop 16299.\n    }\n\n    # cause of the alert - see gtfs-realtime.proto for valid values\n    cause: CONSTRUCTION\n    # effect of the alert - see gtfs-realtime.proto for valid values\n    effect: DETOUR\n\n    # the given url provides additional information\n    url {\n      # multiple languages/translations supported\n      translation {\n        # page hosted outside of Google (at provider/agency, etc.)\n        text: \"https://www.sometransitagency/alerts\"\n        language: \"en\"\n      }\n    }\n\n    # header for the alert will be highlighted\n    header_text {\n      # multiple languages/translations supported\n      translation {\n        text: \"Stop at Elm street is closed, temporary stop at Oak street\"\n        language: \"en\"\n      }\n    }\n\n    # Alert description. Additional info to the header text\n    description_text {\n      # multiple languages/translations supported\n      translation {\n        text: \"Due to construction at Elm street the stop is closed. The temporary stop can be found 300 meters north at Oak street\"\n        language: \"en\"\n      }\n    }\n  }\n}\n</code></pre>","title":"Service alert"},{"location":"realtime/feed-examples/#trip-update","text":"<p>The following example is an ASCII representation of an full-dataset Trip Update feed.</p> <pre><code># header information\nheader {\n  # version of speed specification. Currently \"2.0\". Valid versions are \"2.0\", \"1.0\".\n  gtfs_realtime_version: \"2.0\"\n  # determines whether dataset is incremental or full\n  incrementality: FULL_DATASET\n  # the moment where this dataset was generated on server\n  timestamp: 1284457468\n}\n\n# multiple entities can be included in the feed\nentity {\n  # unique identifier for the entity\n  id: \"simple-trip\"\n\n  # \"type\" of the entity\n  trip_update {\n    trip {\n      # selects which GTFS entity (trip) will be affected\n      trip_id: \"trip-1\"\n    }\n    # schedule information update\n    stop_time_update {\n      # selecting which stop is affected\n      stop_sequence: 3\n      # for the vehicle's arrival time\n      arrival {\n        # to be delayed with 5 seconds\n        delay: 5\n      }\n    }\n    # ...this vehicle's delay is propagated to its subsequent stops.\n\n    # Next information update on the vehicle's schedule\n    stop_time_update {\n      # selected by stop_sequence. It will update\n      stop_sequence: 8\n      # the vehicle's original (scheduled) arrival time with a\n      arrival {\n        # 1 second delay.\n        delay: 1\n      }\n    }\n    # ...likewise the delay is propagated to subsequent stops.\n\n    # Next information update on the vehicle's schedule\n    stop_time_update {\n      # selected by stop_sequence. It will update the vehicle's arrival time\n      stop_sequence: 10\n      # with the default delay of 0 (on time) and propagate this update\n      # for the rest of the vehicle's stops.\n    }\n  }\n}\n\n# second entity containing update information for another trip\nentity {\n  id: \"3\"\n  trip_update {\n    trip {\n      # frequency based trips are defined by their\n      # trip_id in GTFS and\n      trip_id: \"frequency-expanded-trip\"\n      # start_time\n      start_time: \"11:15:35\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        # negative delay means vehicle is 2 seconds ahead of schedule\n        delay: -2\n      }\n    }\n    stop_time_update {\n      stop_sequence: 9\n    }\n  }\n}\n</code></pre>","title":"Trip Update"},{"location":"realtime/guiding-principles/","text":"<p>In order to preserve the original vision of GTFS Realtime, a number of guiding principles have been established to take into consideration when extending the spec:</p> <p>Feeds should be efficient to produce and consume in realtime.</p> <p>Realtime information is a continuous, dynamic stream of data that necessarily requires efficient processing. We chose Protocol Buffers as the basis for the specification because they offer a good trade-off in terms of ease of use for developers and in terms of efficiency for transmitting data. Unlike GTFS, we do not imagine many agencies will be editing GTFS Realtime feeds by hand. The choice of Protocol Buffers reflects the conclusion that most GTFS Realtime feeds will be produced and consumed programmatically.</p> <p>The spec is about passenger information.</p> <p>Like GTFS before it, GTFS Realtime is primarily concerned with passenger information. That is, the spec should include information that can help power tools for riders, first and foremost. There is potentially a large amount of operations-oriented information that transit agencies might want to transmit internally between systems. GTFS Realtime is not intended for that purpose and there are potentially other operations-oriented data-standards that may be more appropriate.</p> <p>Changes to the spec should be backwards-compatible.</p> <p>When adding features to the specification, we want to avoid making changes that will make existing feeds invalid. We don't want to create more work for existing feed publishers until they want to add capabilities to their feeds. Also, whenever possible, we want existing parsers to be able to continue to read the older parts of newer feeds. The conventions for extending Protocol Buffers will enforce backwards-compatibility to a certain extent. However, we wish to avoid semantic changes to existing fields that might break backwards-compatibility as well.</p> <p>Speculative features are discouraged.</p> <p>Every new feature adds complexity to creating and reading of feeds. Therefore, we want to take care to only add features that we know to be useful. Ideally, any proposal will have been tested by generating data for a real transit system that uses the new feature and writing software to read and display it.</p>","title":"Guiding Principles"},{"location":"realtime/process/","text":"<p>When a producer or consumer is interested in adding a new field to the GTFS Realtime specification, they should open a new issue on the GTFS Realtime GitHub repository describing the proposed field and announce this new field (including a link to the issue) on the GTFS Realtime mailing list.</p>","title":"Adding new fields to GTFS Realtime"},{"location":"realtime/process/#specification-amendment-process","text":"<ol> <li>Create a git branch with update of all relevant parts of protocol definition, specification and documentation files (except for translations).</li> <li>Create pull request on https://github.com/google/transit. Pull request must contain an extended description of the patch. The creator of the pull request becomes the advocate.</li> <li>Once pull request is registered, it must be announced by its advocate in the GTFS Realtime mailing list. Once announced, the pull request is considered a proposal.<ul> <li>Since the advocate is a contributor, they must sign the Contributor License Agreement before pull request can be accepted.</li> </ul> </li> <li>The discussion of the proposal follows. Pull request comments should be used as the sole discussion forum.<ul> <li>The discussion lasts for as long as the advocate feels necessary, but must be at least 7 calendar days.</li> <li>The advocate is responsible for timely update of the proposal (i.e. pull request) based on the comments for which they agree to.</li> <li>At any point in time the advocate can claim proposal abandoned.</li> </ul> </li> <li>The advocate can call for a vote on a version of the proposal at any point in time following the initial 7-day interval required for discussion.<ul> <li>Before calling for a vote, at least one GTFS-realtime producer and one GTFS-realtime consumer should implement the proposed change. It is expected that the GTFS-realtime producer(s) include the change in a public-facing GTFS-realtime feed and provide a link to that data within the pull request comments, and that the GTFS-realtime consumer(s) provides a link in the pull request comments to an application that is utilizing the change in a non-trivial manner (i.e, it is supporting new or improved functionality).</li> <li>When calling for a vote, the advocate should clearly state whether the vote is for official adoption of the field into the spec or for an experimental field.</li> </ul> </li> <li>Vote lasts the minimum period sufficient to cover 7 full calendar days and 5 full Swiss business days. Vote ends at 23:59:59 UTC.<ul> <li>The advocate should announce the specific end time at the start of the vote.</li> <li>During voting period only editorial changes to the proposal are allowed (typos, wording may change as long as it does not change the meaning).</li> <li>Anyone is allowed to vote yes/no in a form of comment to the pull request, and votes can be changed until the end of the voting period. If a voter changes her vote, it is recommended to do it by updating the original vote comment by striking through the vote and writing the new vote.</li> <li>Votes before the start of the voting period are not considered.</li> </ul> </li> <li>The proposal is accepted if there is a unanimous consensus yes with at least 3 votes.<ul> <li>The proposer's vote does not count towards the 3 vote total. For example, if Proposer X creates a pull request and votes yes, and User Y and Z vote yes, this is counted as 2 total yes votes.</li> <li>Votes against shall be motivated, and ideally provide actionable feedback.</li> <li>If the vote has failed, then the advocate may choose to continue work on the proposal, or to abandon the proposal. Either decision of the advocate must be announced in the mailing list.</li> <li>If the advocate continues the work on proposal then a new vote can be called for at any point in time.</li> </ul> </li> <li>Any pull request remaining inactive for 30 calendar days will be closed. When a pull request is closed, the corresponding proposal is considered abandoned. The advocate may reopen the pull request at any time if they wish to continue or maintain the conversation. <ul> <li>Note that the advocate may choose to implement the feature as an custom extension instead of part of the official spec.</li> </ul> </li> <li>If the proposal is accepted:<ul> <li>Google is committed to merging the voted upon version of the pull request (provided that the contributors have signed the CLA, and performing the pull request within 5 business days.</li> <li>Google is committed to timely updating https://github.com/google/gtfs-realtime-bindings repository. Commits to gtfs-realtime-bindigs that are a result of a proposal, should reference the pull request of the proposal.</li> <li>Translations must not be included into the original pull request. Google is responsible for eventually updating relevant translations into supported languages, but pure translation pull requests from the community are welcome and will be accepted as soon as all editorial comments are addressed.</li> </ul> </li> </ol>","title":"Specification amendment process"},{"location":"realtime/process/#experimental-fields","text":"<ol> <li> <p>If the community can come to consensus (a) that the proposed field seems useful and (b) on the type of the field (<code>optional</code> vs <code>repeated</code>, <code>string</code> vs <code>int</code> vs <code>bool</code>), then a field number will be allocated in the GTFS Realtime message and a note will be made in the .proto file and documentation that this is an experimental field that may change in the future.</p> <ul> <li>Consensus is reached via a discussion and voting process that is the same as the below Specification amendment process, but instead of unanimous consent only 80% yes votes are required for approval.</li> <li>GTFS Realtime producers and consumers that wish to use the new experimental field will re-generate their library using the .proto file with the new field (e.g., Google will update the gtfs-realtime-bindings library), and start populating and parsing the field with live data.</li> <li>Once we are satisfied that the experimental field is worthwhile and both producers and consumers are using the field, then we will follow the below Specification amendment process to officially add the field to the spec.</li> <li>If the experimental field is not adopted via the Specification amendment process within 2 years of being approved as an experimental field, it will be deprecated by adding <code>[deprecated=true]</code> next to the field value in the .proto file file.  By using <code>[deprecated=true]</code> (instead of <code>RESERVED</code>), producers and consumers that have already adopted the field do not have to remove it from use.  Additionally, the field may be \"un-deprecated\" in the future if it is approved in a subsequent vote following the Specification amendment process (e.g., when additional producers and/or consumers start using the field).</li> </ul> </li> <li> <p>If the new field is considered specific to a single producer or there is dispute over the data type, then we will assign a custom extension to the producer so they can use the field in their own feed.  When possible we should avoid extensions and add fields useful to many agencies to the main specification to avoid fragmentation and extra work for consumers to support various extensions to the spec.</p> </li> </ol>","title":"Experimental fields"},{"location":"realtime/proto/","text":"<p>Download the gtfs-realtime.proto file and use it to compile your GTFS-realtime feed. The contents of the file are shown inline below. For more information about using protobufs, see the Protocol Buffers Developer Guide. <pre><code>// Copyright 2015 The GTFS Specifications Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Protocol definition file for GTFS Realtime.\n//\n// GTFS Realtime lets transit agencies provide consumers with realtime\n// information about disruptions to their service (stations closed, lines not\n// operating, important delays etc), location of their vehicles and expected\n// arrival times.\n//\n// This protocol is published at:\n// https://github.com/google/transit/tree/master/gtfs-realtime\n\nsyntax = \"proto2\";\noption java_package = \"com.google.transit.realtime\";\npackage transit_realtime;\n\n// The contents of a feed message.\n// A feed is a continuous stream of feed messages. Each message in the stream is\n// obtained as a response to an appropriate HTTP GET request.\n// A realtime feed is always defined with relation to an existing GTFS feed.\n// All the entity ids are resolved with respect to the GTFS feed.\n// Note that \"required\" and \"optional\" as stated in this file refer to Protocol\n// Buffer cardinality, not semantic cardinality.  See reference.md at\n// https://github.com/google/transit/tree/master/gtfs-realtime for field\n// semantic cardinality.\nmessage FeedMessage {\n  // Metadata about this feed and feed message.\n  required FeedHeader header = 1;\n\n  // Contents of the feed.\n  repeated FeedEntity entity = 2;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// Metadata about a feed, included in feed messages.\nmessage FeedHeader {\n  // Version of the feed specification.\n  // The current version is 2.0.  Valid versions are \"2.0\", \"1.0\".\n  required string gtfs_realtime_version = 1;\n\n  // Determines whether the current fetch is incremental.  Currently,\n  // DIFFERENTIAL mode is unsupported and behavior is unspecified for feeds\n  // that use this mode.  There are discussions on the GTFS Realtime mailing\n  // list around fully specifying the behavior of DIFFERENTIAL mode and the\n  // documentation will be updated when those discussions are finalized.\n  enum Incrementality {\n    FULL_DATASET = 0;\n    DIFFERENTIAL = 1;\n  }\n  optional Incrementality incrementality = 2 [default = FULL_DATASET];\n\n  // This timestamp identifies the moment when the content of this feed has been\n  // created (in server time). In POSIX time (i.e., number of seconds since\n  // January 1st 1970 00:00:00 UTC).\n  optional uint64 timestamp = 3;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// A definition (or update) of an entity in the transit feed.\nmessage FeedEntity {\n  // The ids are used only to provide incrementality support. The id should be\n  // unique within a FeedMessage. Consequent FeedMessages may contain\n  // FeedEntities with the same id. In case of a DIFFERENTIAL update the new\n  // FeedEntity with some id will replace the old FeedEntity with the same id\n  // (or delete it - see is_deleted below).\n  // The actual GTFS entities (e.g. stations, routes, trips) referenced by the\n  // feed must be specified by explicit selectors (see EntitySelector below for\n  // more info).\n  required string id = 1;\n\n  // Whether this entity is to be deleted. Relevant only for incremental\n  // fetches.\n  optional bool is_deleted = 2 [default = false];\n\n  // Data about the entity itself. Exactly one of the following fields must be\n  // present (unless the entity is being deleted).\n  optional TripUpdate trip_update = 3;\n  optional VehiclePosition vehicle = 4;\n  optional Alert alert = 5;\n\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional Shape shape = 6;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n//\n// Entities used in the feed.\n//\n\n// Realtime update of the progress of a vehicle along a trip.\n// Depending on the value of ScheduleRelationship, a TripUpdate can specify:\n// - A trip that proceeds along the schedule.\n// - A trip that proceeds along a route but has no fixed schedule.\n// - A trip that have been added or removed with regard to schedule.\n//\n// The updates can be for future, predicted arrival/departure events, or for\n// past events that already occurred.\n// Normally, updates should get more precise and more certain (see\n// uncertainty below) as the events gets closer to current time.\n// Even if that is not possible, the information for past events should be\n// precise and certain. In particular, if an update points to time in the past\n// but its update's uncertainty is not 0, the client should conclude that the\n// update is a (wrong) prediction and that the trip has not completed yet.\n//\n// Note that the update can describe a trip that is already completed.\n// To this end, it is enough to provide an update for the last stop of the trip.\n// If the time of that is in the past, the client will conclude from that that\n// the whole trip is in the past (it is possible, although inconsequential, to\n// also provide updates for preceding stops).\n// This option is most relevant for a trip that has completed ahead of schedule,\n// but according to the schedule, the trip is still proceeding at the current\n// time. Removing the updates for this trip could make the client assume\n// that the trip is still proceeding.\n// Note that the feed provider is allowed, but not required, to purge past\n// updates - this is one case where this would be practically useful.\nmessage TripUpdate {\n  // The Trip that this message applies to. There can be at most one\n  // TripUpdate entity for each actual trip instance.\n  // If there is none, that means there is no prediction information available.\n  // It does *not* mean that the trip is progressing according to schedule.\n  required TripDescriptor trip = 1;\n\n  // Additional information on the vehicle that is serving this trip.\n  optional VehicleDescriptor vehicle = 3;\n\n  // Timing information for a single predicted event (either arrival or\n  // departure).\n  // Timing consists of delay and/or estimated time, and uncertainty.\n  // - delay should be used when the prediction is given relative to some\n  //   existing schedule in GTFS.\n  // - time should be given whether there is a predicted schedule or not. If\n  //   both time and delay are specified, time will take precedence\n  //   (although normally, time, if given for a scheduled trip, should be\n  //   equal to scheduled time in GTFS + delay).\n  //\n  // Uncertainty applies equally to both time and delay.\n  // The uncertainty roughly specifies the expected error in true delay (but\n  // note, we don't yet define its precise statistical meaning). It's possible\n  // for the uncertainty to be 0, for example for trains that are driven under\n  // computer timing control.\n  message StopTimeEvent {\n    // Delay (in seconds) can be positive (meaning that the vehicle is late) or\n    // negative (meaning that the vehicle is ahead of schedule). Delay of 0\n    // means that the vehicle is exactly on time.\n    optional int32 delay = 1;\n\n    // Event as absolute time.\n    // In Unix time (i.e., number of seconds since January 1st 1970 00:00:00\n    // UTC).\n    optional int64 time = 2;\n\n    // If uncertainty is omitted, it is interpreted as unknown.\n    // If the prediction is unknown or too uncertain, the delay (or time) field\n    // should be empty. In such case, the uncertainty field is ignored.\n    // To specify a completely certain prediction, set its uncertainty to 0.\n    optional int32 uncertainty = 3;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features\n    // and modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n\n  // Realtime update for arrival and/or departure events for a given stop on a\n  // trip. Updates can be supplied for both past and future events.\n  // The producer is allowed, although not required, to drop past events.\n  message StopTimeUpdate {\n    // The update is linked to a specific stop either through stop_sequence or\n    // stop_id, so one of the fields below must necessarily be set.\n    // See the documentation in TripDescriptor for more information.\n\n    // Must be the same as in stop_times.txt in the corresponding GTFS feed.\n    optional uint32 stop_sequence = 1;\n    // Must be the same as in stops.txt in the corresponding GTFS feed.\n    optional string stop_id = 4;\n\n    optional StopTimeEvent arrival = 2;\n    optional StopTimeEvent departure = 3;\n\n    // Expected occupancy after departure from the given stop.\n    // Should be provided only for future stops.\n    // In order to provide departure_occupancy_status without either arrival or\n    // departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. \n    optional VehiclePosition.OccupancyStatus departure_occupancy_status = 7;\n\n    // The relation between the StopTimeEvents and the static schedule.\n    enum ScheduleRelationship {\n      // The vehicle is proceeding in accordance with its static schedule of\n      // stops, although not necessarily according to the times of the schedule.\n      // At least one of arrival and departure must be provided. If the schedule\n      // for this stop contains both arrival and departure times then so must\n      // this update. Frequency-based trips (GTFS frequencies.txt with exact_times = 0)\n      // should not have a SCHEDULED value and should use UNSCHEDULED instead.\n      SCHEDULED = 0;\n\n      // The stop is skipped, i.e., the vehicle will not stop at this stop.\n      // Arrival and departure are optional.\n      SKIPPED = 1;\n\n      // No StopTimeEvents are given for this stop.\n      // The main intention for this value is to give time predictions only for\n      // part of a trip, i.e., if the last update for a trip has a NO_DATA\n      // specifier, then StopTimeEvents for the rest of the stops in the trip\n      // are considered to be unspecified as well.\n      // Neither arrival nor departure should be supplied.\n      NO_DATA = 2;\n\n      // The vehicle is operating a trip defined in GTFS frequencies.txt with exact_times = 0.\n      // This value should not be used for trips that are not defined in GTFS frequencies.txt,\n      // or trips in GTFS frequencies.txt with exact_times = 1. Trips containing StopTimeUpdates\n      // with ScheduleRelationship=UNSCHEDULED must also set TripDescriptor.ScheduleRelationship=UNSCHEDULED.\n      // NOTE: This field is still experimental, and subject to change. It may be\n      // formally adopted in the future.\n      UNSCHEDULED = 3;\n    }\n    optional ScheduleRelationship schedule_relationship = 5\n        [default = SCHEDULED];\n\n    // Provides the updated values for the stop time.\n    // NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.\n    message StopTimeProperties {\n      // Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.\n      // The new assigned_stop_id should not result in a significantly different trip experience for the end user than\n      // the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an\n      // \"unusual change\" if the new stop was presented within an app without any additional context.\n      // For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the\n      // same station as the stop originally defined in GTFS stop_times.txt.\n      // To assign a stop without providing any real-time arrival or departure predictions, populate this field and set\n      // StopTimeUpdate.schedule_relationship = NO_DATA.\n      // If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If\n      // `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.\n      // Platform assignments should be reflected in other GTFS-realtime fields as well\n      // (e.g., `VehiclePosition.stop_id`).\n      // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n      optional string assigned_stop_id = 1;\n\n      // The extensions namespace allows 3rd-party developers to extend the\n      // GTFS Realtime Specification in order to add and evaluate new features\n      // and modifications to the spec.\n      extensions 1000 to 1999;\n\n      // The following extension IDs are reserved for private use by any organization.\n      extensions 9000 to 9999;\n    }\n\n    // Realtime updates for certain properties defined within GTFS stop_times.txt\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional StopTimeProperties stop_time_properties = 6;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features\n    // and modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n\n  // Updates to StopTimes for the trip (both future, i.e., predictions, and in\n  // some cases, past ones, i.e., those that already happened).\n  // The updates must be sorted by stop_sequence, and apply for all the\n  // following stops of the trip up to the next specified one.\n  //\n  // Example 1:\n  // For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure\n  // delay of 0 for stop_sequence of the current stop means that the trip is\n  // exactly on time.\n  //\n  // Example 2:\n  // For the same trip instance, 3 StopTimeUpdates are provided:\n  // - delay of 5 min for stop_sequence 3\n  // - delay of 1 min for stop_sequence 8\n  // - delay of unspecified duration for stop_sequence 10\n  // This will be interpreted as:\n  // - stop_sequences 3,4,5,6,7 have delay of 5 min.\n  // - stop_sequences 8,9 have delay of 1 min.\n  // - stop_sequences 10,... have unknown delay.\n  repeated StopTimeUpdate stop_time_update = 2;\n\n  // The most recent moment at which the vehicle's real-time progress was measured\n  // to estimate StopTimes in the future. When StopTimes in the past are provided,\n  // arrival/departure times may be earlier than this value. In POSIX\n  // time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).\n  optional uint64 timestamp = 4;\n\n  // The current schedule deviation for the trip.  Delay should only be\n  // specified when the prediction is given relative to some existing schedule\n  // in GTFS.\n  //\n  // Delay (in seconds) can be positive (meaning that the vehicle is late) or\n  // negative (meaning that the vehicle is ahead of schedule). Delay of 0\n  // means that the vehicle is exactly on time.\n  //\n  // Delay information in StopTimeUpdates take precedent of trip-level delay\n  // information, such that trip-level delay is only propagated until the next\n  // stop along the trip with a StopTimeUpdate delay value specified.\n  //\n  // Feed providers are strongly encouraged to provide a TripUpdate.timestamp\n  // value indicating when the delay value was last updated, in order to\n  // evaluate the freshness of the data.\n  //\n  // NOTE: This field is still experimental, and subject to change. It may be\n  // formally adopted in the future.\n  optional int32 delay = 5;\n\n  // Defines updated properties of the trip, such as a new shape_id when there is a detour. Or defines the\n  // trip_id, start_date, and start_time of a DUPLICATED trip. \n  // NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.\n  message TripProperties {\n    // Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt\n    // but will start at a different service date and/or time (defined using the TripProperties.start_date and\n    // TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different\n    // than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not\n    // be populated and will be ignored by consumers.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional string trip_id = 1;\n    // Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if\n    // schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional string start_date = 2;\n    // Defines the departure start time of the trip when it\u2019s duplicated. See definition of stop_times.departure_time\n    // in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset\n    // between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a\n    // departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value\n    // of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction\n    // delay values are applied to this calculated schedule time to determine the predicted time. For example, if a\n    // departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time\n    // prediction time values do not have any offset applied to them and indicate the predicted time as provided.\n    // For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time\n    // is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be\n    // populated and will be ignored by consumers.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional string start_time = 3;\n    // Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in\n    // (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing\n    // paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS\n    // nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt\n    // or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as\n    // (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should\n    // be marked as schedule_relationship=SKIPPED.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. \n    optional string shape_id = 4;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features\n    // and modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n  optional TripProperties trip_properties = 6;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// Realtime positioning information for a given vehicle.\nmessage VehiclePosition {\n  // The Trip that this vehicle is serving.\n  // Can be empty or partial if the vehicle can not be identified with a given\n  // trip instance.\n  optional TripDescriptor trip = 1;\n\n  // Additional information on the vehicle that is serving this trip.\n  optional VehicleDescriptor vehicle = 8;\n\n  // Current position of this vehicle.\n  optional Position position = 2;\n\n  // The stop sequence index of the current stop. The meaning of\n  // current_stop_sequence (i.e., the stop that it refers to) is determined by\n  // current_status.\n  // If current_status is missing IN_TRANSIT_TO is assumed.\n  optional uint32 current_stop_sequence = 3;\n  // Identifies the current stop. The value must be the same as in stops.txt in\n  // the corresponding GTFS feed.\n  optional string stop_id = 7;\n\n  enum VehicleStopStatus {\n    // The vehicle is just about to arrive at the stop (on a stop\n    // display, the vehicle symbol typically flashes).\n    INCOMING_AT = 0;\n\n    // The vehicle is standing at the stop.\n    STOPPED_AT = 1;\n\n    // The vehicle has departed and is in transit to the next stop.\n    IN_TRANSIT_TO = 2;\n  }\n  // The exact status of the vehicle with respect to the current stop.\n  // Ignored if current_stop_sequence is missing.\n  optional VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];\n\n  // Moment at which the vehicle's position was measured. In POSIX time\n  // (i.e., number of seconds since January 1st 1970 00:00:00 UTC).\n  optional uint64 timestamp = 5;\n\n  // Congestion level that is affecting this vehicle.\n  enum CongestionLevel {\n    UNKNOWN_CONGESTION_LEVEL = 0;\n    RUNNING_SMOOTHLY = 1;\n    STOP_AND_GO = 2;\n    CONGESTION = 3;\n    SEVERE_CONGESTION = 4;  // People leaving their cars.\n  }\n  optional CongestionLevel congestion_level = 6;\n\n  // The state of passenger occupancy for the vehicle or carriage.\n  // Individual producers may not publish all OccupancyStatus values. Therefore, consumers\n  // must not assume that the OccupancyStatus values follow a linear scale.\n  // Consumers should represent OccupancyStatus values as the state indicated \n  // and intended by the producer. Likewise, producers must use OccupancyStatus values that\n  // correspond to actual vehicle occupancy states.\n  // For describing passenger occupancy levels on a linear scale, see `occupancy_percentage`.\n  // This field is still experimental, and subject to change. It may be formally adopted in the future.\n  enum OccupancyStatus {\n    // The vehicle or carriage is considered empty by most measures, and has few or no\n    // passengers onboard, but is still accepting passengers.\n    EMPTY = 0;\n\n    // The vehicle or carriage has a large number of seats available.\n    // The amount of free seats out of the total seats available to be\n    // considered large enough to fall into this category is determined at the\n    // discretion of the producer.\n    MANY_SEATS_AVAILABLE = 1;\n\n    // The vehicle or carriage has a relatively small number of seats available.\n    // The amount of free seats out of the total seats available to be\n    // considered small enough to fall into this category is determined at the\n    // discretion of the feed producer.\n    FEW_SEATS_AVAILABLE = 2;\n\n    // The vehicle or carriage can currently accommodate only standing passengers.\n    STANDING_ROOM_ONLY = 3;\n\n    // The vehicle or carriage can currently accommodate only standing passengers\n    // and has limited space for them.\n    CRUSHED_STANDING_ROOM_ONLY = 4;\n\n    // The vehicle or carriage is considered full by most measures, but may still be\n    // allowing passengers to board.\n    FULL = 5;\n\n    // The vehicle or carriage is not accepting passengers, but usually accepts passengers for boarding.\n    NOT_ACCEPTING_PASSENGERS = 6;\n\n    // The vehicle or carriage doesn't have any occupancy data available at that time.\n    NO_DATA_AVAILABLE = 7;\n\n    // The vehicle or carriage is not boardable and never accepts passengers.\n    // Useful for special vehicles or carriages (engine, maintenance carriage, etc\u2026).\n    NOT_BOARDABLE = 8;\n\n  }\n  // If multi_carriage_status is populated with per-carriage OccupancyStatus,\n  // then this field should describe the entire vehicle with all carriages accepting passengers considered.\n  optional OccupancyStatus occupancy_status = 9;\n\n  // A percentage value indicating the degree of passenger occupancy in the vehicle.\n  // The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.\n  // The value 100 should represent the total maximum occupancy the vehicle was designed for,\n  // including both seated and standing capacity, and current operating regulations allow.\n  // The value may exceed 100 if there are more passengers than the maximum designed capacity.\n  // The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.\n  // If multi_carriage_status is populated with per-carriage occupancy_percentage, \n  // then this field should describe the entire vehicle with all carriages accepting passengers considered.\n  // This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional uint32 occupancy_percentage = 10;\n\n  // Carriage specific details, used for vehicles composed of several carriages\n  // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n  message CarriageDetails {\n\n    // Identification of the carriage. Should be unique per vehicle.\n    optional string id = 1;\n\n    // User visible label that may be shown to the passenger to help identify\n    // the carriage. Example: \"7712\", \"Car ABC-32\", etc...\n    // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional string label = 2;\n\n    // Occupancy status for this given carriage, in this vehicle\n    // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];\n\n    // Occupancy percentage for this given carriage, in this vehicle.\n    // Follows the same rules as \"VehiclePosition.occupancy_percentage\"\n    // -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)\n    // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional int32 occupancy_percentage = 4 [default = -1];\n\n    // Identifies the order of this carriage with respect to the other\n    // carriages in the vehicle's list of CarriageDetails.\n    // The first carriage in the direction of travel must have a value of 1.\n    // The second value corresponds to the second carriage in the direction\n    // of travel and must have a value of 2, and so forth.\n    // For example, the first carriage in the direction of travel has a value of 1.\n    // If the second carriage in the direction of travel has a value of 3,\n    // consumers will discard data for all carriages (i.e., the multi_carriage_details field).\n    // Carriages without data must be represented with a valid carriage_sequence number and the fields \n    // without data should be omitted (alternately, those fields could also be included and set to the \"no data\" values).\n    // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional uint32 carriage_sequence = 5;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features and\n    // modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n\n  // Details of the multiple carriages of this given vehicle.\n  // The first occurrence represents the first carriage of the vehicle, \n  // given the current direction of travel. \n  // The number of occurrences of the multi_carriage_details \n  // field represents the number of carriages of the vehicle.\n  // It also includes non boardable carriages, \n  // like engines, maintenance carriages, etc\u2026 as they provide valuable \n  // information to passengers about where to stand on a platform.\n  // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n  repeated CarriageDetails multi_carriage_details = 11;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// An alert, indicating some sort of incident in the public transit network.\nmessage Alert {\n  // Time when the alert should be shown to the user. If missing, the\n  // alert will be shown as long as it appears in the feed.\n  // If multiple ranges are given, the alert will be shown during all of them.\n  repeated TimeRange active_period = 1;\n\n  // Entities whose users we should notify of this alert.\n  repeated EntitySelector informed_entity = 5;\n\n  // Cause of this alert.\n  enum Cause {\n    UNKNOWN_CAUSE = 1;\n    OTHER_CAUSE = 2;        // Not machine-representable.\n    TECHNICAL_PROBLEM = 3;\n    STRIKE = 4;             // Public transit agency employees stopped working.\n    DEMONSTRATION = 5;      // People are blocking the streets.\n    ACCIDENT = 6;\n    HOLIDAY = 7;\n    WEATHER = 8;\n    MAINTENANCE = 9;\n    CONSTRUCTION = 10;\n    POLICE_ACTIVITY = 11;\n    MEDICAL_EMERGENCY = 12;\n  }\n  optional Cause cause = 6 [default = UNKNOWN_CAUSE];\n\n  // What is the effect of this problem on the affected entity.\n  enum Effect {\n    NO_SERVICE = 1;\n    REDUCED_SERVICE = 2;\n\n    // We don't care about INsignificant delays: they are hard to detect, have\n    // little impact on the user, and would clutter the results as they are too\n    // frequent.\n    SIGNIFICANT_DELAYS = 3;\n\n    DETOUR = 4;\n    ADDITIONAL_SERVICE = 5;\n    MODIFIED_SERVICE = 6;\n    OTHER_EFFECT = 7;\n    UNKNOWN_EFFECT = 8;\n    STOP_MOVED = 9;\n    NO_EFFECT = 10;\n    ACCESSIBILITY_ISSUE = 11;\n  }\n  optional Effect effect = 7 [default = UNKNOWN_EFFECT];\n\n  // The URL which provides additional information about the alert.\n  optional TranslatedString url = 8;\n\n  // Alert header. Contains a short summary of the alert text as plain-text.\n  optional TranslatedString header_text = 10;\n\n  // Full description for the alert as plain-text. The information in the\n  // description should add to the information of the header.\n  optional TranslatedString description_text = 11;\n\n  // Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.\n  optional TranslatedString tts_header_text = 12;\n\n  // Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.\n  optional TranslatedString tts_description_text = 13;\n\n  // Severity of this alert.\n  enum SeverityLevel {\n    UNKNOWN_SEVERITY = 1;\n    INFO = 2;\n    WARNING = 3;\n    SEVERE = 4;\n  }\n\n  optional SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];\n\n  // TranslatedImage to be displayed along the alert text. Used to explain visually the alert effect of a detour, station closure, etc. The image must enhance the understanding of the alert. Any essential information communicated within the image must also be contained in the alert text.\n  // The following types of images are discouraged : image containing mainly text, marketing or branded images that add no additional information. \n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional TranslatedImage image = 15; \n\n  // Text describing the appearance of the linked image in the `image` field (e.g., in case the image can't be displayed\n  // or the user can't see the image for accessibility reasons). See the HTML spec for alt image text - https://html.spec.whatwg.org/#alt.\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional TranslatedString image_alternative_text = 16;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features\n  // and modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n//\n// Low level data structures used above.\n//\n\n// A time interval. The interval is considered active at time 't' if 't' is\n// greater than or equal to the start time and less than the end time.\nmessage TimeRange {\n  // Start time, in POSIX time (i.e., number of seconds since January 1st 1970\n  // 00:00:00 UTC).\n  // If missing, the interval starts at minus infinity.\n  optional uint64 start = 1;\n\n  // End time, in POSIX time (i.e., number of seconds since January 1st 1970\n  // 00:00:00 UTC).\n  // If missing, the interval ends at plus infinity.\n  optional uint64 end = 2;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// A position.\nmessage Position {\n  // Degrees North, in the WGS-84 coordinate system.\n  required float latitude = 1;\n\n  // Degrees East, in the WGS-84 coordinate system.\n  required float longitude = 2;\n\n  // Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.\n  // This can be the compass bearing, or the direction towards the next stop\n  // or intermediate location.\n  // This should not be direction deduced from the sequence of previous\n  // positions, which can be computed from previous data.\n  optional float bearing = 3;\n\n  // Odometer value, in meters.\n  optional double odometer = 4;\n  // Momentary speed measured by the vehicle, in meters per second.\n  optional float speed = 5;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// A descriptor that identifies an instance of a GTFS trip, or all instances of\n// a trip along a route.\n// - To specify a single trip instance, the trip_id (and if necessary,\n//   start_time) is set. If route_id is also set, then it should be same as one\n//   that the given trip corresponds to.\n// - To specify all the trips along a given route, only the route_id should be\n//   set. Note that if the trip_id is not known, then stop sequence ids in\n//   TripUpdate are not sufficient, and stop_ids must be provided as well. In\n//   addition, absolute arrival/departure times must be provided.\nmessage TripDescriptor {\n  // The trip_id from the GTFS feed that this selector refers to.\n  // For non frequency-based trips, this field is enough to uniquely identify\n  // the trip. For frequency-based trip, start_time and start_date might also be\n  // necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from\n  // static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id\n  // identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.\n  optional string trip_id = 1;\n\n  // The route_id from the GTFS that this selector refers to.\n  optional string route_id = 5;\n\n  // The direction_id from the GTFS feed trips.txt file, indicating the\n  // direction of travel for trips this selector refers to.\n  optional uint32 direction_id = 6;\n\n  // The initially scheduled start time of this trip instance.\n  // When the trip_id corresponds to a non-frequency-based trip, this field\n  // should either be omitted or be equal to the value in the GTFS feed. When\n  // the trip_id correponds to a frequency-based trip, the start_time must be\n  // specified for trip updates and vehicle positions. If the trip corresponds\n  // to exact_times=1 GTFS record, then start_time must be some multiple\n  // (including zero) of headway_secs later than frequencies.txt start_time for\n  // the corresponding time period. If the trip corresponds to exact_times=0,\n  // then its start_time may be arbitrary, and is initially expected to be the\n  // first departure of the trip. Once established, the start_time of this\n  // frequency-based trip should be considered immutable, even if the first\n  // departure time changes -- that time change may instead be reflected in a\n  // StopTimeUpdate.\n  // Format and semantics of the field is same as that of\n  // GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.\n  optional string start_time = 2;\n  // The scheduled start date of this trip instance.\n  // Must be provided to disambiguate trips that are so late as to collide with\n  // a scheduled trip on a next day. For example, for a train that departs 8:00\n  // and 20:00 every day, and is 12 hours late, there would be two distinct\n  // trips on the same time.\n  // This field can be provided but is not mandatory for schedules in which such\n  // collisions are impossible - for example, a service running on hourly\n  // schedule where a vehicle that is one hour late is not considered to be\n  // related to schedule anymore.\n  // In YYYYMMDD format.\n  optional string start_date = 3;\n\n  // The relation between this trip and the static schedule. If a trip is done\n  // in accordance with temporary schedule, not reflected in GTFS, then it\n  // shouldn't be marked as SCHEDULED, but likely as ADDED.\n  enum ScheduleRelationship {\n    // Trip that is running in accordance with its GTFS schedule, or is close\n    // enough to the scheduled trip to be associated with it.\n    SCHEDULED = 0;\n\n    // An extra trip that was added in addition to a running schedule, for\n    // example, to replace a broken vehicle or to respond to sudden passenger\n    // load.\n    // NOTE: Currently, behavior is unspecified for feeds that use this mode. There are discussions on the GTFS GitHub\n    // [(1)](https://github.com/google/transit/issues/106) [(2)](https://github.com/google/transit/pull/221)\n    // [(3)](https://github.com/google/transit/pull/219) around fully specifying or deprecating ADDED trips and the\n    // documentation will be updated when those discussions are finalized.\n    ADDED = 1;\n\n    // A trip that is running with no schedule associated to it (GTFS frequencies.txt exact_times=0).\n    // Trips with ScheduleRelationship=UNSCHEDULED must also set all StopTimeUpdates.ScheduleRelationship=UNSCHEDULED.\n    UNSCHEDULED = 2;\n\n    // A trip that existed in the schedule but was removed.\n    CANCELED = 3;\n\n    // Should not be used - for backwards-compatibility only.\n    REPLACEMENT = 5 [deprecated=true];\n\n    // An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to\n    // respond to sudden passenger load. Used with TripUpdate.TripProperties.trip_id, TripUpdate.TripProperties.start_date,\n    // and TripUpdate.TripProperties.start_time to copy an existing trip from static GTFS but start at a different service\n    // date and/or time. Duplicating a trip is allowed if the service related to the original trip in (CSV) GTFS\n    // (in calendar.txt or calendar_dates.txt) is operating within the next 30 days. The trip to be duplicated is\n    // identified via TripUpdate.TripDescriptor.trip_id. This enumeration does not modify the existing trip referenced by\n    // TripUpdate.TripDescriptor.trip_id - if a producer wants to cancel the original trip, it must publish a separate\n    // TripUpdate with the value of CANCELED. Trips defined in GTFS frequencies.txt with exact_times that is empty or\n    // equal to 0 cannot be duplicated. The VehiclePosition.TripDescriptor.trip_id for the new trip must contain\n    // the matching value from TripUpdate.TripProperties.trip_id and VehiclePosition.TripDescriptor.ScheduleRelationship\n    // must also be set to DUPLICATED.\n    // Existing producers and consumers that were using the ADDED enumeration to represent duplicated trips must follow\n    // the migration guide (https://github.com/google/transit/tree/master/gtfs-realtime/spec/en/examples/migration-duplicated.md)\n    // to transition to the DUPLICATED enumeration.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    DUPLICATED = 6;\n  }\n  optional ScheduleRelationship schedule_relationship = 4;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// Identification information for the vehicle performing the trip.\nmessage VehicleDescriptor {\n  // Internal system identification of the vehicle. Should be unique per\n  // vehicle, and can be used for tracking the vehicle as it proceeds through\n  // the system.\n  optional string id = 1;\n\n  // User visible label, i.e., something that must be shown to the passenger to\n  // help identify the correct vehicle.\n  optional string label = 2;\n\n  // The license plate of the vehicle.\n  optional string license_plate = 3;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// A selector for an entity in a GTFS feed.\nmessage EntitySelector {\n  // The values of the fields should correspond to the appropriate fields in the\n  // GTFS feed.\n  // At least one specifier must be given. If several are given, then the\n  // matching has to apply to all the given specifiers.\n  optional string agency_id = 1;\n  optional string route_id = 2;\n  // corresponds to route_type in GTFS.\n  optional int32 route_type = 3;\n  optional TripDescriptor trip = 4;\n  optional string stop_id = 5;\n  // Corresponds to trip direction_id in GTFS trips.txt. If provided the\n  // route_id must also be provided.\n  optional uint32 direction_id = 6;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// An internationalized message containing per-language versions of a snippet of\n// text or a URL.\n// One of the strings from a message will be picked up. The resolution proceeds\n// as follows:\n// 1. If the UI language matches the language code of a translation,\n//    the first matching translation is picked.\n// 2. If a default UI language (e.g., English) matches the language code of a\n//    translation, the first matching translation is picked.\n// 3. If some translation has an unspecified language code, that translation is\n//    picked.\nmessage TranslatedString {\n  message Translation {\n    // A UTF-8 string containing the message.\n    required string text = 1;\n    // BCP-47 language code. Can be omitted if the language is unknown or if\n    // no i18n is done at all for the feed. At most one translation is\n    // allowed to have an unspecified language tag.\n    optional string language = 2;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features and\n    // modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n  // At least one translation must be provided.\n  repeated Translation translation = 1;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// An internationalized image containing per-language versions of a URL linking to an image\n// along with meta information\n// Only one of the images from a message will be retained by consumers. The resolution proceeds\n// as follows:\n// 1. If the UI language matches the language code of a translation,\n//    the first matching translation is picked.\n// 2. If a default UI language (e.g., English) matches the language code of a\n//    translation, the first matching translation is picked.\n// 3. If some translation has an unspecified language code, that translation is\n//    picked.\n// NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\nmessage TranslatedImage {\n  message LocalizedImage {\n    // String containing an URL linking to an image\n    // The image linked must be less than 2MB. \n    // If an image changes in a significant enough way that an update is required on the consumer side, the producer must update the URL to a new one.\n    // The URL should be a fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the following\u00a0https://www.w3.org/Addressing/URL/4_URI_Recommentations.html\u00a0for a description of how to create fully qualified URL values.\n    required string url = 1;\n\n    // IANA media type as to specify the type of image to be displayed. \n    // The type must start with \"image/\"\n    required string media_type = 2;\n\n    // BCP-47 language code. Can be omitted if the language is unknown or if\n    // no i18n is done at all for the feed. At most one translation is\n    // allowed to have an unspecified language tag.\n    optional string language = 3;\n\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features and\n    // modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n  // At least one localized image must be provided.\n  repeated LocalizedImage localized_image = 1;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// Describes the physical path that a vehicle takes when it's not part of the (CSV) GTFS,\n// such as for a detour. Shapes belong to Trips, and consist of a sequence of shape points.\n// Tracing the points in order provides the path of the vehicle.  Shapes do not need to intercept\n// the location of Stops exactly, but all Stops on a trip should lie within a small distance of\n// the shape for that trip, i.e. close to straight line segments connecting the shape points\n// NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.\nmessage Shape {\n  // Identifier of the shape. Must be different than any shape_id defined in the (CSV) GTFS.\n  // This field is required as per reference.md, but needs to be specified here optional because \"Required is Forever\"\n  // See https://developers.google.com/protocol-buffers/docs/proto#specifying_field_rules\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional string shape_id = 1;\n\n  // Encoded polyline representation of the shape. This polyline must contain at least two points.\n  // For more information about encoded polylines, see https://developers.google.com/maps/documentation/utilities/polylinealgorithm\n  // This field is required as per reference.md, but needs to be specified here optional because \"Required is Forever\"\n  // See https://developers.google.com/protocol-buffers/docs/proto#specifying_field_rules\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional string encoded_polyline = 2;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n</code></pre></p>","title":"GTFS Realtime Protobuf"},{"location":"realtime/reference/","text":"<p>A GTFS Realtime feed lets transit agencies provide consumers with realtime information about disruptions to their service (stations closed, lines not operating, important delays, etc.) location of their vehicles, and expected arrival times.</p> <p>Version 2.0 of the feed specification is discussed and documented on this site. Valid versions are \"2.0\", \"1.0\".</p>","title":"GTFS Realtime Reference"},{"location":"realtime/reference/#term-definitions","text":"","title":"Term Definitions"},{"location":"realtime/reference/#required","text":"<p>In GTFS-realtime v2.0 and higher, the Required column describes what fields must be provided by a producer in order for the transit data to be valid and make sense to a consuming application.</p> <p>The following values are used in the Required field:</p> <ul> <li>Required: This field must be provided by a GTFS-realtime feed producer.</li> <li>Conditionally required: This field is required under certain conditions, which are outlined in the field Description. Outside of these conditions, the field is optional.</li> <li>Optional: This field is optional and is not required to be implemented by producers. However, if the data is available in the underlying automatic vehicle location systems (e.g., VehiclePosition <code>timestamp</code>) it is recommended that producers provide these optional fields when possible.</li> </ul> <p>Note that semantic requirements were not defined in GTFS-realtime version 1.0, and therefore feeds with <code>gtfs_realtime_version</code> of <code>1</code> may not meet these requirements (see the proposal for semantic requirements for details).</p>","title":"Required"},{"location":"realtime/reference/#cardinality","text":"<p>Cardinality represents the number of elements that may be provided for a particular field, with the following values:</p> <ul> <li>One - A single one element may be provided for this field. This maps to the Protocol Buffer required and optional cardinalities.</li> <li>Many - Many elements (0, 1, or more) may be provided for this field. This maps to the Protocol Buffer repeated cardinality.</li> </ul> <p>Always reference the Required and Description fields to see when a field is required, conditionally required, or optional. Please reference <code>gtfs-realtime.proto</code> for Protocol Buffer cardinality.</p>","title":"Cardinality"},{"location":"realtime/reference/#protocol-buffer-data-types","text":"<p>The following protocol buffer data types are used to describe feed elements:</p> <ul> <li>message: Complex type</li> <li>enum: List of fixed values</li> </ul>","title":"Protocol Buffer data types"},{"location":"realtime/reference/#experimental-fields","text":"<p>Fields labeled as experimental are subject to change and not yet formally adopted into the specification. An experimental field may be formally adopted in the future.</p>","title":"Experimental fields"},{"location":"realtime/reference/#element-index","text":"<ul> <li>FeedMessage<ul> <li>FeedHeader<ul> <li>Incrementality</li> </ul> </li> <li>FeedEntity<ul> <li>TripUpdate<ul> <li>TripDescriptor<ul> <li>ScheduleRelationship</li> </ul> </li> <li>VehicleDescriptor</li> <li>StopTimeUpdate<ul> <li>StopTimeEvent</li> <li>ScheduleRelationship</li> <li>StopTimeProperties</li> </ul> </li> <li>TripProperties</li> </ul> </li> <li>VehiclePosition<ul> <li>TripDescriptor<ul> <li>ScheduleRelationship</li> </ul> </li> <li>VehicleDescriptor</li> <li>Position</li> <li>VehicleStopStatus</li> <li>CongestionLevel</li> <li>OccupancyStatus</li> <li>CarriageDetails</li> </ul> </li> <li>Alert<ul> <li>TimeRange</li> <li>EntitySelector<ul> <li>TripDescriptor<ul> <li>ScheduleRelationship</li> </ul> </li> </ul> </li> <li>Cause</li> <li>Effect</li> <li>TranslatedString<ul> <li>Translation</li> </ul> </li> <li>SeverityLevel</li> </ul> </li> </ul> </li> </ul> </li> </ul>","title":"Element Index"},{"location":"realtime/reference/#elements","text":"","title":"Elements"},{"location":"realtime/reference/#message-feedmessage","text":"<p>The contents of a feed message. Each message in the stream is obtained as a response to an appropriate HTTP GET request. A realtime feed is always defined with relation to an existing GTFS feed. All the entity ids are resolved with respect to the GTFS feed.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     header FeedHeader Required One Metadata about this feed and feed message.   entity FeedEntity Conditionally required Many Contents of the feed.  If there is real-time information available for the transit system, this field must be provided.  If this field is empty, consumers should assume there is no real-time information available for the system.","title":"message FeedMessage"},{"location":"realtime/reference/#message-feedheader","text":"<p>Metadata about a feed, included in feed messages.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     gtfs_realtime_version string Required One Version of the feed specification. The current version is 2.0.   incrementality Incrementality Required One    timestamp uint64 Required One This timestamp identifies the moment when the content of this feed has been created (in server time). In POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC). To avoid time skew between systems producing and consuming realtime information it is strongly advised to derive timestamp from a time server. It is completely acceptable to use Stratum 3 or even lower strata servers since time differences up to a couple of seconds are tolerable.","title":"message FeedHeader"},{"location":"realtime/reference/#enum-incrementality","text":"<p>Determines whether the current fetch is incremental.</p> <ul> <li>FULL_DATASET: this feed update will overwrite all preceding realtime information for the feed. Thus this update is expected to provide a full snapshot of all known realtime information.</li> <li>DIFFERENTIAL: currently, this mode is unsupported and behavior is unspecified for feeds that use this mode. There are discussions on the GTFS Realtime mailing list around fully specifying the behavior of DIFFERENTIAL mode and the documentation will be updated when those discussions are finalized.</li> </ul> <p>Values</p>    Value     FULL_DATASET   DIFFERENTIAL","title":"enum Incrementality"},{"location":"realtime/reference/#message-feedentity","text":"<p>A definition (or update) of an entity in the transit feed. If the entity is not being deleted, exactly one of 'trip_update', 'vehicle', 'alert' and 'shape' fields should be populated.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     id string Required One Feed-unique identifier for this entity. The ids are used only to provide incrementality support. The actual entities referenced by the feed must be specified by explicit selectors (see EntitySelector below for more info).   is_deleted bool Optional One Whether this entity is to be deleted. Should be provided only for feeds with Incrementality of DIFFERENTIAL - this field should NOT be provided for feeds with Incrementality of FULL_DATASET.   trip_update TripUpdate Conditionally required One Data about the realtime departure delays of a trip.  At least one of the fields trip_update, vehicle, alert, or shape must be provided - all these fields cannot be empty.   vehicle VehiclePosition Conditionally required One Data about the realtime position of a vehicle. At least one of the fields trip_update, vehicle, alert, or shape must be provided - all these fields cannot be empty.   alert Alert Conditionally required One Data about the realtime alert. At least one of the fields trip_update, vehicle, alert, or shape must be provided - all these fields cannot be empty.   shape Shape Conditionally required One Data about the realtime added shapes, such as for a detour. At least one of the fields trip_update, vehicle, alert, or shape must be provided - all these fields cannot be empty. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"message FeedEntity"},{"location":"realtime/reference/#message-tripupdate","text":"<p>Realtime update on the progress of a vehicle along a trip. Please also refer to the general discussion of the trip updates entities.</p> <p>Depending on the value of ScheduleRelationship, a TripUpdate can specify:</p> <ul> <li>A trip that proceeds along the schedule.</li> <li>A trip that proceeds along a route but has no fixed schedule.</li> <li>A trip that has been added or removed with regard to schedule.</li> <li>A new trip that is a copy of an existing trip in static GTFS. It will run at the service date and time specified in TripProperties.</li> </ul> <p>The updates can be for future, predicted arrival/departure events, or for past events that already occurred. In most cases information about past events is a measured value thus its uncertainty value is recommended to be 0. Although there could be cases when this does not hold so it is allowed to have uncertainty value different from 0 for past events. If an update's uncertainty is not 0, either the update is an approximate prediction for a trip that has not completed or the measurement is not precise or the update was a prediction for the past that has not been verified after the event occurred.</p> <p>If a vehicle is serving multiple trips within the same block (for more information about trips and blocks, please refer to GTFS trips.txt): * the feed should include a TripUpdate for the trip currently being served by the vehicle. Producers are encouraged to include TripUpdates for one or more trips after the current trip in this vehicle's block if the producer is confident in the quality of the predictions for these future trip(s). Including multiple TripUpdates for the same vehicle avoids prediction \"pop-in\" for riders as the vehicle transitions from one trip to another and also gives riders advance notice of delays that impact downstream trips (e.g., when the known delay exceeds planned layover times between trips). * the respective TripUpdate entities are not required to be added to the feed in the same order that they are scheduled in the block. For example, if there are trips with <code>trip_ids</code> 1, 2, and 3 that all belong to one block, and the vehicle travels trip 1, then trip 2, and then trip 3, the <code>trip_update</code> entities may appear in any order - for example, adding trip 2, then trip 1, and then trip 3 is allowed.</p> <p>Note that the update can describe a trip that has already completed.To this end, it is enough to provide an update for the last stop of the trip. If the time of arrival at the last stop is in the past, the client will conclude that the whole trip is in the past (it is possible, although inconsequential, to also provide updates for preceding stops). This option is most relevant for a trip that has completed ahead of schedule, but according to the schedule, the trip is still proceeding at the current time. Removing the updates for this trip could make the client assume that the trip is still proceeding. Note that the feed provider is allowed, but not required, to purge past updates - this is one case where this would be practically useful.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     trip TripDescriptor Required One The Trip that this message applies to. There can be at most one TripUpdate entity for each actual trip instance. If there is none, that means there is no prediction information available. It does not mean that the trip is progressing according to schedule.   vehicle VehicleDescriptor Optional One Additional information on the vehicle that is serving this trip.   stop_time_update StopTimeUpdate Conditionally required Many Updates to StopTimes for the trip (both future, i.e., predictions, and in some cases, past ones, i.e., those that already happened). The updates must be sorted by stop_sequence, and apply for all the following stops of the trip up to the next specified stop_time_update.  At least one stop_time_update must be provided for the trip unless the trip.schedule_relationship is CANCELED or DUPLICATED - if the trip is canceled, no stop_time_updates need to be provided. If the trip is duplicated, stop_time_updates may be provided to indicate real-time information for the new trip.   timestamp uint64 Optional One The most recent moment at which the vehicle's real-time progress was measured to estimate StopTimes in the future. When StopTimes in the past are provided, arrival/departure times may be earlier than this value. In POSIX time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).   delay int32 Optional One The current schedule deviation for the trip. Delay should only be specified when the prediction is given relative to some existing schedule in GTFS.Delay (in seconds) can be positive (meaning that the vehicle is late) or negative (meaning that the vehicle is ahead of schedule). Delay of 0 means that the vehicle is exactly on time.Delay information in StopTimeUpdates take precedent of trip-level delay information, such that trip-level delay is only propagated until the next stop along the trip with a StopTimeUpdate delay value specified.Feed providers are strongly encouraged to provide a TripUpdate.timestamp value indicating when the delay value was last updated, in order to evaluate the freshness of the data.Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   trip_properties TripProperties Optional One Provides the updated properties for the trip. Caution: this message is still experimental, and subject to change. It may be formally adopted in the future.","title":"message TripUpdate"},{"location":"realtime/reference/#message-stoptimeevent","text":"<p>Timing information for a single predicted event (either arrival or departure). Timing consists of delay and/or estimated time, and uncertainty.</p> <ul> <li>delay should be used when the prediction is given relative to some existing schedule in GTFS.</li> <li>time should be given whether there is a predicted schedule or not. If both time and delay are specified, time will take precedence (although normally, time, if given for a scheduled trip, should be equal to scheduled time in GTFS + delay).</li> </ul> <p>Uncertainty applies equally to both time and delay. The uncertainty roughly specifies the expected error in true delay (but note, we don't yet define its precise statistical meaning). It's possible for the uncertainty to be 0, for example for trains that are driven under computer timing control.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     delay int32 Conditionally required One Delay (in seconds) can be positive (meaning that the vehicle is late) or negative (meaning that the vehicle is ahead of schedule). Delay of 0 means that the vehicle is exactly on time.  Either delay or time must be provided within a StopTimeEvent - both fields cannot be empty.   time int64 Conditionally required One Event as absolute time. In POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC). Either delay or time must be provided within a StopTimeEvent - both fields cannot be empty.   uncertainty int32 Optional One If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.","title":"message StopTimeEvent"},{"location":"realtime/reference/#message-stoptimeupdate","text":"<p>Realtime update for arrival and/or departure events for a given stop on a trip. Please also refer to the general discussion of stop time updates in the TripDescriptor and trip updates entities documentation.</p> <p>Updates can be supplied for both past and future events. The producer is allowed, although not required, to drop past events. The update is linked to a specific stop either through stop_sequence or stop_id, so one of these fields must necessarily be set.  If the same stop_id is visited more than once in a trip, then stop_sequence should be provided in all StopTimeUpdates for that stop_id on that trip.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     stop_sequence uint32 Conditionally required One Must be the same as in stop_times.txt in the corresponding GTFS feed.  Either stop_sequence or stop_id must be provided within a StopTimeUpdate - both fields cannot be empty.  stop_sequence is required for trips that visit the same stop_id more than once (e.g., a loop) to disambiguate which stop the prediction is for. If <code>StopTimeProperties.assigned_stop_id</code> is populated, then <code>stop_sequence</code> must be populated.   stop_id string Conditionally required One Must be the same as in stops.txt in the corresponding GTFS feed. Either stop_sequence or stop_id must be provided within a StopTimeUpdate - both fields cannot be empty. If <code>StopTimeProperties.assigned_stop_id</code> is populated, it is preferred to omit <code>stop_id</code> and use only <code>stop_sequence</code>. If <code>StopTimeProperties.assigned_stop_id</code> and <code>stop_id</code> are populated, <code>stop_id</code> must match <code>assigned_stop_id</code>.   arrival StopTimeEvent Conditionally required One If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate - both fields cannot be empty. arrival and departure may both be empty when schedule_relationship is SKIPPED.  If schedule_relationship is NO_DATA, arrival and departure must be empty.   departure StopTimeEvent Conditionally required One If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate - both fields cannot be empty. arrival and departure may both be empty when schedule_relationship is SKIPPED.  If schedule_relationship is NO_DATA, arrival and departure must be empty.   departure_occupancy_status OccupancyStatus Optional One The predicted state of passenger occupancy for the vehicle immediately after departure from the given stop. If provided, stop_sequence must be provided. To provide departure_occupancy_status without providing any real-time arrival or departure predictions, populate this field and set StopTimeUpdate.schedule_relationship = NO_DATA. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   schedule_relationship ScheduleRelationship Optional One The default relationship is SCHEDULED.   stop_time_properties StopTimeProperties Optional One Realtime updates for certain properties defined within GTFS stop_times.txt Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"message StopTimeUpdate"},{"location":"realtime/reference/#enum-schedulerelationship","text":"<p>The relation between this StopTime and the static schedule.</p> <p>Values</p>    Value Comment     SCHEDULED The vehicle is proceeding in accordance with its static schedule of stops, although not necessarily according to the times of the schedule. This is the default behavior. At least one of arrival and departure must be provided. Frequency-based trips (GTFS frequencies.txt with exact_times = 0) should not have a SCHEDULED value and should use UNSCHEDULED instead.   SKIPPED The stop is skipped, i.e., the vehicle will not stop at this stop. Arrival and departure are optional. When set <code>SKIPPED</code> is not propagated to subsequent stops in the same trip (i.e., the vehicle will stop at subsequent stops in the trip unless those stops also have a <code>stop_time_update</code> with <code>schedule_relationship: SKIPPED</code>). Delay from a previous stop in the trip does propagate over the <code>SKIPPED</code> stop. In other words, if a <code>stop_time_update</code> with an <code>arrival</code> or <code>departure</code> prediction is not set for a stop after the <code>SKIPPED</code> stop, the prediction upstream of the <code>SKIPPED</code> stop will be propagated to the stop after the <code>SKIPPED</code> stop and subsequent stops in the trip until a <code>stop_time_update</code> for a subsequent stop is provided.   NO_DATA No data is given for this stop. It indicates that there is no realtime timing information available. When set NO_DATA is propagated through subsequent stops so this is the recommended way of specifying from which stop you do not have realtime timing information. When NO_DATA is set neither arrival nor departure should be supplied.   UNSCHEDULED The vehicle is operating a frequency-based trip (GTFS frequencies.txt with exact_times = 0). This value should not be used for trips that are not defined in GTFS frequencies.txt, or trips in GTFS frequencies.txt with exact_times = 1. Trips containing <code>stop_time_updates</code> with <code>schedule_relationship: UNSCHEDULED</code> must also set the TripDescriptor <code>schedule_relationship: UNSCHEDULED</code> Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"enum ScheduleRelationship"},{"location":"realtime/reference/#message-stoptimeproperties","text":"<p>Realtime update for certain properties defined within GTFS stop_times.txt.</p> <p>Caution: this message is still experimental, and subject to change. It may be formally adopted in the future. </p> <p>Fields</p>    Field Name Type Required Cardinality Description     assigned_stop_id string Optional One Supports real-time stop assignments. Refers to a <code>stop_id</code> defined in the GTFS <code>stops.txt</code>.  The new <code>assigned_stop_id</code> should not result in a significantly different trip experience for the end user than the <code>stop_id</code> defined in GTFS <code>stop_times.txt</code>. In other words, the end user should not view this new <code>stop_id</code> as an \"unusual change\" if the new stop was presented within an app without any additional context. For example, this field is intended to be used for platform assignments by using a <code>stop_id</code> that belongs to the same station as the stop originally defined in GTFS <code>stop_times.txt</code>.  To assign a stop without providing any real-time arrival or departure predictions, populate this field and set <code>StopTimeUpdate.schedule_relationship = NO_DATA</code>.  If this field is populated, <code>StopTimeUpdate.stop_sequence</code> must be populated and <code>StopTimeUpdate.stop_id</code> should not be populated. Stop assignments should be reflected in other GTFS-realtime fields as well (e.g., <code>VehiclePosition.stop_id</code>). Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"message StopTimeProperties"},{"location":"realtime/reference/#message-tripproperties","text":"<p>Defines updated properties of the trip</p> <p>Caution: this message is still experimental, and subject to change. It may be formally adopted in the future..</p> <p>Fields</p>    Field Name Type Required Cardinality Description     trip_id string Conditionally required One Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt but will start at a different service date and/or time (defined using <code>TripProperties.start_date</code> and <code>TripProperties.start_time</code>). See definition of <code>trips.trip_id</code> in (CSV) GTFS. Its value must be different than the ones used in the (CSV) GTFS. This field is required if <code>schedule_relationship</code> is <code>DUPLICATED</code>, otherwise this field must not be populated and will be ignored by consumers. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   start_date string Conditionally required One Service date on which the duplicated trip will be run. Must be provided in YYYYMMDD format. This field is required if <code>schedule_relationship</code> is <code>DUPLICATED</code>, otherwise this field must not be populated and will be ignored by consumers. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   start_time string Conditionally required One Defines the departure start time of the trip when it\u2019s duplicated. See definition of <code>stop_times.departure_time</code> in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset between the original trip <code>departure_time</code> and this field. For example, if a GTFS trip has stop A with a <code>departure_time</code> of <code>10:00:00</code> and stop B with <code>departure_time</code> of <code>10:01:00</code>, and this field is populated with the value of <code>10:30:00</code>, stop B on the duplicated trip will have a scheduled <code>departure_time</code> of <code>10:31:00</code>. Real-time prediction <code>delay</code> values are applied to this calculated schedule time to determine the predicted time. For example, if a departure <code>delay</code> of <code>30</code> is provided for stop B, then the predicted departure time is <code>10:31:30</code>. Real-time prediction <code>time</code> values do not have any offset applied to them and indicate the predicted time as provided.  For example, if a departure <code>time</code> representing 10:31:30 is provided for stop B, then the predicted departure time is <code>10:31:30</code>.This field is required if <code>schedule_relationship</code> is <code>DUPLICATED</code>, otherwise this field must not be populated and will be ignored by consumers. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   shape_id string Optional One Specifies the shape of the vehicle travel path for this trip when it differs from the original. Refers to a shape defined in the (CSV) GTFS or a new shape entity in a real-time feed. See definition of <code>trips.shape_id</code> in (CSV) GTFS. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"message TripProperties"},{"location":"realtime/reference/#message-vehicleposition","text":"<p>Realtime positioning information for a given vehicle.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     trip TripDescriptor Optional One The Trip that this vehicle is serving. Can be empty or partial if the vehicle can not be identified with a given trip instance.   vehicle VehicleDescriptor Optional One Additional information on the vehicle that is serving this trip. Each entry should have a unique vehicle id.   position Position Optional One Current position of this vehicle.   current_stop_sequence uint32 Optional One The stop sequence index of the current stop. The meaning of current_stop_sequence (i.e., the stop that it refers to) is determined by current_status. If current_status is missing IN_TRANSIT_TO is assumed.   stop_id string Optional One Identifies the current stop. The value must be the same as in stops.txt in the corresponding GTFS feed. If <code>StopTimeProperties.assigned_stop_id</code> is used to assign a <code>stop_id</code>, this field should also reflect the change in <code>stop_id</code>.   current_status VehicleStopStatus Optional One The exact status of the vehicle with respect to the current stop. Ignored if current_stop_sequence is missing.   timestamp uint64 Optional One Moment at which the vehicle's position was measured. In POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC).   congestion_level CongestionLevel Optional One    occupancy_status OccupancyStatus Optional One The state of passenger occupancy for the vehicle or carriage. If multi_carriage_details is populated with per-carriage OccupancyStatus, then this field should describe the entire vehicle with all carriages accepting passengers considered.Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   occupancy_percentage uint32 Optional One A percentage value indicating the degree of passenger occupancy in the vehicle. The value 100 should represent the total maximum occupancy the vehicle was designed for, including both seating and standing capacity, and current operating regulations allow. The value may exceed 100 if there are more passengers than the maximum designed capacity. The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle. If multi_carriage_details is populated with per-carriage occupancy_percentage, then this field should describe the entire vehicle with all carriages accepting passengers considered.Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   multi_carriage_details CarriageDetails Optional Many Details of the multiple carriages of this given vehicle. The first occurrence represents the first carriage of the vehicle, given the current direction of travel. The number of occurrences of the multi_carriage_details field represents the number of carriages of the vehicle. It also includes non boardable carriages, like engines, maintenance carriages, etc\u2026 as they provide valuable information to passengers about where to stand on a platform.Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"message VehiclePosition"},{"location":"realtime/reference/#enum-vehiclestopstatus","text":"<p>Values</p>    Value Comment     INCOMING_AT The vehicle is just about to arrive at the stop (on a stop display, the vehicle symbol typically flashes).   STOPPED_AT The vehicle is standing at the stop.   IN_TRANSIT_TO The vehicle has departed the previous stop and is in transit.","title":"enum VehicleStopStatus"},{"location":"realtime/reference/#enum-congestionlevel","text":"<p>Congestion level that is affecting this vehicle.</p> <p>Values</p>    Value     UNKNOWN_CONGESTION_LEVEL   RUNNING_SMOOTHLY   STOP_AND_GO   CONGESTION   SEVERE_CONGESTION","title":"enum CongestionLevel"},{"location":"realtime/reference/#enum-occupancystatus","text":"<p>The state of passenger occupancy for the vehicle or carriage.</p> <p>Individual producers may not publish all OccupancyStatus values. Therefore, consumers must not assume that the OccupancyStatus values follow a linear scale. Consumers should represent OccupancyStatus values as the state indicated and intended by the producer. Likewise, producers must use OccupancyStatus values that correspond to actual vehicle occupancy states.</p> <p>For describing passenger occupancy levels on a linear scale, see <code>occupancy_percentage</code>.</p> <p>Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.</p> <p>Values</p>    Value Comment     EMPTY The vehicle is considered empty by most measures, and has few or no passengers onboard, but is still accepting passengers.   MANY_SEATS_AVAILABLE The vehicle or carriage has a large number of seats available. The amount of free seats out of the total seats available to be considered large enough to fall into this category is determined at the discretion of the producer.   FEW_SEATS_AVAILABLE The vehicle or carriage has a small number of seats available. The amount of free seats out of the total seats available to be considered small enough to fall into this category is determined at the discretion of the producer.   STANDING_ROOM_ONLY The vehicle or carriage can currently accommodate only standing passengers.   CRUSHED_STANDING_ROOM_ONLY The vehicle or carriage can currently accommodate only standing passengers and has limited space for them.   FULL The vehicle is considered full by most measures, but may still be allowing passengers to board.   NOT_ACCEPTING_PASSENGERS The vehicle or carriage is not accepting passengers. The vehicle or carriage usually accepts passengers for boarding.   NO_DATA_AVAILABLE The vehicle or carriage doesn't have any occupancy data available at that time.   NOT_BOARDABLE The vehicle or carriage is not boardable and never accepts passengers. Useful for special vehicles or carriages (engine, maintenance carriage, etc\u2026).","title":"enum OccupancyStatus"},{"location":"realtime/reference/#message-carriagedetails","text":"<p>Carriage specific details, used for vehicles composed of several carriages.</p> <p>Caution: this message is still experimental, and subject to change. It may be formally adopted in the future.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     id string Optional One Identification of the carriage. Should be unique per vehicle. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   label string Optional One User visible label that may be shown to the passenger to help identify the carriage. Example: \"7712\", \"Car ABC-32\", etc... Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   occupancy_status OccupancyStatus Optional One Occupancy status for this given carriage, in this vehicle. Default is set to <code>NO_DATA_AVAILABLE</code>.Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   occupancy_percentage int32 Optional One Occupancy percentage for this given carriage, in this vehicle. Follows the same rules as \"VehiclePosition.occupancy_percentage\". Use -1 in case data is not available for this given carriage.Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   carriage_sequence uint32 Required One Identifies the order of this carriage with respect to the other carriages in the vehicle's list of CarriageStatus. The first carriage in the direction of travel must have a value of 1. The second value corresponds to the second carriage in the direction of travel and must have a value of 2, and so forth. For example, the first carriage in the direction of travel has a value of 1. If the second carriage in the direction of travel has a value of 3, consumers will discard data for all carriages (i.e., the multi_carriage_details field). Carriages without data must be represented with a valid carriage_sequence number and the fields without data should be omitted (alternately, those fields could also be included and set to the \"no data\" values). Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"message CarriageDetails"},{"location":"realtime/reference/#message-alert","text":"<p>An alert, indicating some sort of incident in the public transit network.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     active_period TimeRange Optional Many Time when the alert should be shown to the user. If missing, the alert will be shown as long as it appears in the feed. If multiple ranges are given, the alert will be shown during all of them.   informed_entity EntitySelector Required Many Entities whose users we should notify of this alert.  At least one informed_entity must be provided.   cause Cause Optional One    effect Effect Optional One    url TranslatedString Optional One The URL which provides additional information about the alert.   header_text TranslatedString Required One Header for the alert. This plain-text string will be highlighted, for example in boldface.   description_text TranslatedString Required One Description for the alert. This plain-text string will be formatted as the body of the alert (or shown on an explicit \"expand\" request by the user). The information in the description should add to the information of the header.   tts_header_text TranslatedString Optional One Text containing the alert's header to be used for text-to-speech implementations. This field is the text-to-speech version of header_text. It should contain the same information as header_text but formatted such that it can read as text-to-speech (for example, abbreviations removed, numbers spelled out, etc.)   tts_description_text TranslatedString Optional One Text containing a description for the alert to be used for text-to-speech implementations. This field is the text-to-speech version of description_text. It should contain the same information as description_text but formatted such that it can be read as text-to-speech (for example, abbreviations removed, numbers spelled out, etc.)   severity_level SeverityLevel Optional One Severity of the alert.   image TranslatedImage Optional One TranslatedImage to be displayed along the alert text. Used to explain visually the alert effect of a detour, station closure, etc. The image should enhance the understanding of the alert and must not be the only location of essential information. The following types of images are discouraged : image containing mainly text, marketing or branded images that add no additional information. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   image_alternative_text TranslatedString Optional One Text describing the appearance of the linked image in the <code>image</code> field (e.g., in case the image can't be displayed or the user can't see the image for accessibility reasons). See the HTML spec for alt image text. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"message Alert"},{"location":"realtime/reference/#enum-cause","text":"<p>Cause of this alert.</p> <p>Values</p>    Value     UNKNOWN_CAUSE   OTHER_CAUSE   TECHNICAL_PROBLEM   STRIKE   DEMONSTRATION   ACCIDENT   HOLIDAY   WEATHER   MAINTENANCE   CONSTRUCTION   POLICE_ACTIVITY   MEDICAL_EMERGENCY","title":"enum Cause"},{"location":"realtime/reference/#enum-effect","text":"<p>The effect of this problem on the affected entity.</p> <p>Values</p>    Value     NO_SERVICE   REDUCED_SERVICE   SIGNIFICANT_DELAYS   DETOUR   ADDITIONAL_SERVICE   MODIFIED_SERVICE   OTHER_EFFECT   UNKNOWN_EFFECT   STOP_MOVED   NO_EFFECT   ACCESSIBILITY_ISSUE","title":"enum Effect"},{"location":"realtime/reference/#enum-severitylevel","text":"<p>The severity of the alert.</p> <p>Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.</p> <p>Values</p>    Value     UNKNOWN_SEVERITY   INFO   WARNING   SEVERE","title":"enum SeverityLevel"},{"location":"realtime/reference/#message-timerange","text":"<p>A time interval. The interval is considered active at time <code>t</code> if <code>t</code> is greater than or equal to the start time and less than the end time.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     start uint64 Conditionally required One Start time, in POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC). If missing, the interval starts at minus infinity.  If a TimeRange is provided, either start or end must be provided - both fields cannot be empty.   end uint64 Conditionally required One End time, in POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC). If missing, the interval ends at plus infinity. If a TimeRange is provided, either start or end must be provided - both fields cannot be empty.","title":"message TimeRange"},{"location":"realtime/reference/#message-position","text":"<p>A geographic position of a vehicle.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     latitude float Required One Degrees North, in the WGS-84 coordinate system.   longitude float Required One Degrees East, in the WGS-84 coordinate system.   bearing float Optional One Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. This should not be deduced from the sequence of previous positions, which clients can compute from previous data.   odometer double Optional One Odometer value, in meters.   speed float Optional One Momentary speed measured by the vehicle, in meters per second.","title":"message Position"},{"location":"realtime/reference/#message-tripdescriptor","text":"<p>A descriptor that identifies a single instance of a GTFS trip.</p> <p>To specify a single trip instance, in many cases a <code>trip_id</code> by itself is sufficient. However, the following cases require additional information to resolve to a single trip instance: * For trips defined in frequencies.txt, <code>start_date</code> and <code>start_time</code> are required in addition to <code>trip_id</code> * If the trip lasts for more than 24 hours, or is delayed such that it would collide with a scheduled trip on the following day, then <code>start_date</code> is required in addition to <code>trip_id</code> * If the <code>trip_id</code> field can't be provided, then <code>route_id</code>, <code>direction_id</code>, <code>start_date</code>, and <code>start_time</code> must all be provided</p> <p>In all cases, if <code>route_id</code> is provided in addition to <code>trip_id</code>, then the <code>route_id</code> must be the same <code>route_id</code> as assigned to the given trip in GTFS trips.txt.</p> <p>The <code>trip_id</code> field cannot, by itself or in combination with other TripDescriptor fields, be used to identify multiple trip instances. For example, a TripDescriptor should never specify trip_id by itself for GTFS frequencies.txt exact_times=0 trips because start_time is also required to resolve to a single trip instance starting at a specific time of the day. If the TripDescriptor does not resolve to a single trip instance (i.e., it resolves to zero or multiple trip instances), it is considered an error and the entity containing the erroneous TripDescriptor may be discarded by consumers.</p> <p>Note that if the trip_id is not known, then station sequence ids in TripUpdate are not sufficient, and stop_ids must be provided as well. In addition, absolute arrival/departure times must be provided.</p> <p>TripDescriptor.route_id cannot be used within an Alert EntitySelector to specify a route-wide alert that affects all trips for a route - use EntitySelector.route_id instead.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     trip_id string Conditionally required One The trip_id from the GTFS feed that this selector refers to. For non frequency-based trips (trips not defined in GTFS frequencies.txt), this field is enough to uniquely identify the trip. For frequency-based trips defined in GTFS frequencies.txt, trip_id, start_time, and start_date are all required. For scheduled-based trips (trips not defined in GTFS frequencies.txt), trip_id can only be omitted if the trip can be uniquely identified by a combination of route_id, direction_id, start_time, and start_date, and all those fields are provided. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.   route_id string Conditionally required One The route_id from the GTFS that this selector refers to. If trip_id is omitted, route_id, direction_id, start_time, and schedule_relationship=SCHEDULED must all be set to identify a trip instance. TripDescriptor.route_id should not be used within an Alert EntitySelector to specify a route-wide alert that affects all trips for a route - use EntitySelector.route_id instead.   direction_id uint32 Conditionally required One The direction_id from the GTFS feed trips.txt file, indicating the direction of travel for trips this selector refers to. If trip_id is omitted, direction_id must be provided. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   start_time string Conditionally required One The initially scheduled start time of this trip instance. When the trip_id corresponds to a non-frequency-based trip, this field should either be omitted or be equal to the value in the GTFS feed. When the trip_id correponds to a frequency-based trip defined in GTFS frequencies.txt, start_time is required and must be specified for trip updates and vehicle positions. If the trip corresponds to exact_times=1 GTFS record, then start_time must be some multiple (including zero) of headway_secs later than frequencies.txt start_time for the corresponding time period. If the trip corresponds to exact_times=0, then its start_time may be arbitrary, and is initially expected to be the first departure of the trip. Once established, the start_time of this frequency-based exact_times=0 trip should be considered immutable, even if the first departure time changes -- that time change may instead be reflected in a StopTimeUpdate. If trip_id is omitted, start_time must be provided. Format and semantics of the field is same as that of GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.   start_date string Conditionally required One The start date of this trip instance in YYYYMMDD format. For scheduled trips (trips not defined in GTFS frequencies.txt), this field must be provided to disambiguate trips that are so late as to collide with a scheduled trip on a next day. For example, for a train that departs 8:00 and 20:00 every day, and is 12 hours late, there would be two distinct trips on the same time. This field can be provided but is not mandatory for schedules in which such collisions are impossible - for example, a service running on hourly schedule where a vehicle that is one hour late is not considered to be related to schedule anymore. This field is required for frequency-based trips defined in GTFS frequencies.txt. If trip_id is omitted, start_date must be provided.   schedule_relationship ScheduleRelationship Optional One The relation between this trip and the static schedule. If TripDescriptor is provided in an Alert <code>EntitySelector</code>, the <code>schedule_relationship</code> field is ignored by consumers when identifying the matching trip instance.","title":"message TripDescriptor"},{"location":"realtime/reference/#enum-schedulerelationship_1","text":"<p>The relation between this trip and the static schedule. If a trip is done in accordance with temporary schedule, not reflected in GTFS, then it shouldn't be marked as SCHEDULED, but marked as ADDED.</p> <p>Values</p>    Value Comment     SCHEDULED Trip that is running in accordance with its GTFS schedule, or is close enough to the scheduled trip to be associated with it.   ADDED An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to respond to sudden passenger load. NOTE: Currently, behavior is unspecified for feeds that use this mode. There are discussions on the GTFS GitHub (1) (2) (3) around fully specifying or deprecating ADDED trips and the documentation will be updated when those discussions are finalized.   UNSCHEDULED A trip that is running with no schedule associated to it - this value is used to identify trips defined in GTFS frequencies.txt with exact_times = 0. It should not be used to describe trips not defined in GTFS frequencies.txt, or trips in GTFS frequencies.txt with exact_times = 1. Trips with <code>schedule_relationship: UNSCHEDULED</code> must also set all StopTimeUpdates <code>schedule_relationship: UNSCHEDULED</code>   CANCELED A trip that existed in the schedule but was removed.   DUPLICATED A new trip that is the same as an existing scheduled trip except for service start date and time. Used with <code>TripUpdate.TripProperties.trip_id</code>, <code>TripUpdate.TripProperties.start_date</code>, and <code>TripUpdate.TripProperties.start_time</code> to copy an existing trip from static GTFS but start at a different service date and/or time. Duplicating a trip is allowed if the service related to the original trip in (CSV) GTFS (in <code>calendar.txt</code> or <code>calendar_dates.txt</code>) is operating within the next 30 days. The trip to be duplicated is identified via <code>TripUpdate.TripDescriptor.trip_id</code>.  This enumeration does not modify the existing trip referenced by <code>TripUpdate.TripDescriptor.trip_id</code> - if a producer wants to cancel the original trip, it must publish a separate <code>TripUpdate</code> with the value of CANCELED. Trips defined in GTFS <code>frequencies.txt</code> with <code>exact_times</code> that is empty or equal to <code>0</code> cannot be duplicated. The <code>VehiclePosition.TripDescriptor.trip_id</code> for the new trip must contain the matching value from <code>TripUpdate.TripProperties.trip_id</code> and <code>VehiclePosition.TripDescriptor.ScheduleRelationship</code> must also be set to <code>DUPLICATED</code>.  Existing producers and consumers that were using the ADDED enumeration to represent duplicated trips must follow the migration guide to transition to the DUPLICATED enumeration.","title":"enum ScheduleRelationship"},{"location":"realtime/reference/#message-vehicledescriptor","text":"<p>Identification information for the vehicle performing the trip.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     id string Optional One Internal system identification of the vehicle. Should be unique per vehicle, and is used for tracking the vehicle as it proceeds through the system. This id should not be made visible to the end-user; for that purpose use the label field   label string Optional One User visible label, i.e., something that must be shown to the passenger to help identify the correct vehicle.   license_plate string Optional One The license plate of the vehicle.","title":"message VehicleDescriptor"},{"location":"realtime/reference/#message-entityselector","text":"<p>A selector for an entity in a GTFS feed. The values of the fields should correspond to the appropriate fields in the GTFS feed. At least one specifier must be given. If several are given, they should be interpreted as being joined by the logical <code>AND</code> operator.  Additionally, the combination of specifiers must match the corresponding information in the GTFS feed.  In other words, in order for an alert to apply to an entity in GTFS it must match all of the provided EntitySelector fields.  For example, an EntitySelector that includes the fields <code>route_id: \"5\"</code> and <code>route_type: \"3\"</code> applies only to the <code>route_id: \"5\"</code> bus - it does not apply to any other routes of <code>route_type: \"3\"</code>.  If a producer wants an alert to apply to <code>route_id: \"5\"</code> as well as <code>route_type: \"3\"</code>, it should provide two separate EntitySelectors, one referencing <code>route_id: \"5\"</code> and another referencing <code>route_type: \"3\"</code>.</p> <p>At least one specifier must be given - all fields in an EntitySelector cannot be empty.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     agency_id string Conditionally required One The agency_id from the GTFS feed that this selector refers to.   route_id string Conditionally required One The route_id from the GTFS that this selector refers to. If direction_id is provided, route_id must also be provided.   route_type int32 Conditionally required One The route_type from the GTFS that this selector refers to.   direction_id uint32 Conditionally required One The direction_id from the GTFS feed trips.txt file, used to select all trips in one direction for a route, specified by route_id. If direction_id is provided, route_id must also be provided. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   trip TripDescriptor Conditionally required One The trip instance from the GTFS that this selector refers to. This TripDescriptor must resolve to a single trip instance in the GTFS data (e.g., a producer cannot provide only a trip_id for exact_times=0 trips). If the ScheduleRelationship field is populated within this TripDescriptor it will be ignored by consumers when attempting to identify the GTFS trip.   stop_id string Conditionally required One The stop_id from the GTFS feed that this selector refers to.","title":"message EntitySelector"},{"location":"realtime/reference/#message-translatedstring","text":"<p>An internationalized message containing per-language versions of a snippet of text or a URL. One of the strings from a message will be picked up. The resolution proceeds as follows: If the UI language matches the language code of a translation, the first matching translation is picked. If a default UI language (e.g., English) matches the language code of a translation, the first matching translation is picked. If some translation has an unspecified language code, that translation is picked.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     translation Translation Required Many At least one translation must be provided.","title":"message TranslatedString"},{"location":"realtime/reference/#message-translation","text":"<p>A localized string mapped to a language.</p>    Field Name Type Required Cardinality Description     text string Required One A UTF-8 string containing the message.   language string Conditionally required One BCP-47 language code. Can be omitted if the language is unknown or if no internationalization is done at all for the feed. At most one translation is allowed to have an unspecified language tag - if there is more than one translation, the language must be provided.","title":"message Translation"},{"location":"realtime/reference/#message-translatedimage","text":"<p>An internationalized message containing per-language versions of an image. One of the images from a message will be picked up. The resolution proceeds as follows: If the UI language matches the language code of a translation, the first matching translation is picked. If a default UI language (e.g., English) matches the language code of a translation, the first matching translation is picked. If some translation has an unspecified language code, that translation is picked.</p> <p>Caution: this message is still experimental, and subject to change. It may be formally adopted in the future.</p> <p>Fields</p>    Field Name Type Required Cardinality Description     localized_image LocalizedImage Required Many At least one localized image must be provided.","title":"message TranslatedImage"},{"location":"realtime/reference/#message-localizedimage","text":"<p>A localized image URL mapped to a language.</p>    Field Name Type Required Cardinality Description     url string Required One String containing an URL linking to an image. The image linked must less than 2MB. If an image changes in a significant enough way that an update is required on the consumer side, the producer must update the URL to a new one. The URL should be a fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the following\u00a0https://www.w3.org/Addressing/URL/4_URI_Recommentations.html\u00a0for a description of how to create fully qualified URL values.   media_type string Required One IANA media type as to specify the type of image to be displayed. The type must start with \"image/\"   language string Conditionally required One BCP-47 language code. Can be omitted if the language is unknown or if no internationalization is done at all for the feed. At most one translation is allowed to have an unspecified language tag - if there is more than one translation, the language must be provided.","title":"message LocalizedImage"},{"location":"realtime/reference/#message-shape","text":"<p>Describes the physical path that a vehicle takes when the shape is not part of the (CSV) GTFS, such as for an ad-hoc detour. Shapes belong to Trips and consist of an encoded polyline for more efficient transmission.  Shapes do not need to intercept the location of Stops exactly, but all Stops on a trip should lie within a small distance of the shape for that trip, i.e. close to straight line segments connecting the shape points</p> <p>Caution: this message is still experimental, and subject to change. It may be formally adopted in the future..</p> <p>Fields</p>    Field Name Type Required Cardinality Description     shape_id string Required One Identifier of the shape. Must be different than any <code>shape_id</code> defined in the (CSV) GTFS. Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.   encoded_polyline string Required One Encoded polyline representation of the shape. This polyline must contain at least two points. For more information about encoded polylines, see https://developers.google.com/maps/documentation/utilities/polylinealgorithm Caution: this field is still experimental, and subject to change. It may be formally adopted in the future.","title":"message Shape"},{"location":"realtime/revision-history/","text":"<p>March 12, 2020</p> <ul> <li>Updated the <code>TripDescriptor</code> description on the GTFS Realtime reference page.</li> </ul> <p>February 26, 2015</p> <ul> <li>Added experimental field <code>direction_id</code> to <code>TripDescriptor</code> (discussion).</li> </ul> <p>January 30, 2015</p> <ul> <li>Added Protocol Buffer extension namespace to all remaining GTFS-realtime messages that didn't already have one (such as <code>FeedMessage</code> and <code>FeedEntity</code>).</li> </ul> <p>January 28, 2015</p> <ul> <li>Added experimental field <code>delay</code> to <code>TripUpdate</code> (discussion).</li> </ul> <p>January 16, 2015</p> <ul> <li>Update description of <code>TripDescriptor.start_time</code>.</li> </ul> <p>January 8, 2015</p> <ul> <li>Defined experimental enum <code>OccupancyStatus</code>.</li> <li>Added experimental field <code>occupancy_status</code> to <code>VehiclePosition</code> (discussion).</li> </ul> <p>May 22, 2014</p> <ul> <li>Updated description of <code>ScheduleRelationship</code> enum in <code>StopTimeUpdate</code> message (discussion).</li> <li>Removed REPLACEMENT from <code>ScheduleRelationship</code> enum values in <code>TripDescriptor</code> message (discussion).</li> </ul> <p>Oct 12, 2012</p> <ul> <li>Added timestamp field to <code>TripUpdate</code> message.</li> </ul> <p>May 30, 2012</p> <ul> <li>Added specific details about Extensions to the specification.</li> </ul> <p>November 30, 2011</p> <ul> <li>Added Protocol Buffer extension namespace to key GTFS-realtime messages to facilitate writing extensions to the spec.</li> </ul> <p>October 25, 2011</p> <ul> <li>Updated documentation to clarify that <code>alert</code>, <code>header_text</code> and <code>description_text</code> are both plain-text values.</li> </ul> <p>August 20, 2011</p> <ul> <li>Updated documentation to clarify semantics of the <code>TimeRange</code> message.</li> </ul> <p>August 22, 2011</p> <ul> <li>Initial version.</li> </ul>","title":"Revision History"},{"location":"realtime/changes/","text":"<p>The GTFS Realtime Specification is not set in stone. Instead, it is an open specification developed and maintained by the community of transit agencies, developers, and other stakeholders who use GTFS Realtime. It is expected that this community of producers and consumers of GTFS Realtime data will have proposals for extending the spec to enable new capabilities. To help manage that process, the following procedures and guidelines have been established.</p> <p>The official specification, reference and documentation are written in English. If a translation to a different language differs from the English original, the latter takes precedence. All communication is performed in English.</p> <p> Specification Amendment ProcessGuiding PrinciplesRevision HistoryRealtime Extensions </p>","title":"GTFS Realtime Changes"},{"location":"realtime/examples/","text":"Feed ExamplesCode Examples","title":"GTFS Realtime Examples"},{"location":"realtime/feed-entities/","text":"<p>GTFS Realtime supports three distinct types of realtime data, that can be combined witin a single realtime feed. Summaries are given below, with full documentation given in the relevant section.</p>","title":"Feed Entities"},{"location":"realtime/feed-entities/#trip-updates","text":"","title":"Trip Updates"},{"location":"realtime/feed-entities/#bus-x-is-delayed-by-5-minutes","text":"<p>Trip updates represent fluctuations in the timetable. We would expect to receive trip updates for all trips you have scheduled that are realtime-capable. These updates would give a predicted arrival or departure for stops along the route. Trip updates can also provide for more complex scenarios where trips are canceled, added to the schedule, or even re-routed.</p> <p>More about Trip Updates...</p>","title":"\"Bus X is delayed by 5 minutes\""},{"location":"realtime/feed-entities/#service-alerts","text":"","title":"Service Alerts"},{"location":"realtime/feed-entities/#station-y-is-closed-due-to-construction","text":"<p>Service alerts represent higher level problems with a particular entity and are generally in the form of a textual description of the disruption.</p> <p>They could represent problems with:</p> <ul> <li>Stations</li> <li>Lines</li> <li>The whole network</li> <li>etc.</li> </ul> <p>A service alert will usually consist of some text which will describe the problem, and we also allow for URLs for more information as well as more structured information to help us understand who this service alert affects.</p> <p>More about Service Alerts...</p>","title":"\"Station Y is closed due to construction\""},{"location":"realtime/feed-entities/#vehicle-positions","text":"","title":"Vehicle Positions"},{"location":"realtime/feed-entities/#this-bus-is-at-position-x-at-time-y","text":"<p>Vehicle position represents a few basic pieces of information about a particular vehicle on the network.</p> <p>Most important are the latitude and longitude the vehicle is at, but we can also use data on current speed and odometer readings from the vehicle.</p> <p>More about Vehicle Position updates...</p>","title":"\"This bus is at position X at time Y\""},{"location":"realtime/feed-entities/#historical-remark-on-feed-types","text":"<p>Early versions of GTFS Realtime Specification required each feed to only contain single type of entities. An example tool to convert from merged to the feed-per-type schema is located in the Bliksem Labs gtfsrt-examples GitHub repository.</p>","title":"Historical remark on feed types"},{"location":"realtime/feed-entities/service-alerts/","text":"<p>Service alerts allow you to provide updates whenever there is disruption on the network. Delays and cancellations of individual trips should usually be communicated using Trip updates.</p> <p>You have the option to provide the following:</p> <ul> <li>URL - link to your site explaining more about the alert</li> <li>Header text - a summary of the alert</li> <li>Description - a full description of the alert, which will always be shown alongside the header (so should not repeat this information).</li> </ul>","title":"Service Alerts"},{"location":"realtime/feed-entities/service-alerts/#timerange","text":"<p>The alert will be displayed where appropriate within the given time range. This range should cover the entire time that the alert is useful for the passenger to see.</p> <p>If no time is given, we will display the alert for as long as it is in the feed. If multiple ranges are given, we will display during all of them.</p>","title":"TimeRange"},{"location":"realtime/feed-entities/service-alerts/#entityselector","text":"<p>Entity selector allows you specify exactly which parts of the network this alert affects, so that we can display only the most appropriate alerts to the user. You may include multiple entity selectors for alerts which affect multiple entities.</p> <p>Entities are selected using their GTFS identifiers, and you can select any of the following:</p> <ul> <li>Agency - affects the whole network</li> <li>Route - affects the whole route</li> <li>Route type - affects any route of this type. e.g. all subways.</li> <li>Trip - affects a particular trip</li> <li>Stop - affects a particular stop</li> </ul> <p>You may include more than one of the fields listed above in one <code>informed_entity</code>. When multiple fields are included in one <code>informed_entity</code>, they should be interpreted as being joined by the <code>AND</code> logical operator. In other words, the alert should only be applied in a context that meets all of the fields provided in an <code>informed_entity</code>. For example, if <code>route_id: \"1\"</code> and <code>stop_id: \"5\"</code> are both included in one <code>informed_entity</code>, then the alert should apply only to route 1 at stop 5.  It should NOT be applied to any other stop on route 1, and it should NOT be applied to any other route at stop 5.</p> <p>If you would like to represent an alert that affects more than one entity (e.g. an alert for both route 1 and stop 5) , you should add multiple <code>informed_entity</code> to your <code>alert</code>, with each of them applying to the affected entity (e.g. one <code>informed_entity</code> that includes route 1 and another <code>informed_entity</code> that includes stop 5).</p>","title":"EntitySelector"},{"location":"realtime/feed-entities/service-alerts/#cause","text":"<p>What is the cause of this alert? You may specify one of the following:</p> <ul> <li>Unknown cause</li> <li>Other cause (not represented by any of these options)</li> <li>Technical problem</li> <li>Strike</li> <li>Demonstration</li> <li>Accident</li> <li>Holiday</li> <li>Weather</li> <li>Maintenance</li> <li>Construction</li> <li>Police activity</li> <li>Medical emergency</li> </ul>","title":"Cause"},{"location":"realtime/feed-entities/service-alerts/#effect","text":"<p>What effect does this problem have on the specified entity? You may specify one of the following:</p> <ul> <li>No service</li> <li>Reduced service</li> <li>Significant delays (insignificant delays should only be provided through Trip updates).</li> <li>Detour</li> <li>Additional service</li> <li>Modified service: Operations are different from what the rider would normally expect.  An example is an alert that reminds riders of an upcoming holiday schedule that is different from normal service on that day of the week.</li> <li>Stop moved</li> <li>Other effect (not represented by any of these options)</li> <li>Unknown effect</li> <li>No effect: The alert provides information to riders but does not affect operations.  Examples include advertising public meetings and soliciting feedback via surveys.</li> <li>Accessibility issue: The alert provides information about accessibility issues that affects step-free access. Examples include an out of service elevator or movable ramps.</li> </ul>","title":"Effect"},{"location":"realtime/feed-entities/trip-updates/","text":"<p>Trip updates represent fluctuations in the timetable. We would expect to receive trip updates for all trips you have scheduled that are realtime-capable. These updates would give a predicted arrival or departure time for stops along the route. Trip updates can also provide for more complex scenarios where trips are canceled or added to the schedule, or even re-routed.</p> <p>Reminder: In GTFS, a trip is a sequence of two of more stops occurring at a specific time.</p> <p>There should be at most one trip update for each scheduled trip. In case there is no trip update for a scheduled trip, it will be concluded that no realtime data is available for the trip. The data consumer should not assume that the trip is running on time.</p> <p>If a vehicle is serving multiple trips within the same block (for more information about trips and blocks, please refer to GTFS trips.txt): * the feed should include a TripUpdate for the trip currently being served by the vehicle. Producers are encouraged to include TripUpdates for one or more trips after the current trip in this vehicle's block if the producer is confident in the quality of the predictions for these future trip(s). Including multiple TripUpdates for the same vehicle avoids prediction \"pop-in\" for riders as the vehicle transitions from one trip to another and also gives riders advance notice of delays that impact downstream trips (e.g., when the known delay exceeds planned layover times between trips). * the respective TripUpdate entities are not required to be added to the feed in the same order that they are scheduled in the block. For example, if there are trips with <code>trip_ids</code> 1, 2, and 3 that all belong to one block, and the vehicle travels trip 1, then trip 2, and then trip 3, the <code>trip_update</code> entities may appear in any order - for example, adding trip 2, then trip 1, and then trip 3 is allowed.</p>","title":"Trip Updates"},{"location":"realtime/feed-entities/trip-updates/#stoptimeupdate","text":"<p>A trip update consists of one or more updates to vehicle stop times, which are referred to as StopTimeUpdates. These can be supplied for past and future stop times. You are allowed, but not required, to drop past stop times.  Producers should not drop a past <code>StopTimeUpdate</code> if it refers to a stop with a scheduled arrival time in the future for the given trip (i.e. the vehicle has passed the stop ahead of schedule), as otherwise it will be concluded that there is no update for this stop.</p> <p>For example, if the following data appears in the GTFS-rt feed:</p> <ul> <li>Stop 4 \u2013 Predicted at 10:18am (scheduled at 10:20am \u2013 2 min early)</li> <li>Stop 5 \u2013 Predicted at 10:30am (scheduled at 10:30am \u2013 on time)</li> </ul> <p>...the prediction for Stop 4 cannot be dropped from the feed until 10:21am, even if the bus actually passes the stop at 10:18am. If the <code>StopTimeUpdate</code> for Stop 4 was dropped from the feed at 10:18am or 10:19am, and the scheduled arrival time is 10:20am, then the consumer should assume that no real-time information exists for Stop 4 at that time, and schedule data from GTFS should be used.</p> <p>Each StopTimeUpdate is linked to a stop. Ordinarily this can be done using either a GTFS stop_sequence or a GTFS stop_id. However, in the case you are providing an update for a trip without a GTFS trip_id, you must specify stop_id as stop_sequence has no value. The stop_id must still reference a stop_id in GTFS. If the same stop_id is visited more than once in a trip, then stop_sequence should be provided in all StopTimeUpdates for that stop_id on that trip.</p> <p>The update can provide a exact timing for arrival and/or departure at a stop in StopTimeUpdates using StopTimeEvent. This should contain either an absolute time or a delay (i.e. an offset from the scheduled time in seconds). Delay can only be used in case the trip update refers to a scheduled GTFS trip, as opposed to a frequency-based trip. In this case, time should be equal to scheduled time + delay. You may also specify uncertainty of the prediction along with StopTimeEvent, which is discussed in more detail in section Uncertainty further down the page.</p> <p>For each StopTimeUpdate, the default schedule relationship is scheduled. (Note that this is different from the schedule relationship for the trip). You may change this to skipped if the stop will not be stopped at, or no data if you only have realtime data for some of the trip.</p> <p>Updates should be sorted by stop_sequence (or stop_ids in the order they occur in the trip).</p> <p>If one or more stops are missing along the trip the <code>delay</code> from the update (or, if only <code>time</code> is provided in the update, a delay computed by comparing the <code>time</code> against the GTFS schedule time) is propagated to all subsequent stops. This means that updating a stop time for a certain stop will change all subsequent stops in the absence of any other information. Note that updates with a schedule relationship of <code>SKIPPED</code> will not stop delay propagation, but updates with schedule relationships of <code>SCHEDULED</code> (also the default value if schedule relationship is not provided) or <code>NO_DATA</code> will.</p> <p>Example 1</p> <p>For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure delay of 0 (StopTimeEvents) for stop_sequence of the current stop means that the trip is exactly on time.</p> <p>Example 2</p> <p>For the same trip instance, three StopTimeUpdates are provided:</p> <ul> <li>delay of 300 seconds for stop_sequence 3</li> <li>delay of 60 seconds for stop_sequence 8</li> <li>ScheduleRelationship of <code>NO_DATA</code> for stop_sequence 10</li> </ul> <p>This will be interpreted as:</p> <ul> <li>stop_sequences 1,2 have unknown delay.</li> <li>stop_sequences 3,4,5,6,7 have delay of 300 seconds.</li> <li>stop_sequences 8,9 have delay of 60 seconds.</li> <li>stop_sequences 10,..,20 have unknown delay.</li> </ul>","title":"StopTimeUpdate"},{"location":"realtime/feed-entities/trip-updates/#tripdescriptor","text":"<p>The information provided by the TripDescriptor depends on the schedule relationship of trip you are updating. There are a number of options for you to set:</p>    Value Comment     Scheduled This trip is running according to a GTFS schedule, or is close enough to still be associated with it.   Added This trip was not scheduled and has been added. For example, to cope with demand, or replace a broken down vehicle.   Unscheduled This trip is running and is never associated with a schedule. For example, if there is no schedule and the buses run on a shuttle service.   Canceled This trip was scheduled, but is now removed.   Duplicated This new trip is a copy of an existing trip in static GTFS except for the service start date and time. The new trip will run at the service date and time specified in TripProperties.    <p>In most cases, you should provide the trip_id of the scheduled trip in GTFS that this update relates to.</p>","title":"TripDescriptor"},{"location":"realtime/feed-entities/trip-updates/#systems-with-repeated-trip_ids","text":"<p>For systems using repeated trip_ids, for example trips modeled using frequencies.txt, that is frequency-based trips, the trip_id is not in itself a unique identifier of a single journey, as it lacks a specific time component. In order to uniquely identify such trips within a TripDescriptor, a triple of identifiers must be provided:</p> <ul> <li>trip_id</li> <li>start_time</li> <li>start_date</li> </ul> <p>start_time should be first published, and any subsequent feed updates should use that same start_time when referring to the same journey. StopTimeUpdates should be used to indicate adjustments; start_time does not have to be precisely the departure time from the first station, although it should be pretty close to that time.</p> <p>For example, let\u2019s say we decide at 10:00, May, 25th 2015, that a trip with trip_id=T will start at start_time=10:10:00, and provide this information via realtime feed at 10:01. By 10:05 we suddenly know that the trip will start not at 10:10 but at 10:13. In our new realtime feed we can still identify this trip as (T, 2015-05-25, 10:10:00) but provide a StopTimeUpdate with departure from first stop at 10:13:00.</p>","title":"Systems with repeated trip_ids"},{"location":"realtime/feed-entities/trip-updates/#alternative-trip-matching","text":"<p>Trips which are not frequency based may also be uniquely identified by a TripDescriptor including the combination of:</p> <ul> <li>route_id</li> <li>direction_id</li> <li>start_time</li> <li>start_date</li> </ul> <p>where start_time is the scheduled start time as defined in the static schedule, as long as the combination of ids provided resolves to a unique trip.</p>","title":"Alternative trip matching"},{"location":"realtime/feed-entities/trip-updates/#uncertainty","text":"<p>Uncertainty applies to both the time and the delay value of a StopTimeUpdate. The uncertainty roughly specifies the expected error in true delay as an integer in seconds (but note, the precise statistical meaning is not defined yet). It's possible for the uncertainty to be 0, for example for trains that are driven under computer timing control.</p> <p>As an example a long-distance bus that has an estimated delay of 15 minutes arriving to its next stop within a 4 minute window of error (that is +2 / -2 minutes) will have an Uncertainty value of 240.</p>","title":"Uncertainty"},{"location":"realtime/feed-entities/vehicle-positions/","text":"<p>Vehicle position is used to provide automatically generated information on the location of a vehicle, such as from a GPS device on board. A single vehicle position should be provided for every vehicle that is capable of providing it.</p> <p>The trip that the vehicle is currently serving should be given through a TripDescriptor. You can also provide a VehicleDescriptor, which specifies a precise physical vehicle that you are providing updates about. Documentation is provided below.</p> <p>A timestamp denoting the time when the position reading was taken can be provided. Note that this is different from the timestamp in the feed header, which is the time that this message was generated by the server.</p> <p>Current passage can also be provided (either as a <code>stop_sequence</code> or <code>stop_id</code>). This is a reference to the stop that the vehicle is either on its way to, or already stopped at.</p>","title":"Vehicle Positions"},{"location":"realtime/feed-entities/vehicle-positions/#position","text":"<p>Position contains the location data within Vehicle Position. Latitude and longitude are required, the other fields are optional. These types of data are:</p> <ul> <li>Latitude - degrees North, in the WGS-84 coordinate system</li> <li>Longitude - degrees East, in the WGS-84 coordinate system</li> <li>Bearing - direction that the vehicle is facing</li> <li>Odometer - the distance that the vehicle has travelled</li> <li>Speed - momentary speed measured by the vehicle, in meters per second</li> </ul>","title":"Position"},{"location":"realtime/feed-entities/vehicle-positions/#congestionlevel","text":"<p>Vehicle position also allows the agency to specify the congestion level that the vehicle is currently experiencing. Congestion can be classed under the following categories:</p> <ul> <li>Unknown congestion level</li> <li>Running smoothly</li> <li>Stop and go</li> <li>Congestion</li> <li>Severe congestion</li> </ul> <p>It is up to the agency to classify what you class as each type of congestion. Our guidance is that severe congestion is only used in situations where the traffic is so congested that people are leaving their cars.</p>","title":"CongestionLevel"},{"location":"realtime/feed-entities/vehicle-positions/#occupancystatus","text":"<p>Vehicle position also allows the agency to specify the degree of passenger occupancy for the vehicle. Occupancy status can be classed under the following categories:</p> <ul> <li>Empty</li> <li>Many seats available</li> <li>Few seats available</li> <li>Standing room only</li> <li>Crushed standing room only</li> <li>Full</li> <li>Not accepting passengers</li> </ul> <p>This field is still experimental, and subject to change. It may be formally adopted in the future.</p>","title":"OccupancyStatus"},{"location":"realtime/feed-entities/vehicle-positions/#vehiclestopstatus","text":"<p>Vehicle stop status gives more meaning to the status of a vehicle in relation with a stop that it is currently approaching or is at. It can be set to any of these values.</p> <ul> <li>Incoming at - the vehicle is about to arrive at the referenced stop</li> <li>Stopped at - the vehicle is stopped at the referenced stop</li> <li>In transit to - the referenced stop is the next stop for the vehicle - default</li> </ul>","title":"VehicleStopStatus"},{"location":"realtime/feed-entities/vehicle-positions/#vehicledescriptor","text":"<p>VehicleDescriptor describes a precise physical vehicle and can contain any of the following attributes:</p> <ul> <li>ID\u00a0- internal system of identification for the vehicle. Should be unique to the vehicle</li> <li>Label\u00a0- a user visible label - for example the name of a train</li> <li>License plate - the actual license plate of the vehicle</li> </ul>","title":"VehicleDescriptor"},{"location":"realtime/feed-examples/","text":"<p>The following examples show a textual representation of feeds. During development it is more convenient to produce ASCII protocol buffer output for easier debugging. You can compare your text output with these examples to check for the validity of data.</p>  Trip UpdatesService Alerts","title":"Feed Examples"},{"location":"realtime/feed-examples/service-alerts/","text":"<p>The following example is an ASCII representation of an Alert feed.</p> <pre><code># header information\nheader {\n  # version of speed specification. Currently \"2.0\". Valid versions are \"2.0\", \"1.0\".\n  gtfs_realtime_version: \"2.0\"\n\n  # determines whether dataset is incremental or full\n  incrementality: FULL_DATASET\n\n  # the time where this dataset was generated on server\n  # for determining the sequence of alert feeds\n  timestamp: 1284457468\n}\n# multiple entities can be included in the feed\nentity {\n  # unique identifier for the entity\n  id: \"0\"\n\n  # \"type\" of the entity\n  alert {\n    # multiple periods can be defined when alert is active\n    active_period {\n      # start time in POSIX epoch format\n      start: 1284457468\n      # end time in POSIX epoch format\n      end: 1284468072\n    }\n    # selects which GTFS entities will be affected\n    informed_entity {\n      # valid parameters: \n      # agency_id, route_id, route_type, stop_id, trip (see TripDescriptor)\n      route_id: \"219\"\n    }\n    # multiple selectors (informed_entity) can be included in one alert entity\n    informed_entity {\n      stop_id: \"16230\"\n    }\n    # multiple fields can be included in one informed_entity\n    informed_entity {\n      stop_id: \"16299\"\n      route_id: \"100\"\n      # This example means route 100 at stop 16299.\n      # This does not apply to any other stop on route 100 and any other route at stop 16299.\n    }\n\n    # cause of the alert - see gtfs-realtime.proto for valid values\n    cause: CONSTRUCTION\n    # effect of the alert - see gtfs-realtime.proto for valid values\n    effect: DETOUR\n\n    # the given url provides additional information\n    url {\n      # multiple languages/translations supported\n      translation {\n        # page hosted outside of Google (at provider/agency, etc.)\n        text: \"https://www.sometransitagency/alerts\"\n        language: \"en\"\n      }\n    }\n\n    # header for the alert will be highlighted\n    header_text {\n      # multiple languages/translations supported\n      translation {\n        text: \"Stop at Elm street is closed, temporary stop at Oak street\"\n        language: \"en\"\n      }\n    }\n\n    # Alert description. Additional info to the header text\n    description_text {\n      # multiple languages/translations supported\n      translation {\n        text: \"Due to construction at Elm street the stop is closed. The temporary stop can be found 300 meters north at Oak street\"\n        language: \"en\"\n      }\n    }\n  }\n}\n</code></pre>","title":"Service alert"},{"location":"realtime/feed-examples/trip-updates/","text":"<p>The following example is an ASCII representation of an full-dataset Trip Update feed.</p> <pre><code># header information\nheader {\n  # version of speed specification. Currently \"2.0\". Valid versions are \"2.0\", \"1.0\".\n  gtfs_realtime_version: \"2.0\"\n  # determines whether dataset is incremental or full\n  incrementality: FULL_DATASET\n  # the moment where this dataset was generated on server\n  timestamp: 1284457468\n}\n\n# multiple entities can be included in the feed\nentity {\n  # unique identifier for the entity\n  id: \"simple-trip\"\n\n  # \"type\" of the entity\n  trip_update {\n    trip {\n      # selects which GTFS entity (trip) will be affected\n      trip_id: \"trip-1\"\n    }\n    # schedule information update\n    stop_time_update {\n      # selecting which stop is affected\n      stop_sequence: 3\n      # for the vehicle's arrival time\n      arrival {\n        # to be delayed with 5 seconds\n        delay: 5\n      }\n    }\n    # ...this vehicle's delay is propagated to its subsequent stops.\n\n    # Next information update on the vehicle's schedule\n    stop_time_update {\n      # selected by stop_sequence. It will update\n      stop_sequence: 8\n      # the vehicle's original (scheduled) arrival time with a\n      arrival {\n        # 1 second delay.\n        delay: 1\n      }\n    }\n    # ...likewise the delay is propagated to subsequent stops.\n\n    # Next information update on the vehicle's schedule\n    stop_time_update {\n      # selected by stop_sequence. It will update the vehicle's arrival time\n      stop_sequence: 10\n      # with the default delay of 0 (on time) and propagate this update\n      # for the rest of the vehicle's stops.\n    }\n  }\n}\n\n# second entity containing update information for another trip\nentity {\n  id: \"3\"\n  trip_update {\n    trip {\n      # frequency based trips are defined by their\n      # trip_id in GTFS and\n      trip_id: \"frequency-expanded-trip\"\n      # start_time\n      start_time: \"11:15:35\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        # negative delay means vehicle is 2 seconds ahead of schedule\n        delay: -2\n      }\n    }\n    stop_time_update {\n      stop_sequence: 9\n    }\n  }\n}\n</code></pre>","title":"Trip Update"},{"location":"realtime/language-bindings/","text":"<p>Join the MobilityData chat</p> <p>Language bindings generated from the GTFS Realtime protocol buffer spec for popular languages.</p>","title":"Language Bindings"},{"location":"realtime/language-bindings/#introduction","text":"<p>GTFS Realtime is a data format for communicating real-time information about public transit systems. GTFS Realtime data is encoded and decoded using Protocol Buffers, a compact binary representation designed for fast and efficient processing.  The data schema itself is defined in gtfs-realtime.proto.</p> <p>To work with GTFS Realtime data, a developer would typically use the <code>gtfs-realtime.proto</code> schema to generate classes in the programming language of their choice.  These classes can then be used for constructing GTFS-realtime data model objects and serializing them as binary data or, in the reverse direction, parsing binary data into data model objects.</p> <p>Because generating GTFS Realtime data model classes from the <code>gtfs-realtime.proto</code> schema is such a common task, but also one that sometimes causes confusion for first-time developers, this project aims to provide pre-generated GTFS Realtime language bindings for a number of the most popular programming languages.  Where possible, these language bindings will be published as packages to facilitate their use in other projects.</p>","title":"Introduction"},{"location":"realtime/language-bindings/#supported-languages","text":"<ul> <li>.NET</li> <li>Java</li> <li>JavaScript / Node.js</li> <li>Python</li> <li>Golang</li> <li>~~Ruby~~ (Deprecated as of early 2019)</li> <li>~~PHP~~ (Deprecated as of early 2019)</li> </ul>","title":"Supported Languages"},{"location":"realtime/language-bindings/#other-languages","text":"<p>We don't provide generated code for C++, use the official protoc compiler for that (from here or here)</p> <p>Are we missing your favorite language? Consider contributing:</p> <ol> <li>Read CONTRIBUTING.md.</li> <li>Open a pull request with your language of choice. Please include update instructions (ideally, scripts). Also, provide packaging suitable for the language ecosystem.</li> </ol>","title":"Other Languages"},{"location":"realtime/language-bindings/#project-history","text":"<p>This project was originally created by Google - MobilityData started to maintain the project in early 2019. </p> <p>Older versions of the bindings libraries are still published under Google's name.  See the documentation for each language here to find the last version published by Google.</p>","title":"Project History"},{"location":"realtime/language-bindings/dotnet/","text":"<p></p> <p>Provides .NET classes generated from the GTFS-realtime Protocol Buffer specification.  These classes will allow you to parse a binary Protocol Buffer GTFS-realtime data feed into C# objects.</p>","title":".NET GTFS-realtime Language Bindings"},{"location":"realtime/language-bindings/dotnet/#add-the-dependency","text":"<p>To use the <code>gtfs-realtime-bindings</code> classes in your own project, you need to first install the module from the NuGet repository.</p> <pre><code>Install-Package GtfsRealtimeBindings\n</code></pre>","title":"Add the Dependency"},{"location":"realtime/language-bindings/dotnet/#example-code","text":"<p>The following code snippet demonstrates downloading a GTFS-realtime data feed from a particular URL, parsing it as a FeedMessage (the root type of the GTFS-realtime schema), and iterating over the results.</p> <pre><code>using System.Net;\nusing ProtoBuf;\nusing TransitRealtime;\n\nWebRequest req = HttpWebRequest.Create(\"URL OF YOUR GTFS-REALTIME SOURCE GOES HERE\");\nFeedMessage feed = Serializer.Deserialize&lt;FeedMessage&gt;(req.GetResponse().GetResponseStream());\nforeach (FeedEntity entity in feed.Entities) {\n  ...\n}\n</code></pre>","title":"Example Code"},{"location":"realtime/language-bindings/golang/","text":"<p>Provides Golang structs generated from the GTFS-realtime Protocol Buffer specification.  These structs will allow you to parse a binary Protocol Buffer GTFS-realtime data feed into Golang objects.</p>","title":"Golang GTFS-realtime Language Bindings"},{"location":"realtime/language-bindings/golang/#add-the-dependency","text":"<p>To use the <code>gtfs-realtime-bindings</code> structs in your own project, you need to first install this library with: </p> <pre><code>go get github.com/MobilityData/gtfs-realtime-bindings/golang/gtfs\n</code></pre> <p>And install the golang protobuf library dependency with: <pre><code>go get github.com/golang/protobuf/proto\n</code></pre></p>","title":"Add the Dependency"},{"location":"realtime/language-bindings/golang/#example-code","text":"<p>The following code snippet demonstrates downloading a GTFS-realtime data feed from a particular URL, parsing it as a FeedMessage (the root type of the GTFS-realtime schema), and iterating over the results.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    proto \"github.com/golang/protobuf/proto\"\n    \"github.com/MobilityData/gtfs-realtime-bindings/golang/gtfs\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    var (\n        username = \"YOUR_ACCESS_KEY\"\n        password = \"YOUR_SECRET_KEY\"\n    )\n\n    client := &amp;http.Client{}\n    req, err := http.NewRequest(\"GET\", \"URL OF YOUR GTFS-REALTIME SOURCE GOES HERE\", nil)\n    req.SetBasicAuth(username, password)\n    resp, err := client.Do(req)\n    defer resp.Body.Close()\n    if err != nil {\n        log.Fatal(err)\n    }\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    feed := gtfs.FeedMessage{}\n    err = proto.Unmarshal(body, &amp;feed)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, entity := range feed.Entity {\n        tripUpdate := entity.TripUpdate\n        trip := tripUpdate.Trip\n        tripId := trip.TripId\n        fmt.Printf(\"Trip ID: %s\\n\", *tripId)\n    }\n}\n</code></pre> <p>For more details on the naming conventions for the Golang structs generated from the gtfs-realtime.proto, check out the Golang Generated Code section of the Protocol Buffers developer site.</p>","title":"Example Code"},{"location":"realtime/language-bindings/java/","text":"<p></p> <p>Provides Java classes generated from the GTFS-realtime Protocol Buffer specification.  These classes will allow you to parse a binary Protocol Buffer GTFS-realtime data feed into Java objects.</p>","title":"Java GTFS-realtime Language Bindings"},{"location":"realtime/language-bindings/java/#add-the-dependency","text":"<p>To use the <code>gtfs-realtime-bindings</code> classes in your own project, you need to add an appropriate dependency.  We publish our module to the Maven Central Repository so that it can be easily referenced by Java build tools like Maven, Ivy, and Gradle.</p> <p>For Maven, add the following to your <code>pom.xml</code> dependencies section:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.mobilitydata&lt;/groupId&gt;\n  &lt;artifactId&gt;gtfs-realtime-bindings&lt;/artifactId&gt;\n  &lt;version&gt;0.0.8-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>For Gradle, add the following to your <code>build.gradle</code> dependecies section:</p> <pre><code>compile group: 'org.mobilitydata', name: 'gtfs-realtime-bindings', version: '0.0.8-SNAPSHOT'\n</code></pre> <p>Make sure the Maven central repository is referenced by your project.</p>","title":"Add the Dependency"},{"location":"realtime/language-bindings/java/#example-code","text":"<p>The following code snippet demonstrates downloading a GTFS-realtime data feed from a particular URL, parsing it as a FeedMessage (the root type of the GTFS-realtime schema), and iterating over the results.</p> <pre><code>import java.net.URL;\n\nimport com.google.transit.realtime.GtfsRealtime.FeedEntity;\nimport com.google.transit.realtime.GtfsRealtime.FeedMessage;\n\npublic class GtfsRealtimeExample {\n  public static void main(String[] args) throws Exception {\n    URL url = new URL(\"URL OF YOUR GTFS-REALTIME SOURCE GOES HERE\");\n    FeedMessage feed = FeedMessage.parseFrom(url.openStream());\n    for (FeedEntity entity : feed.getEntityList()) {\n      if (entity.hasTripUpdate()) {\n        System.out.println(entity.getTripUpdate());\n      }\n    }\n  }\n}\n</code></pre> <p>For more details on the naming conventions for the Java classes generated from the gtfs-realtime.proto, check out the Java Generated Code section of the Protocol Buffers developer site.</p>","title":"Example Code"},{"location":"realtime/language-bindings/java/#project-history","text":"","title":"Project History"},{"location":"realtime/language-bindings/java/#004-and-lower","text":"<p>This project was originally created by Google. You can download versions <code>0.0.4</code> and older under the Group ID <code>com.google.transit</code> here on Maven Central.</p>","title":"<code>0.0.4</code> and lower"},{"location":"realtime/language-bindings/java/#005","text":"<p>MobilityData started to maintain the project in early 2019 and initially published release artifacts via JCenter. You can download version <code>0.0.5</code> under the Group ID <code>io.mobilitydata.transit</code> here on Maven Central.</p>","title":"<code>0.0.5</code>"},{"location":"realtime/language-bindings/java/#006-and-007","text":"<p>JCenter shut down in 2021. Prior to the shutdown, a synchronization problem prevented versions <code>0.0.6</code> and <code>0.0.7</code> from being synchronized from JCenter to Maven Central, so direct artifact download is not currently available for these versions. However, you can compile them yourself from the tags using the command <code>mvn package</code>.</p>","title":"<code>0.0.6</code> and <code>0.0.7</code>"},{"location":"realtime/language-bindings/java/#008-and-higher","text":"<p>In 2022, MobilityData switched to publishing artifacts directly to Maven Central under the Group ID <code>org.mobilitydata</code>, which is where versions 0.0.8 and higher are published.</p>","title":"<code>0.0.8</code> and higher"},{"location":"realtime/language-bindings/nodejs/","text":"<p></p> <p>Provides JavaScript classes generated from the GTFS-realtime Protocol Buffer specification.  These classes will allow you to parse a binary Protocol Buffer GTFS-realtime data feed into JavaScript objects.</p> <p>These bindings are designed to be used in the Node.js environment, but with some effort, they can probably be used in other JavaScript environments as well.</p> <p>We use the ProtBuf.js library for JavaScript Protocol Buffer support.</p>","title":"JavaScript GTFS-realtime Language Bindings"},{"location":"realtime/language-bindings/nodejs/#add-the-dependency","text":"<p>To use the <code>gtfs-realtime-bindings</code> classes in your own project, you need to first install our Node.js npm package:</p> <pre><code>npm install gtfs-realtime-bindings\n</code></pre>","title":"Add the Dependency"},{"location":"realtime/language-bindings/nodejs/#example-code","text":"<p>The following Node.js code snippet demonstrates downloading a GTFS-realtime data feed from a particular URL, parsing it as a FeedMessage (the root type of the GTFS-realtime schema), and iterating over the results.</p> <pre><code>var GtfsRealtimeBindings = require('gtfs-realtime-bindings');\nvar request = require('request');\n\nvar requestSettings = {\n  method: 'GET',\n  url: 'URL OF YOUR GTFS-REALTIME SOURCE GOES HERE',\n  encoding: null\n};\nrequest(requestSettings, function (error, response, body) {\n  if (!error &amp;&amp; response.statusCode == 200) {\n    var feed = GtfsRealtimeBindings.transit_realtime.FeedMessage.decode(body);\n    feed.entity.forEach(function(entity) {\n      if (entity.tripUpdate) {\n        console.log(entity.tripUpdate);\n      }\n    });\n  }\n});\n</code></pre> <p>For more details on the naming conventions for the Javascript classes generated from the gtfs-realtime.proto, check out the ProtoBuf.js project which we use to handle our Protocol Buffer serialization.</p>","title":"Example Code"},{"location":"realtime/language-bindings/php/","text":"<p></p> <p>Provides PHP classes generated from the GTFS-realtime Protocol Buffer specification.  These classes will allow you to parse a binary Protocol Buffer GTFS-realtime data feed into PHP objects.</p> <p>For bindings in other languages, see the gtfs-realtime-bindings project.</p>  <p>Deprecated</p> <p>As of February 2019, the official <code>google-protobuf</code> Google protoc tool doesn't support proto2 files.  As a result we are deprecating the PHP bindings until official support for proto2 files is implemented in the Google protocol buffer tools.</p>","title":"PHP GTFS-realtime Language Bindings"},{"location":"realtime/language-bindings/php/#add-the-dependency","text":"<p>To use the <code>gtfs-realtime-bindings-php</code> classes in your own project, you need to first install the Packagist Composer package.  To do so, add a dependency in your <code>composer.json</code> file:</p> <pre><code>\"require\": {\n  \"google/gtfs-realtime-bindings\": \"x.y.z\"\n}\n</code></pre> <p>Where <code>x.y.z</code> is the latest release version:</p> <p></p> <p>Then update your Composer dependencies:</p> <pre><code>composer update\n</code></pre>","title":"Add the Dependency"},{"location":"realtime/language-bindings/php/#example-code","text":"<p>The following code snippet demonstrates downloading a GTFS-realtime data feed from a particular URL, parsing it as a FeedMessage (the root type of the GTFS-realtime schema), and iterating over the results.</p> <pre><code>require_once 'vendor/autoload.php';\n\nuse transit_realtime\\FeedMessage;\n\n$data = file_get_contents(\"URL OF YOUR GTFS-REALTIME SOURCE GOES HERE\");\n$feed = new FeedMessage();\n$feed-&gt;parse($data);\nforeach ($feed-&gt;getEntityList() as $entity) {\n  if ($entity-&gt;hasTripUpdate()) {\n    error_log(\"trip: \" . $entity-&gt;getId());\n  }\n}\n</code></pre> <p>For more details on the naming conventions for the PHP classes generated from the gtfs-realtime.proto, check out the the gtfs-realtime.php source file.</p>","title":"Example Code"},{"location":"realtime/language-bindings/python/","text":"<p></p> <p>Provides Python classes generated from the GTFS-realtime Protocol Buffer specification.  These classes will allow you to parse a binary Protocol Buffer GTFS-realtime data feed into Python objects.</p>","title":"Python GTFS-realtime Language Bindings"},{"location":"realtime/language-bindings/python/#add-the-dependency","text":"<p>To use the <code>gtfs-realtime-bindings</code> classes in your own project, you need to first install the module from the PyPI repository.</p> <pre><code># Using easy_install\neasy_install --upgrade gtfs-realtime-bindings\n\n# Using pip\npip install --upgrade gtfs-realtime-bindings\n</code></pre>","title":"Add the Dependency"},{"location":"realtime/language-bindings/python/#example-code","text":"<p>The following code snippet demonstrates downloading a GTFS-realtime data feed from a particular URL, parsing it as a FeedMessage (the root type of the GTFS-realtime schema), and iterating over the results.</p> <pre><code>from google.transit import gtfs_realtime_pb2\nimport requests\n\nfeed = gtfs_realtime_pb2.FeedMessage()\nresponse = requests.get('URL OF YOUR GTFS-REALTIME SOURCE GOES HERE')\nfeed.ParseFromString(response.content)\nfor entity in feed.entity:\n  if entity.HasField('trip_update'):\n    print(entity.trip_update)\n</code></pre> <p>For more details on the naming conventions for the Python classes generated from the gtfs-realtime.proto, check out the Python Generated Code section of the Protocol Buffers developer site.</p>","title":"Example Code"},{"location":"realtime/language-bindings/ruby/","text":"<p></p> <p>Provides Ruby classes generated from the GTFS-realtime Protocol Buffer specification.  These classes will allow you to parse a binary Protocol Buffer GTFS-realtime data feed into Ruby objects.</p>  <p>Deprecated</p> <p>As of February 2019, the official <code>google-protobuf</code> Google protoc tool doesn't support extensions in proto2 files.  A 3rd party tool, ruby-protocol-buffers, can be installed using <code>gem install ruby-protocol-buffers</code>, but doesn't seem to match the existing structure of the Ruby GTFS-rt bindings, as the unit tests fail.  As a result we are deprecating the Ruby bindings until official support for proto2 files is implemented in the Google protocol buffer tools.</p>","title":"Ruby GTFS-realtime Language Bindings"},{"location":"realtime/language-bindings/ruby/#add-the-dependency","text":"<p>To use the <code>gtfs-realtime-bindings</code> classes in your own project, you need to first install the Ruby gem:</p> <pre><code>gem install gtfs-realtime-bindings\n</code></pre>","title":"Add the Dependency"},{"location":"realtime/language-bindings/ruby/#example-code","text":"<p>The following code snippet demonstrates downloading a GTFS-realtime data feed from a particular URL, parsing it as a FeedMessage (the root type of the GTFS-realtime schema), and iterating over the results.</p> <pre><code>require 'protobuf'\nrequire 'google/transit/gtfs-realtime.pb'\nrequire 'net/http'\nrequire 'uri'\n\ndata = Net::HTTP.get(URI.parse(\"URL OF YOUR GTFS-REALTIME SOURCE GOES HERE\"))\nfeed = Transit_realtime::FeedMessage.decode(data)\nfor entity in feed.entity do\n  if entity.field?(:trip_update)\n    p entity.trip_update\n  end\nend\n</code></pre> <p>For more details on the naming conventions for the Ruby classes generated from the gtfs-realtime.proto, check out the the gtfs-realtime.pb.rb source file.</p>","title":"Example Code"},{"location":"resources/","text":"","title":"Resources"},{"location":"resources/#community-list-of-transit-apis-apps-datasets-research-and-software","text":"<p>Have something to add or change? Open a pull request or issue at CUTR-at-USF/awesome-transit.</p>","title":"Community list of transit APIs, apps, datasets, research, and software"},{"location":"resources/#table-of-contents","text":"<ul> <li>Getting started</li> <li>Community</li> <li>Data</li> <li>Software for Creating APIs</li> <li>Agency Tools</li> <li>Hardware</li> <li>Apps<ul> <li>Web Apps (open source)</li> <li>Web Apps (closed source)</li> <li>Native Apps (open source)</li> <li>Native Apps (closed source)</li> </ul> </li> <li>SDKs</li> <li>Visualizations</li> <li>GTFS<ul> <li>GTFS Libraries</li> <li>GTFS Converters</li> <li>GTFS Data Collection and Maintenance Tools</li> <li>GTFS Analysis Tools</li> <li>GTFS Timetable Publishing Tools</li> <li>GTFS Validators</li> </ul> </li> <li>GTFS Realtime<ul> <li>GTFS Realtime Libraries &amp; Demo Apps</li> <li>GTFS Realtime Validators</li> <li>GTFS Realtime (and Other Real-time API) Archival Tools</li> <li>GTFS Realtime Convertors</li> <li>GTFS Realtime Utilities</li> </ul> </li> <li>SIRI</li> <li>Other Multimodal Data Formats</li> <li>Other Resources</li> </ul>","title":"Table of Contents"},{"location":"resources/#about","text":"<p>Originally created by Luqmaan Dawoodjee, now maintained by the Center for Urban Transportation Research at the University of South Florida.</p> <p>This list is intended as a community resource for informational use only - listing of a project/product does not imply endorsement.</p>","title":"About"},{"location":"resources/#license","text":"<p></p> <p>To the extent possible under law, Luqmaan Dawoodjee and the Center for Urban Transportation Research at the University of South Florida have waived all copyright and related or neighboring rights to this work.</p>","title":"License"},{"location":"resources/agency-tools/","text":"<p>Tools for transit agencies.  See also GTFS Data Collection and Maintenance Tools for tools specific to GTFS.</p> <ul> <li>Remix - A webapp that lets transit agencies easily plan routes.</li> <li>AC Transit RestroomFinder - Pinpoints the nearest authorized restroom for bus operator and field staff, using GPS and on-screen map.</li> <li>AC Transit Training and Education Department (TED) application - This application supports the District's training operations for transportation and maintenance employees, primarily in the positions of Bus Operators and Heavy Duty Coach Mechanics (Apprentice and Journey), although the system supports new courses and apprenticeship programs.</li> <li>AC Transit Customer Relations application (CusRel) - Public transit ticketing system for customer issues and feedback with: inter-departmental routing with notifications, department/person assigments, simple workflow, ticket searching, pre-canned reports, daily reminders and more.</li> <li>TransAM - An open-source asset management platform for public transportation agencies.  Open-source on Github.</li> <li>RidePilot - An open-source Computer Aided Scheduling and Dispatch (CASD) software system to meet the needs of small scale human service transportation agencies (for more info see Cambridge Systematics's marketing site).</li> <li>TNExT - Transit Network Explorer Tool (TNExT) is a web-based software tool developed for the visualization, analysis, and reporting of regional and statewide transit networks in the state of Oregon.</li> <li>Route Trends (webapp, GitHub) - An R Shiny app to ingest ridership time series, and return seasonal, trend, and residual components according to STL methodology and forecasts including uncertainty based on those components.  Sponsored by Metro Transit (Minneapolis-St. Paul).</li> <li>TBEST - TBEST (Transit Boardings Estimation and Simulation Tool) is an effort to develop a multi-faceted GIS-based modeling, planning and analysis tool which integrates socio-economic, land use, and transit network data into a platform for scenario-based transit ridership estimation and analysis. Funded by the Florida Department of Transportation. Free to use but not open-source.</li> </ul>","title":"Agency Tools"},{"location":"resources/apps/","text":"<p>Apps people use when taking transit.</p>","title":"Apps"},{"location":"resources/apps/#web-apps-open-source","text":"<ul> <li>Instabus - Realtime map of Austin's (CapMetro) public transit. Has no server/backend dependency at all and runs completely on GitHub pages.</li> <li>OpenTripPlanner Client GWT - A Google Web Toolkit-based web interface for OpenTripPlanner</li> <li>OpenTripPlanner.js - A Javascript-based client for OpenTripPlanner (no longer under development)</li> <li>OTP-UI React Component Library - React Javascript component library, which can be used to build trip planner webapps. See the Storybook for a demo.</li> <li>GTFS-realtime Alerts Producer Web Application - A Java-based web application for producing GTFS-realtime Service Alerts.</li> <li>HRT BUS Web app - HRT Bus API publishes real time bus data from Hampton Roads Transit through an application programming interface for developers to make apps from it.</li> <li>Transit-Map - Web app that animates vehicles (markers) on a map using the public transport timetables to interpolate their positions along the routes (polylines).</li> <li>Transitive.js - Creates a customizable web map layer of transit routes using Leaflet or D3.</li> <li>Google I/O Transport Tracker - Shows shuttle arrival times for Google I/O conference, based on the open-source transport-tracker project.  Note: To implement this yourself, you need a Google Maps APIs Premium Plan license.</li> <li>1-Click - A virtual \u201ctrip aggregator\u201d that assembles information on a wide variety of available modes: public transit, private, rail, rideshare, carpool, volunteer, paratransit, and walking and biking. Open-source on GitHub.</li> <li>Bustime - Public transport real-time monitoring with WebSocket updates. Open-source on GitHub.</li> <li>Transit Tracker - Realtime vehicle position for Greater Montreal &amp; Toronto, Canada</li> <li>GTFS Builder - A free web-based application to help you create GTFS files. Maintained by the National Rural Transit Assistance Program (RTAP).</li> <li>Dede - An independent and universal passenger information system (PIS) mapping realtime movement. A message feed with Vehicle Position entities in the GTFS-Realtime format or the Dede app can be used as data source.</li> <li>MBTA tile-server - Scripts to create a Docker container that encapsulates all the elements necessary to develop map tiles for use on MBTA.com</li> <li>Tiramisu Transit - An adaptive mobile transit app that shows real-time bus arrival information developed and deployed by Carnegie Mellon University. No longer maintained.</li> </ul>","title":"Web Apps (open source)"},{"location":"resources/apps/#web-apps-closed-source","text":"<ul> <li>TransitScreen - Custom realtime displays of all local transportation choices</li> <li>Citylines.co - A collaborative platform for mapping transit systems, with an emphasis on their historical evolution.</li> <li>Bikeshare Map - Status of all worldwide bikeshare stations</li> <li>Bongo - Real-time Transit Tracking for Iowa City, Coralville and the University of Iowa. Combines three disparate transit systems into one UI.</li> <li>Brand New Subway - An interactive transportation planning game that lets players alter the NYC subway system to their heart's content.</li> <li>CityMapper Webapp - Really polished webapp with trip planner and route status for over 30 of cities.</li> <li>YourStop - Mobile friendly web app which consumes GTFS feeds and displays both live and scheduled trips for stops. Launched with MBTA, YRT/Viva and Maryland MTA.</li> <li>DC MetroHero - Realtime vehicle position and arrivals and departure information for the Washington, D.C. region's WMATA Metrorail and Metrobus systems. WebApp, Android, and iOS apps avaliable.</li> </ul>","title":"Web Apps (closed source)"},{"location":"resources/apps/#native-apps-open-source","text":"<ul> <li>OneBusAway Apps - Android (source code), Fire Phone (source code), iOS (source code), Windows Phone (source code), Windows 8 (source code), Google Glass GDK (source code), Alexa skill (source code)</li> <li>OpenTripPlanner Android - An Android app for OpenTripPlanner</li> <li>OpenTripPlanner iOS - An iOS app for OpenTripPlanner</li> <li>opentripplanner-client-library - A Kotlin Multiplatform library for making API requests and parsing responses from an OpenTripPlanner v2 server for trip plans, bike rental info, and server metadata for Android, iOS, and web.</li> <li>Transportr An Android app that uses public-transport-enabler in order to connect to many different transport networks worldwide.</li> <li>Offi Directions - An Android app that provides trip planning, schedules, live departure times, and disruption information for transport authorities in Europe and beyond.</li> <li>Trufi App - A cross-platform Flutter app that uses OpenTripPlanner</li> <li>Dede App - An app making any Android powered phone become an Automatic Vehicle Locating (AVL) device for the Dede passenger information system (PIS).</li> <li>MACS Transit Android App - A bus tracker app for Android devices for the MACS Transit system in Fairbanks, Alaska. Uses RouteMatch APIs.</li> <li>Tiramisu Transit - An adaptive mobile transit app that shows real-time bus arrival information developed and deployed by Carnegie Mellon University. Written using Ionic framework. No longer maintained.</li> </ul>","title":"Native Apps (open source)"},{"location":"resources/apps/#native-apps-closed-source","text":"<ul> <li>ally</li> <li>Transit</li> <li>CityMapper</li> <li>Moovit</li> <li>TransLoc Rider - Real-time transit maps for over 100 transit systems.</li> <li>Transit Display - Multimodal and real-time transit display software.</li> <li>Ualabee - Community driven trip planner with focus on user interaction, users can report anomalies, upload pictures, edit transit data and chat with other passengers.</li> </ul>","title":"Native Apps (closed source)"},{"location":"resources/community/","text":"<p>Places to ask questions and find other community resources.</p> <ul> <li>German Open Transport Meetup - You can participate in a biweekly meetup of the German-speaking open transport community.</li> <li>OpenTripPlanner Community<ul> <li>OpenTripPlanner User mailing list</li> <li>OpenTripPlanner Developers mailing list</li> </ul> </li> <li>TransitWiki - A community wiki for transit planners. Like this repo, but better.</li> <li>MobilityData Slack chat</li> <li>Transit Developers mailing list</li> <li>OneBusAway<ul> <li>OneBusAway User mailing list</li> <li>OneBusAway Developers mailing list</li> <li>OneBusAway API mailing list</li> <li>OneBusAway Slack chat</li> </ul> </li> <li>Transit Techies NYC - NYC-based meetup for those interested in this repo. Speaker list includes many contributors to this repo.</li> </ul>","title":"Community"},{"location":"resources/data/","text":"<p>Places to access collections of GTFS and other transit and multimodal data</p>","title":"Data"},{"location":"resources/data/#3rd-party-gtfs-url-directories","text":"<ul> <li>~~GTFS Data Exchange~~ (Deprecated) - Formerly the definitive directory of GTFS feed URLs. Shutdown in 2016. But 93 GB of data from 2008 to 2016 is available upon request.</li> <li>~~OpenMobilityData~~ (Deprecated) - List of GTFS and GTFS-RT feeds. Archives and validates the GTFS feeds and allows you to preview both GTFS and GTFS-RT through the browser. Formerly TransitFeeds.com. MobilityData announced it is end-of-life as of early 2022 with a shutdown date to be determined.</li> <li>The Mobility Database - JSON and CSV files on GitHub that is a repository of 1300+ mobility datasets across the world. Contains contents of OpenMobilityData/TransitFeeds.com.</li> <li>Transitland - Community editable list of many transit agency GTFS datasets. Also provides an API to access the data as JSON/GeoJSON and a playground to try out the data.</li> </ul>","title":"3rd party GTFS URL directories"},{"location":"resources/data/#transit-agency-data-archives","text":"<ul> <li>CapMetrics - Historical vehicle locations for Austin's transit agency (CapMetro). Data is collected by capmetricsd, a Go daemon.</li> </ul>","title":"Transit agency data archives"},{"location":"resources/data/#national-government-datasets","text":"<ul> <li>National Transit Database (USA) - Information and statistics on the transit systems of the United States, run by the Federal Transit Administration.</li> <li>Transport (France) - GTFS datasets for French transit systems.</li> <li>European long-distance transport operators (EU) (Unofficial) - Unofficial list of available API endpoints, GTFS feeds and client libraries</li> </ul>","title":"National government datasets"},{"location":"resources/data/#proprietary-non-standard-vendor-apis","text":"<ul> <li>Transport API - REST API for aggregated transit data for the United Kingdom.  Fee-based access.</li> <li>TransLoc OpenAPI - REST API for real-time vehicle, route, stop, and arrival data for over 60 transit systems in the United States that have purchased TransLoc's AVL hardware and software.</li> <li>NextBus API - REST API for real-time vehicle, route, stop, and arrival data for agencies that have puchased NextBus's hardware and/or software.</li> <li>Navitia.io - REST API for journey planning, stop schedules, isocrhons and lot more on US and EU. Navitia is the opensource engine behind the live API.</li> <li>CityBikes - REST API for aggregated bikeshare data from around the world. Powered by pyBikes.</li> <li>HAFAS \u2013\u00a0Propriety public transport management software by HaCon (list of endpoints)</li> <li>Citymapper API - REST API for transit journey planning, realtime transit data and walk, cycle, scooter travel times.</li> </ul>","title":"Proprietary (non-standard) vendor APIs"},{"location":"resources/data/#crowdsourced-transit-data","text":"<ul> <li>Citylines.co - A collaborative platform for mapping transit systems, with an emphasis on their historical evolution. The data can be downloaded as GeoJSON or CSV from citylines.co/data.</li> <li>OpenStreetMap (OSM) - The collaborative platform for mapping the world, including transport, transit, and routing data.</li> <li>GTFS-Hub - Community tested, probably quality/content enhanced, partially merged or filtered GTFS-feeds of (currently German) transport agencies. Maintained by MITFAHR|DE|ZENTRALE.</li> </ul>","title":"Crowdsourced transit data"},{"location":"resources/data/#sample-gtfs-and-gtfs-realtime-datasets-used-for-software-testing","text":"<ul> <li>sample-gtfs-feed - An imaginary GTFS data set used for testing.</li> <li>transitfeed unit tests - Test data created for the original Google Python GTFS validator.</li> <li>Transitland GTFS and GTFS Realtime unit tests - For testing the transitland-lib library that handles GTFS and GTFS Realtime parsing and validation for Transitland:<ul> <li>GTFS - \"bad entities\" at the single row level</li> <li>GTFS - validation errors that that involve entities in one or more files</li> <li>GTFS - best practices</li> <li>GTFS Realtime - JSON test cases that are turned into PB contents</li> </ul> </li> <li>gtfs-realtime-validator unit tests - Some GTFS datasets (zip files) are included and a large number of GTFS RT messages are defined programmatically in Java via the gtfs-realtime-bindings library.</li> <li>OpenTripPlanner unit tests - Some GTFS datasets are defined for the unit tests (GtfsTest and mmri folder).</li> </ul>","title":"Sample GTFS and GTFS Realtime datasets used for software testing"},{"location":"resources/getting-started/","text":"<p>If this is your first time dealing with transit data, you might find these links useful:</p> <ul> <li>GTFS - A GTFS feed is a group of text files that contains infrequently changing transit data, like stops, routes, trips, and other schedule data. Transit agencies typically update their GTFS feed every few months.</li> <li>GTFS Realtime - GTFS Realtime consists of three binary files that contain realtime vehicle positions, realtime arrival information, and service alerts. Transit agencies typically update these files every minute.</li> <li>World Bank - \"Intro. to GTFS\" online course - A free, online, self-paced course for learning about GTFS and GTFS-realtime.</li> <li>Open Transit Data Toolkit - A series of lessons to help people utilize open transit data.</li> <li>MBTA GTFS Onboarding - An interactive tutorial created by MBTA for GTFS static. A stand-alone Docker image is available on GitHub as well as a hosted/no-install version of the Jupyter notebook.</li> </ul>","title":"Getting started"},{"location":"resources/gtfs-realtime/","text":"<ul> <li>GTFS-realtime documentation. Also available in Espa\u00f1ol.</li> <li>GTFS-realtime Autodoc - Automatically generated documentation for GTFS-realtime, generated from the official GTFS-realtime protocol buffer specification and including some extensions.</li> </ul>","title":"GTFS Realtime"},{"location":"resources/gtfs-realtime/#gtfs-realtime-libraries-demo-apps","text":"<ul> <li>gtfs-realtime-bindings - The official bindings for Java, .NET, Node.js, Python, and Ruby generated from the official GTFS-realtime protocol buffer specification.</li> <li>GTFS-realtime Exporter - A Java-based tool that assists in producing and sharing a GTFS-relatime feed.</li> <li>GTFS-realtime Alerts Producer Demo - A Java-based demo project for producing GTFS-realtime Service Alerts.</li> <li>GTFS-realtime Alerts Producer Web Application - A Java-based web application for producing GTFS-realtime Service Alerts.</li> <li>GTFS-realtime TripUpdates &amp; VehiclePositions Producer Demo - A Java-based demo project for producing GTFS-realtime TripUpdates (estimated arrivals) and Vehicle Positions.</li> <li>GTFS-realtime Vehicle Positions Consumer/Visualizer Demo - A Java-based demo project for consuming a GTFS-realtime Vehicle Positions feed and displaying this info on a map.</li> </ul>","title":"GTFS Realtime Libraries &amp; Demo Apps"},{"location":"resources/gtfs-realtime/#gtfs-realtime-validators","text":"<ul> <li>gtfs-realtime-validator - A GTFS Realtime validation tool originally developed by the Center for Urban Transportation Research at the University of South Florida and now maintained by MobilityData.</li> </ul>","title":"GTFS Realtime Validators"},{"location":"resources/gtfs-realtime/#gtfs-realtime-and-other-real-time-api-archival-tools","text":"<ul> <li>GTFS-realtime to SQL - Parses a GTFS-RealTime feed into an SQL database (used in OpenMobilityData.org)</li> <li>gtfsrdb - A Python tool that supports reading and archiving GTFS-realtime feeds into a database</li> <li>retro-gtfs - A Python application that collects real-time data from the Nextbus API and archives it into the GTFS format (i.e., retrospective GTFS).</li> </ul>","title":"GTFS Realtime (and Other Real-time API) Archival Tools"},{"location":"resources/gtfs-realtime/#gtfs-realtime-convertors","text":"<ul> <li>SIRI to GTFS-realtime - A Java-based command-line utility to convert from the SIRI format to GTFS-realtime</li> <li>OrbCAD SQL Server to GTFS-realtime - A Java-based command-line utility that extracts vehicle positions and trip updates information from an OrbCAD SQL Server and exports them to the GTFS-realtime TripUpdates and VehiclePositions formats.</li> <li>NextBus API to GTFS-realtime - A Java-based command-line utility to convert from the NextBus API format to GTFS-realtime.  Note that NextBus now directly offers a GTFS-realtime API for their products.  See Cubic site and this FAQ.</li> <li>Syncromatics API to GTFS-realtime - A Java-based command-line utility to convert from the Syncromatics API format to GTFS-realtime TripUpdates and VehiclePositons.</li> <li>KV6,15,17, and ARNU to GTFS-realtime - Java-based tool to process incoming KV6,15,17 and ARNU and match them to static transit data present in a RID integration database. It then proceeds to export this data as ARNU RITinfo, GTFS(realtime) and KV78turbo</li> <li>WMATA BusPositions API to GTFS-realtime - Java-based tool to convert from WMATA's BusPositions API and Alert RSS feeds from MetroAlerts to GTFS-realtime TripUpdates, VehiclePositions, and Alerts feeds.</li> <li>SEPTA API to GTFS-realtime - Java-based tool to convert SEPTA's real-time bus and rail data to GTFS-realtime</li> <li>CTA API to GTFS-realtime - Java-based tool to convert CTA's Train Tracker data to GTFS-realtime.</li> <li>Detroit DOT to GTFS-realtime - Extract real-time info from DDOT's TransitMaster installation (database) and convert to GTFS-realtime</li> <li>Live Transit Event Trigger - Extracts data from Ride On's OrbCAD database and export as GTFS-realtime.</li> <li>SoundTransit to GTFS-realtime - Convert text file feed from Sound Transit to GTFS-realtime</li> <li>Civic Transit - Screen-scrapes KCATA\u2019s TransitMaster WebWatch installation to produce a GTFS-realtime feed.</li> <li>GTFS-realtime VehiclePositions to GTFS-realtime TripUpdates (TransitClock) - Java application that can consume raw vehicle positions and generate prediction times in formats such as GTFS-realtime.  Formerly known as \"Transitime\".</li> <li>gtfs-realtime-translators - A Python-based tool to translate custom arrival API formats to GTFS-realtime.  As of July 2019 it supports LA Metro and SEPTA.</li> <li>Transloc API to GTFS-realtime - A Node.js based tool to convert the Transloc API to GTFS-realtime.</li> <li>hafas-gtfs-rt-feed \u2013 A Javascript tool to generate a GTFS Realtime feed from a HAFAS endpoint.</li> <li>GTFS-realtime to SIRI-Lite - A Rust webserver to convert multiple GTFS-RT feeds to a SIRI-Lite API.</li> </ul>","title":"GTFS Realtime Convertors"},{"location":"resources/gtfs-realtime/#gtfs-realtime-utilities","text":"<ul> <li>bus_kalman - A Kalman Filter used to interpolate bus travel times using NYC MTA real-time data.</li> <li>Concentrate - Combines realtime transit information from multiple sources into single output files. Maintained by  Massachusetts Bay Transportation Authority (MBTA).</li> <li>gtfs-realtime-test-service - A tool for mocking GTFS-realtime feed content (e.g., for use in testing a GTFS-realtime consuming application).</li> <li>GTFS-realtime Munin Plugin - Provides a Munin plugin for logging information about a GTFS-realtime feed.</li> <li>GTFS-realtime Nagio Plugin - Provides a Nagios plugin for monitoring a GTFS-realtime feed</li> <li>GTFS-realtime Printer - Java-based utility to print out information from a GTFS-realtime file or URL.</li> <li>gtfs-rt-admin - An admin tool for managing GTFS-RT service alerts (JavaScript and Java).</li> <li>gtfs-rt-differential-to-full-dataset \u2013\u00a0Javascript tool to transform a continuous GTFS Realtime stream of <code>DIFFERENTIAL</code> incrementality data into a <code>FULL_DATASET</code> dump.</li> <li>gtfs-rt-dump - Converts protocol buffer format to plain text for easy viewing of a GTFS-realtime feed in plain text (for debugging purposes)</li> <li>gtfs-rt-inspector \u2013\u00a0Web app to inspect &amp; analyze any (CORS-enabled) GTFS Realtime feed. Open-source on GitHub.</li> <li>GTFS Data Pipeline for TfNSW Bus Datasets - A data pipeline developed for the TfNSW's GTFS Static and Realtime datasets. The datasets generated using the pipeline have been used to validate the performance of TfNSW's Transit Signal Priority Request via Public Transport Information and Priority System (PTIPS).</li> <li>manual-gtfsrt - A Go-based tool that serves a GTFS-RT feed created from editable JSON.</li> <li>print-gtfs-rt-cli \u2013\u00a0Javascript tool to read a GTFS Realtime feed from stdin, print human-readable or as JSON.</li> <li>transitcast - Uses GTFS and GTFS-RT vehicle position feed generating an estimated transition time it takes for each vehicle to move from scheduled stop to scheduled stop recording these an \"observed_stop_time\" table. These records can later be used to train a machine learning model to make vehicle travel predictions. Created by TriMet as part of an FTA IMI project.</li> <li>transit-feed-quality-calculator - A Java project that uses the gtfs-realtime-validator to assess the quality of a large number of transit feeds, fetching the feed URLs from a global directory (TransitFeeds.com/OpenMobilityData.org).</li> <li>Transit Network Model - A tool to generate predictions using GTFS-realtime VehiclePositions, a particle filter, and a Kalman Filter. </li> </ul>","title":"GTFS Realtime Utilities"},{"location":"resources/gtfs/","text":"<ul> <li>GTFS Spec - Specification for the General Transit Data Feed, or GTFS. Also available in Espa\u00f1ol, Fran\u00e7ais.</li> <li>GTFS Best Practices - Best practices for producers of a GTFS feed.</li> </ul>","title":"GTFS"},{"location":"resources/gtfs/#gtfs-libraries","text":"<p>Software that makes it easy to consume GTFS data in a variety of languages.</p>","title":"GTFS Libraries"},{"location":"resources/gtfs/#c","text":"<ul> <li>CGTFS - C library for reading static GTFS feeds. Supports reading unpacked feeds into application memory or into SQLite databases.</li> <li>RRRR Rapid Real-time Routing - RRRR (usually pronounced R4) is a C-language implementation of the RAPTOR public transit routing algorithm.</li> </ul>","title":"C"},{"location":"resources/gtfs/#c_1","text":"<ul> <li>just_gtfs - C++17 header-only library for reading and writing GTFS (used in MAPS.ME). Main features: fast reading and writing of GTFS feeds, support for extended GTFS route types, simple working with GTFS Date and Time formats.</li> </ul>","title":"C++"},{"location":"resources/gtfs/#c_2","text":"<ul> <li>ESRI public-transit-tools - Tools for working with public transit data in ArcGIS (license for ArcGIS required).</li> <li>GTFS Feed Parser - .Net/Mono implementation of a GTFS parser.</li> </ul>","title":"C"},{"location":"resources/gtfs/#go","text":"<ul> <li>Go GTFS Parser - A GTFS parsing library for Go.</li> </ul>","title":"Go"},{"location":"resources/gtfs/#java","text":"<ul> <li>OneBusAway GTFS Modules - A Java-based library for reading, writing, and transforming public transit data in the GTFS format, including database support.</li> </ul>","title":"Java"},{"location":"resources/gtfs/#javascript","text":"<ul> <li>gtfs-sequelize - Node.js library modeling the static GTFS using sequelize.js.</li> <li>gtfs-utils \u2013\u00a0Utilities to process GTFS data sets (e.g., \"flattening\" <code>calendar.txt</code> &amp; <code>calendar_dates.txt</code>, computing arrival/departure times of trips).</li> <li>gtfs-via-postgres \u2013\u00a0Yet another tool to process GTFS using PostgreSQL.</li> <li>Node-GTFS - Loads transit data from GTFS files, unzips it and stores it to a SQLite database. Provides some methods to query for agencies, routes, stops and times.</li> </ul>","title":"JavaScript"},{"location":"resources/gtfs/#postgresql","text":"<ul> <li>gtfs-schema - PostgreSQL schema for GTFS feeds.</li> <li>gtfs-via-postgres \u2013\u00a0Yet another tool to process GTFS using PostgreSQL.</li> </ul>","title":"PostgreSQL"},{"location":"resources/gtfs/#python","text":"<ul> <li>combine_gtfs_feeds - A Python tool to combine multiple gtfs feeds into one feed/dataset.</li> <li>ESRI public-transit-tools - Tools for working with public transit data in ArcGIS (license for ArcGIS required).</li> <li>gtfsdb - Python library for converting GTFS files into a relational database.</li> <li>gtfslib-python -  An open source library in python for reading GTFS files and computing various stats and indicators about Public Transport networks.</li> <li>gtfsman - Repository-like tool in Python to manage and update a huge number of GTFS feeds.</li> <li>gtfspy - Public transport network analysis and travel time computations using Python3. Compatible with Postgres/PostGIS, Oracle, MySQL, and SQLite. Used by gtfspy-webviz.</li> <li>GTFS Kit - A Python 3.6+ tool kit for analyzing General Transit Feed Specification (GTFS) data. Supersedes GTFSTK.</li> <li>GTFSTK - A Python 3 toolkit for analyzing GTFS data in memory. Uses Pandas and Shapely for speed. Superseded by GTFS Kit.</li> <li>Make GTFS - A Python library to make GTFS feeds from basic route information.</li> <li>Mapzen GTFS - A Python GTFS library that supports reading individual GTFS tables, or constructing a graph to represent each agency in a feed.</li> <li>multigtfs - A Django application to import and export GTFS.</li> <li>partridge - A fast, forgiving Python GTFS reader built on pandas DataFrames.</li> <li>transit_service_analyst - A Python library to support transit service analysis.</li> </ul>","title":"Python"},{"location":"resources/gtfs/#r","text":"<ul> <li>trread - A transit (GTFS) file reader for R. </li> </ul>","title":"R"},{"location":"resources/gtfs/#ruby","text":"<ul> <li>GTFS-viz - Ruby script that converts a set of GTFS files into a SQLite database + GeoJSONs (needed by the Transit Map web application)</li> </ul>","title":"Ruby"},{"location":"resources/gtfs/#gtfs-converters","text":"<p>Converters from various static schedule formats to and from GTFS.</p> <ul> <li>Chouette - Converts French-Transmodel, SIRI, NETeX. See Chouette.mobi website for more info.</li> <li>extract-gtfs-pathways \u2013 Command-line tool to extract pathways as GeoJSON from a GTFS dataset.</li> <li>extract-gtfs-shapes \u2013\u00a0Command-line tool to extract shapes as GeoJSON from a GTFS dataset.</li> <li>GTFS-OSM-Sync - A Java tool for synchronizing data in GTFS format with OpenStreetMap.org.</li> <li>gtfs-service-area - Compute a transit service area from static GTFS. Results are output as single-layer .geojson files. Dockerized version of gtfs-to-geojson.</li> <li>GTFS-route-shapes - A Python script to generate a single geoJSON shape for each transit route in a GTFS archive.</li> <li>gtfs-to-geojson - Javascript tool that converts transit data in GTFS shapes and stops into geoJSON. This is useful for creating maps of transit routes.</li> <li>gtfs2gps - An R package that converts public transportation data in GTFS format to GPS-like records in a <code>data.table</code>, where each row represents the timestamp of each vehicle at a given spatial resolution.</li> <li>gtsf - general transit (GTFS) simple (geographic) features (sf) in R. can be used to convert from GTFS to Shapefile, GeoJSON, and other formats through GDAL.</li> <li>hafas-generate-gtfs (work-in-progress) \u2013 A Javascript tool to generate GTFS dumps from HAFAS endpoints.</li> <li>Hafas2GTFS - Hafas2GTFS converter written in Python, optimized for SBB HAFAS feeds.</li> <li>kml-to-gtfs-shapes - Javascript tool to convert polylines from a KML file into a GTFS shapes.txt file. Hosted on GitHub here.</li> <li>o2g - A simple tool to extract GTFS feed from OpenStreetMap.</li> <li>Open-Transport SYNTHESE Convertors - Converts French-Transmodel, SIRI, NETeX, HAFAS, HASTUS, VDV452, and more.</li> <li>onebusaway-gtfs-to-barefoot - A Java tool to create a Barefoot mapfile from a GTFS file.</li> <li>onebusaway-vdv-modules - A Java library for working with transit data in the VDV format, including converting VDV-452 schedule data into GTFS.</li> <li>osm2gtfs - Turn OpenStreetMap data and schedule information into GTFS.</li> <li>transit_model - A Rust library to convert to/from the following formats: GTFS, NTFS (for Navitia, see Software for Creating APIs), TransXChange (UK standard format), KV1 (Netherland standard format) or NeTEx (European standard format).</li> <li>transloc-gtfs-rectifier - Python application that attempts to assign GTFS stop_ids to TransLoc IDs using TransLoc's API (TransLoc doesn't provide GTFS <code>stop_ids</code> in their API).</li> <li>Transmodel and IFF to GTFS - Imports and syncs (Transmodel) BISON Koppelvlak1, IFF (a format written by HP/EDS, somewhat similiar to ATCO CIF) to import timetables of the railway networks. The internal pseudo-NETeX datastructure allows to export to GTFS and there are proof-of-concepts to export to other formats such as NETeX, GTFS and IFF.</li> </ul>","title":"GTFS Converters"},{"location":"resources/gtfs/#gtfs-data-collection-and-maintenance-tools","text":"<ul> <li>bus-router - Python script that generates missing shapes.txt for GTFS using routing from Google Maps Directions API or OSRM.</li> <li>gtfs-blocks-to-transfers - A Python tool to convert GTFS blocks, defined by setting trip.block_id into a series of trip-to-trip transfers (proposal).</li> <li>GTFS Editor - A (self-hosted) web-based GTFS editing framework. (Note: this project has been deprecated in favor of IBI Data Tools.)</li> <li>GTFS Editor for Vagrant - Quickly set up the GTFS editor (above) using Vagrant</li> <li>static-GTFS-manager - A (self-hosted) browser-based user interface for creating, editing, exporting static GTFS (see related post).  Live demo here.</li> <li>TransitWand - An open source web and mobile application for collecting transit data. Use it to create GTFS feeds, capture passenger counts or generate GIS datasets.</li> <li>IBI Data Tools - A web application that handles GTFS editing, validating, quality checking, and deploying to OpenTripPlanner. (Combines and builds upon the functionality of the deprecated Gtfs Data Manager and GTFS Editor.)</li> <li>GTFS.html - An entirely browser-based tool to view GTFS feeds. Use it to view routes, stops, timetables, etc.</li> <li>pfaedle - Precise map-matching for GTFS using OpenStreetMap data</li> <li>GTFS shape mapfit - Python tool that fits GTFS shape files and stops to a given OSM map file. Uses pymapmatch for the matching.</li> <li>GTFS Builder - A free web-based application to help you create GTFS files. Maintained by the National Rural Transit Assistance Program (RTAP).</li> <li>gtfs-station-builder - UI tool to help build the internal structure of stations (including pathways.txt)</li> <li>GTFS Text-to-Speech Tester - A command-line tool that reads GTFS stop names out loud using Text-to-Speech to determine which need Text-to-Speech values for tts_stop_name in stops.txt. </li> </ul>","title":"GTFS Data Collection and Maintenance Tools"},{"location":"resources/gtfs/#gtfs-analysis-tools","text":"<ul> <li>transit_service_analyst - A Python library to support transit service analysis.</li> <li>Peartree - A Python library for converting transit data into a directed graph for network analysis.</li> <li>gtfsr - An R package for easily importing, validating, and mapping transit data that follows the General Transit Feed Specification (GTFS) format.</li> <li>R5: Rapid Realistic Routing on Real-world and Reimagined networks - A Java-based routing engine developed by Conveyal for multimodal (transit/bike/walk/car) networks. It currently plans many trips over a time window for scenario planning and analytics purposes. A related R wrapper package (r5r) is developed independently by IPEA. See also the performance comparison from Higgins et al. (2022), linked below.</li> <li>tidytransit (formerly bustt) - Reads GTFS data into tidyverse and simple features dataframes to map transit stops and routes, calculate transit frequencies, and validate transit feeds.  tidytransit is a fork of gtfsr, published to CRAN, with frequency/headway calculation functions. </li> <li>transitr - An R package for constructing and modelling a transit network in real time to obtain vehicle ETAs</li> <li>Busbuzzard - Inference of probabilistic schedules from empirical data about transit vehicles.</li> <li>ESRI ArcGIS Public Transit Tools (GTFS) - Tools for working with public transit data in ArcGIS</li> <li>GTFS-to-Chart - Creates stringline charts showing all vehicles on a transit route from GTFS data.</li> </ul>","title":"GTFS Analysis Tools"},{"location":"resources/gtfs/#gtfs-timetable-publishing-tools","text":"<ul> <li>GTFS-to-HTML - Generate human-readable timetables in HTML or PDF format directly from GTFS. </li> <li>TimeTablePublisher (TTPUB) - A web publishing system developed by TriMet that allows a transit agency to examine, modify, and transform raw scheduling data into easy-to-read timetables for customer information purposes</li> </ul>","title":"GTFS Timetable Publishing Tools"},{"location":"resources/gtfs/#gtfs-validators","text":"<ul> <li>Conveyal's gtfs-validator - A Java-based GTFS validator based on the OneBusAway GTFS Modules, runs in Java and is faster than the Google provided one.</li> <li>Conveyal's gtfs-lib - Conveyal's successor to their own gtfs-validator, a Java-based library for loading and saving GTFS feeds of arbitrary size with disk-backed storage.</li> <li>Google's feedValidator - Google-supported Python-based GTFS validator.</li> <li>GTFS Data Package Specification - A Data Package specification with validation accomplished with Good Tables. Includes a data package, schemas, tests, and uses South East Queensland GTFS data as an example.</li> <li>GTFS Meta-Validator (hosted by Omni) - A web-based GTFS validator that runs both the Google Python feedValidator and Conveyal's gtfs-validator on uploaded GTFS files.</li> <li>gtfstidy - A Go-based tool to tidy and validate GTFS feeds.</li> <li>gtfs-validator-api - This Python package is a thin wrapper around MobilityData/gtfs-validator that handles intermediate files produced and finds gtfs-validator's output file so it can be given a specific name or returned as a string.</li> <li>GTFSVTOR - An open-source GTFS validator implemented in Java licensed under GPLv3 maintained by Mecatran.</li> <li>MobilityData's gtfs-validator - A open-source GTFS validator canonically following the GTFS spec implemented in Java licensed under Apache v2.0 maintained by MobilityData.</li> <li>Reflect GTFS Validator (hosted by Foursquare ITP) - Transit schedule and GTFS validation platform by Foursquare ITP that includes a free, web-based GTFS validator based on gtfs-lib.</li> <li>Transit App's gtfs-fares-v2-validator - A Python tool that validators GTFS-Fares-v2 data based on the draft specification.</li> <li>Transport Validator - An open-source validator implemented in Rust. Used by the French National Access Point.</li> </ul>","title":"GTFS Validators"},{"location":"resources/hardware/","text":"<p>Experimental and production transit hardware.</p> <ul> <li>Bus Tracking GPS - Code for Miami prototype of a cheap open-source solution to track transit buses.</li> </ul>","title":"Hardware"},{"location":"resources/multimodal/","text":"<ul> <li>Alliance for Parking Data Standards (APDS) - Formed by the International Parking Institute (IPI), the British Parking Association (BPA), and the European Parking Association (EPA), APDS is a not-for-profit organization with the mission to develop, promote, manage, and maintain a uniform global standard that will allow organizations to share parking data across platforms worldwide.  APDS Version 1.0 documents are here.</li> <li>CurbLR - A specification for curb regulations.</li> <li>Dyno-Demand - A GTFS-based travel demand data format focusing on individual passenger demand suitable for dynamic network modeling developed by San Francisco County Transportation Authority, LMZ LLC, and UrbanLabs LLC.</li> <li>Dyno-Path - (Under development - see this post) Data for individual passenger trajectories.</li> <li>General Bikeshare Feed Specification (GBFS) - Open data standard for real-time bikeshare information developed by members of the North American Bikeshare Association (NABSA).<ul> <li>gbfs-validator - 3rd party tool to validate GBFS feeds.</li> <li>gbfs R package - Functions to interface with GBFS feeds in R, allowing users to save and accumulate tidy .rds datasets for specified cities/bikeshare programs.</li> <li>GBFS Documentation Platform - Documentation platform for the General Bikeshare Feed Specification, maintaned by MobilityData. View the GBFS specification, change proposals, policy guides, and technical tools.</li> </ul> </li> <li>GTFS-flex - A data format that models flexible public transportation services as an extension to GTFS.</li> <li>GTFS-plus - A GTFS-based transit network format for vehicle and capacity data suitable for dynamic transit modeling developed by Puget Sound Regional Council, UrbanLabs LLC, LMZ LLC, and San Francisco County Transportation Authority.</li> <li>GTFS-ride - An open, fixed-route transit ridership data standard developed through a partnership between the Oregon Department of Transportation and Oregon State University.</li> <li>GTFS-stat - An extension to a GTFS transit network with additional files that contain performance data developed by UrbanLabs LLC and San Francisco County Transportation Authority.</li> <li>General Modeling Network Specification (GMNS) - A format for sharing routable road network files designed to be used in multi-modal static and dynamic transportation planning and operations models. Volpe/FHWA partnership with Zephyr Foundation.</li> <li>General Travel Network Specification - A planned data specification for sharing travel demand model networks.</li> <li>Managed and Tolled Lanes Feed Specification (MTLFS) - Proposal for a schema that comprise the Managed and Tolled Lanes Tolling Feed Specification (MTLFS) and defines the fields used in all of those files developed by Santa Clara Valley Transportation Authority.</li> <li>Mobility as a Service API - A set of open documents and test suite that defines a MaaS-compatible API (e.g., a MaaS Transport Service Provider Booking API).</li> <li>Mobility Data Specification (MDS) - A format to implement realtime data sharing, measurement and regulation for municipalities and mobility as a service providers. It is meant to ensure that governments have the ability to enforce, evaluate and manage providers. Maintained by the Open Mobility Foundation.</li> <li>NCHRP 08-119 Developing Data Standards and Guidance for Transportation Planning and Traffic Operations - Phase 1 (Anticipated) - The objective of this research is to develop standards and/or guidance to be used and adopted by the transportation community in collecting, managing, and sharing static and real-time data for transportation planning and operations.</li> <li>NeTex - A general purpose XML format designed for the exchange of complex static transport data among distributed systems managed by the CEN standards process.</li> <li>OMX: The Open Matrix data file format - A structured collection of two-dimensional array objects and associated metadata, for possible use in the transportation modeling industry.</li> <li>Open Sales and Distribution Model (OSDM) - Aims to substantially simplify the booking process for customers of rail trips and to lower complexity and distribution costs for distributors and railway carriers. Contains a specification of an offline model and on-line API. Maintained by the International Union of Railways (UIC).</li> <li>SAE Shared and Digital Mobility Committee - Appears to be working on a data standard for car share and transportation network companies (TNCs) / rideshare.</li> <li>shared-row - A specification for right-of-way (ROW) for a SharedStreets Reference.</li> <li>TCRP G-16 Development of Transactional Data Specifications for Demand-Responsive Transportation (In progress) - The objective of this research is to develop technical specifications for transactional data for entities involved in the provision of demand-responsive transportation.  Expected completion date is late 2018.</li> <li>TIDES project -  Transit ITS Data Exchange Specification (TIDES) is a proposed effort to create standard data structures, APIs, and data management tools for historical transit ITS data including AVL, APC and AFC Data.</li> <li>Cal-ITP Operational Data Standard (ODS) -  Intended to address the lack of a standard format for representing transit schedules used by drivers, dispatchers, and planners to carry out transit operations. </li> <li>Transport Operator Mobility-as-a-service Provider (TOMP)-API - Working group in the Netherlands with a goal to develop an API for use by Transport Operators and Mobility-as-a-service Providers for operator discovery, trip planning, end user interaction, booking, and payment.</li> </ul>","title":"Other multimodal data formats"},{"location":"resources/other/","text":"<p>On-line courses, blog posts, and reports related to open transit data.</p>","title":"Other Resources"},{"location":"resources/other/#on-line-courses","text":"<ul> <li>World Bank - \"Intro. to GTFS\" online course - A free, online, self-paced course for learning about GTFS and GTFS-realtime.</li> <li>Open Transit Data Toolkit - A series of lessons to help people utilize open transit data.</li> <li>MBTA GTFS Onboarding - An interactive tutorial created by MBTA for GTFS static. A stand-alone Docker image is available on GitHub as well as a hosted/no-install version of the Jupyter notebook.</li> <li>Planetizen \"Building a Transit Map Web App\" course - A video tutorial on setting up your own web-based mapping application, with no coding experience required. </li> </ul>","title":"On-line courses"},{"location":"resources/other/#blog-posts","text":"<ul> <li>When(ish) is my bus? Data and code - The data and code (R) behind Whenish is my bus? Data includes three days of historical vehicle positions and the survey results.</li> <li>\"Legacy AVL system? It's okay, join the club.\" by Kurt Raschke - Discussion of options for transforming legacy AVL system data into the GTFS-realtime format.</li> <li>\"GTFS Best Practices now available!\" by Sean Barbeau - Discusses some of the challenges of an open data format like GTFS and the GTFS Best Practices that were launched in early 2017 to help address data quality.</li> <li>\"What's new in GTFS-realtime v2.0\" by Sean Barbeau - Discuss the shortfalls in GTFS-realtime v1.0 and the improvements in v2.0.</li> <li>\"AVL, CAD, and Real-Time Passenger Info for Beginners\" by Tony Laidig - Provides a general introduction to technology used to track vehicles.</li> <li>\"Visualizing Better Transportation: Data &amp; Tools\" by Steve Pepple - A collection of transportation-related data and tools for the San Francisco Bay Area and other cities in North America, originally collected and discussed at a 2018 Transit Week Event at ARUP in San Francisco.</li> <li>\"How to use GTFS data to track transit vehicles in realtime\" by Tom Camp - Using GTFS and GTFS Realtime to provide continuous realtime updates.</li> </ul>","title":"Blog posts"},{"location":"resources/other/#academic-papers","text":"<ul> <li>Tang et al. - \"Ridership effects of real-time bus information system: A case study in the City of Chicago\" - Experiment in Chicago, IL showed modest increase in ridership when riders had access to real-time info via text message or email.</li> <li>Kay et al. - \"When(ish) is my bus? User-centered Visualizations of Uncertainty in Everyday, Mobile Predictive Systems\" - Paper attempts to answr the question of \"how do we communicate uncertainty in transit predictions?\" Explains the problem, existing solutions and designs a better interface for letting users know when to arrive at the bus stop.</li> <li>Watkins et al. - \"Where Is My Bus? Impact of mobile real-time information on the perceived and actual wait time of transit riders\" - Experiments in Seattl,e WA showed that riders perceived shorter bus wait times when they had access to real-time info via mobile apps.</li> <li>Brakewood et al. - \u201cAn experiment evaluating the impacts of real-time transit information on bus riders in Tampa, Florida\u201d - Controlled experiment in Tampa, FL showed that riders with access to real-time info via mobile apps perceived nearly 2 minute reduction in wait times compared to riders without real-time info.  Riders with real-time info also had decreases in anxiety and frustration and better reception of agency.</li> <li>Brakewood et al. - \"The impact of real-time information on bus ridership in New York City\" - Experiment in NYC showed that ridership increased on long routes when real-time info was made available to riders.</li> <li>Brakewood and Watkins - \"A literature review of the passenger benefits of real-time transit information\" (2018) - An overview of many different research studies looking at the benefits of real-time transit information.</li> <li>Gramacki et al. - \"gtfs2vec - Learning GTFS Embeddings for comparing Public Transport Offer in Microregions\" - Methology using Uber's H3 spatial index and machine learning to identify areas of \"similar\" public transit service quality in cities. Source code available on GitHub.</li> <li>Higgins et al. - \"Calculating place-based transit accessibility: Methods, tools and algorithmic dependence\" (2022) - Compares software tools for calculating accessibility by walking and public transit including ArcGIS Pro, Emme, R5R, and OpenTripPlanner.</li> <li>Aemmer et al. - \"Measurement and classification of transit delays using GTFS-RT data\" - Presents a method for extracting transit performance metrics from a General Transit Feed Specification\u2019s Real-Time (GTFS-RT) component and aggregating them to roadway segments. Used with Transit Vis, viewable here.</li> </ul>","title":"Academic papers"},{"location":"resources/other/#government-reports","text":"<ul> <li>APTA Policy Development and Research - Public Transportation Embracing Open Data - APTA's discussion of the benefits and challenges of open transit data (a short summary of the below TCRP report).</li> <li>TCRP Synthesis 115 - Open Data: Challenges and Opportunities for Transit Agencies (2015) - A comprehensive report looking at the benefits and challenges of open transit data.</li> <li>TCRP Research Report 213: Data Sharing Guidance for Public Transit Agencies \u2013 Now and in the Future (2020) - A report designed to help agencies make decisions about sharing their data, including how to evaluate benefits, costs, and risks.</li> <li>TCRP G-16 Development of Transactional Data Specifications for Demand-Responsive Transportation (In progress) - The objective of this research is to develop technical specifications for transactional data for entities involved in the provision of demand-responsive transportation.  Expected completion date is late 2018.</li> </ul>","title":"Government reports"},{"location":"resources/other/#community-maintained-lists","text":"<ul> <li>Vendors Providing GTFS Creation/Maintenance services - Add new vendors here.</li> <li>Entities Providing Transportation Software Development Consulting Services - Add new entities here.</li> </ul>","title":"Community-maintained lists"},{"location":"resources/sdk/","text":"<ul> <li>Citymapper SDK - Allows you to add journey planning and turn-by-turn navigation for walking, cycling, scooting and transit into native iOS and Android apps.</li> </ul>","title":"SDKs"},{"location":"resources/siri/","text":"<ul> <li>SIRI API - Java classes generated from the v1.0 and v1.3 SIRI schemas.</li> <li>SIRI 2.0 API - Java classes generated from the v2.0 SIRI schemas.</li> <li>SIRI to GTFS-realtime - A Java-based command-line utility to convert from the SIRI format to GTFS-realtime.</li> <li>SIRI 2.0 Autodoc - Automatically generated documentation from the (incredibly well) annotated SIRI 2.0 Schema Definition.</li> <li>King County Metro Legacy AVL to SIRI - Java-based tool to convert King County Metro's Legacy AVL format to SIRI.</li> <li>SIRI REST Client - An open-source Android library for interacting with the RESTful SIRI interface for real-time transit data, such as that currently being used by the MTA Bus Time API.</li> <li>SIRI 1.3 POJOs (Android-compatible) - Android-compatible Plain Old Java Objects (POJOSs) used for data binding (deserliazing XML/JSON) responses for SIRI v1.3 APIs.  Used by the SIRI REST Client.</li> <li>pysiri2validator - Simple validator for SIRI 2.0 written in Python 3.</li> <li>Edwig - A golang server for real-time public transport data exchange, using the SIRI protocol.</li> </ul>","title":"SIRI"},{"location":"resources/software-for-creating-apis/","text":"<p>Software that you can set up to provide an API to transit and multimodal data.</p> <ul> <li>GraphHopper Routing Engine Open source routing engine for OpenStreetMap. Use it as Java library or server.</li> <li>gtfs-server - A web server, written in Rust that uses PostGIS as a backend to serve GTFS data via a HTTP endpoint</li> <li>hafas-rest-api \u2013 Expose a HAFAS endpoint as a REST API.</li> <li>Linked Connections - An open-source, scalable intermodal route planning engine, which allows clients to execute the route planning algorithm (as opposed to the server). Uses GTFS data.</li> <li>MOTIS - Multi Objective Travel Information System, written in C++ and Java. Can consume schedule timetables in the GTFS or HAFAS format as well as real time information in the GTFS-RT (and RISML, a propriatary format at Deutsche Bahn) as input data. For pedestrian routing (handled by Per Pedes Routing) and car routing (handled by OSRM) OpenStreetMap data is used.</li> <li>Navitia is the opensource engine behind the Navitia.io live API.</li> <li>OneBusAway - A Java app that consumes GTFS and GTFS-Realtime (along with other formats) and turns them into an easy to use REST API.</li> <li>OpenTripPlanner - An open source platform for multi-modal and multi-agency journey planning, as well as returning information about a multi-modal graph (using data sources such as GTFS and OpenStreetMap).</li> <li>pyBikes - Software powering CityBikes for worldwide bikeshare system info</li> <li>TransitClock - Java application that can consume raw vehicle positions and generate prediction times in formats such as GTFS-realtime.  Formerly known as \"Transitime\".</li> <li>TransiCast - Provides public transportation data for North America in a single, integrated call and response format. The data is provided in stream-parsable XML and JSON formats.  Open-source on Google Code.  Hosted version at www.transitcast.com requires payment.</li> </ul>","title":"Software for Creating APIs"},{"location":"resources/visualizations/","text":"<ul> <li>All Transit - Interactive GTFS route and schedule animation (for U.S. cities) using Mapbox GL JS, Deck.gl and Transitland. Github repository here.</li> <li>fastest-bus-analysis-in-the-west - A python Pandas script that combines Ridership/APC, Swiftly speed and dwell data, bus stop inventory, GTFS, and geospatial shapes to create a stop by stop, route by route, time grouping filterable dataset for cross-analyses.  The dataset is then visualized in Tableau to help VTA Planners find places to make bus and rail network faster and more reliable through speedups methods like stop consolidation and dedicated lanes.</li> <li>gtfspy-webviz - Web application for animation and visualization of GTFS data using gtfspy.</li> <li>gtfs-visualizations - Open-source NodeJS application for visualizing the routes of GTFS datasets.</li> <li>Mapnificent - Shows areas you can reach with public transport in a given time. Open-source on GitHub, live at https://www.mapnificent.net/.</li> <li>MIT COAXS - Co-creative Planning of Transit Corridors using Accessibility-Based Stakeholder Engagement (shows route scenarios using OpenTripPlanner Analyst).</li> <li>MOTIS - Intermodal Mobility Information System including visualization</li> <li>MTA Frequency - Frequency visualization of subways and buses in New York City built using Transitland.</li> <li>SEPTA Rail OTP Report - An online on-time performance reporing &amp; drill down tool using GTFS.</li> <li>TNExT - Transit Network Explorer Tool (TNExT) is a web-based software tool developed for the visualization, analysis, and reporting of regional and statewide transit networks in the state of Oregon.</li> <li>Toronto Transit Explorer - A Java application that visualizes transit, biking and walking accessibility across the city of Toronto. Live version hosted here. Uses a modified version of R5 for routing.</li> <li>Transit Vis - A visualization tool to display performance metrics derived from the King County Metro GTFS-RT feed (OneBusAway API). Viewable here. Used for this paper.</li> <li>TransitFlow Animate GTFS data around the world using Processing and Transitland.</li> <li>TRAVIC Transit Visualization Client - Visualizes vehicles moving based on static GTFS data (and sometimes realtime data). Supports over 260 cities.  Github account for geOps organization is here.</li> <li>Traze by Veridict - Visualization of public transport vehicles from all over the world. Collaborate with other users to get real-time updates even when it is not available from the agency. Based on a number of sources, including GTFS and GTFS-RT. (Previously known as Livemap24). </li> <li>Visualizing MBTA Data - Interactive graphs that show how people use Boston's subway system.</li> </ul>","title":"Visualizations"},{"location":"schedule/","text":"ReferenceBest PracticesExamplesChanges","title":"GTFS Schedule Overview"},{"location":"schedule/#getting-started","text":"<p>A GTFS feed, which contains static transit information, is composed of a number of text (.txt) files that are contained in a single ZIP file. Each file describes a particular aspect of transit information: stops, routes, trips, fares, etc. For more information about each file, consult the GTFS reference. </p> <p>In order to create a GTFS feed follow the steps below.</p> <ol> <li>Create all the required files described in the GTFS Schedule reference. Create the optional files if their functionality is desired. </li> <li>Save all files in the .txt format. Field values should be comma delimited and each line should end with a line break. See the GTFS reference for detailed information on the file contents.</li> <li>Zip all the text files together. The zipped file comprises a version of the feed.</li> <li>Publish the feed by using one of the options below. </li> </ol>","title":"Getting Started"},{"location":"schedule/#making-a-transit-feed-publicly-available","text":"<p>Datasets should be published at a public, permanent URL, including the zip file name. (e.g., www.agency.org/gtfs/gtfs.zip). Ideally, the URL should be directly downloadable without requiring login to access the file, to facilitate download by consuming software applications. While it is recommended (and the most common practice) to make a GTFS dataset openly downloadable, if a data provider does need to control access to GTFS for licensing or other reasons, it is recommended to control access to the GTFS dataset using API keys, which will facilitate automatic downloads.</p> <p>The web-server hosting GTFS data should be configured to correctly report the file modification date (see HTTP/1.1 - Request for Comments 2616, under Section 14.29).</p> <p>See \u201cBest Practices: Dataset Publishing\u201d for further recommendations.</p>","title":"Making a Transit Feed Publicly Available"},{"location":"schedule/#training","text":"<p>The World Bank Open Learning Campus (OLC) offers a self-based online course called \u201cIntroduction to the General Transit Feed Specification (GTFS) and Informal Transit System Mapping\u201d. This course includes the following sections:</p> <ul> <li>What is GTFS? History &amp; File Structure</li> <li>What is GTFS? Visualization &amp; Community</li> <li>Setting up a GTFS Feed</li> <li>Introduction to GitHub &amp; Open Source Tools</li> <li>Stories from the Field</li> <li>How to Map Transit Data</li> <li>How to Collect Data for a City\u2019s First Feed</li> <li>App Survey</li> <li>GTFS-Realtime</li> </ul> <p>See more online courses.</p>","title":"Training"},{"location":"schedule/#getting-help-community","text":"","title":"Getting Help &amp; Community"},{"location":"schedule/#mailing-lists","text":"<p>There are a number of mailing lists that can be good resources when you have questions about public transit data, software, formats like GTFS and GTFS-realtime, and other issues:</p> <ul> <li>GTFS Changes: discussion of proposal for extending the GTFS specification.</li> <li>GTFS Slack: Slack \"organization\" at with channels devoted to GTFS topics. Request an invite to gtfs.slack.com here.</li> <li>Transit Developers: general transit developer discussions. Many transit agencies also have their own developer mailing lists specific to the agency. For example:</li> <li>NYC MTA</li> <li>Portland, OR</li> <li>BART - San Francisco, CA</li> <li>MassDOT</li> <li>Atlanta, GA region</li> <li>511 San Francisco Bay Area Developer Resources</li> <li>Check with your local transit agency to see if they have a mailing list of their own.</li> </ul> <p>See more community resources.</p>","title":"Mailing Lists"},{"location":"schedule/best-practices/","text":"<p>These are recommended practices for describing public transportation services in the General Transit Feed Specification (GTFS). These practices have been synthesized from the experience of the GTFS Best Practices working group members and application-specific GTFS practice recommendations. </p> <p>For further background, see the Frequently Asked Questions.</p>","title":"GTFS Schedule Best Practices"},{"location":"schedule/best-practices/#document-structure","text":"<p>Practices are organized into four primary sections:</p> <ul> <li>Dataset Publishing &amp; General Practices: These practices relate to the overall structure of the GTFS dataset and to the manner in which GTFS datasets are published.</li> <li>Practice Recommendations Organized by File: Recommendations are organized by file and field in the GTFS to facilitate mapping practices back to the official GTFS reference.</li> <li>Practice Recommendations Organized by Case: With particular cases, such as loop routes, practices may need to be applied across several files and fields. Such recommendations are consolidated in this section.</li> </ul>","title":"Document Structure"},{"location":"schedule/best-practices/#dataset-publishing-general-practices","text":"<ul> <li>Datasets should be published at a public, permanent URL, including the zip file name. (e.g., www.agency.org/gtfs/gtfs.zip). Ideally, the URL should be directly downloadable without requiring login to access the file, to facilitate download by consuming software applications. While it is recommended (and the most common practice) to make a GTFS dataset openly downloadable, if a data provider does need to control access to GTFS for licensing or other reasons, it is recommended to control access to the GTFS dataset using API keys, which will facilitate automatic downloads.</li> <li>GTFS data is published in iterations so that a single file at a stable location always contains the latest official description of service for a transit agency (or agencies).</li> <li>Maintain persistent identifiers (id fields) for <code>stop_id</code>, <code>route_id</code>, and <code>agency_id</code> across data iterations whenever possible.</li> <li>One GTFS dataset should contain current and upcoming service (sometimes called a \u201cmerged\u201d dataset). Google transitfeed tool's merge function can be used to create a merged dataset from two different GTFS feeds.<ul> <li>At any time, the published GTFS dataset should be valid for at least the next 7 days, and ideally for as long as the operator is confident that the schedule will continue to be operated.</li> <li>If possible, the GTFS dataset should cover at least the next 30 days of service.</li> </ul> </li> <li>Remove old services (expired calendars) from the feed.</li> <li>If a service modification will go into effect in 7 days or fewer, express this service change through a GTFS-realtime feed (service advisories or trip updates) rather than static GTFS dataset.</li> <li>The web-server hosting GTFS data should be configured to correctly report the file modification date (see HTTP/1.1 - Request for Comments 2616, under Section 14.29).</li> </ul>","title":"Dataset Publishing &amp; General Practices"},{"location":"schedule/best-practices/#practice-recommendations-organized-by-file","text":"<p>This section shows practices organized by file and field, aligning with the GTFS reference.</p>","title":"Practice Recommendations Organized by File"},{"location":"schedule/best-practices/#all-files","text":"Field Name Recommendation     Mixed Case All customer-facing text strings (including stop names, route names, and headsigns) should use Mixed Case (not ALL CAPS), following local conventions for capitalization of place names on displays capable of displaying lower case characters.    Examples:    Brighton Churchill Square    Villiers-sur-Marne    Market Street   Abbreviations Avoid use of abbreviations throughout the feed for names and other text (e.g. St. for Street) unless a location is called by its abbreviated name (e.g. \u201cJFK Airport\u201d). Abbreviations may be problematic for accessibility by screen reader software and voice user interfaces. Consuming software can be engineered to reliably convert full words to abbreviations for display, but converting from abbreviations to full words is prone to more risk of error.","title":"All Files"},{"location":"schedule/best-practices/#agencytxt","text":"Field Name Recommendation     <code>agency_id</code> Should be included, even if there is only one agency in the feed. (See also recommendation to include <code>agency_id</code> in <code>routes.txt</code> and <code>fare_attributes.txt</code>)   <code>agency_phone</code> Should be included unless no such customer service phone exists.   <code>agency_email</code> Should be included unless no such customer service email exists.   <code>agency_fare_url</code> Should be included unless the agency is fully fare-free.    <p>Examples:</p> <ul> <li> <p>Bus services are run by several small bus agencies. But there is one big agency that is responsible for scheduling and ticketing and from a user\u2019s perspective responsible for the bus services.The one big agency should be defined as agency within the feed. Even if the data is split internally by different small bus operators there should only be one agency defined in the feed.</p> </li> <li> <p>The feed provider runs the ticketing portal, but there are different agencies that actually operate the services and are known by users to be responsible. The agencies actually operating the services should be defined as agencies within the feed.</p> </li> </ul>","title":"agency.txt"},{"location":"schedule/best-practices/#stopstxt","text":"Field Name Recommendation     <code>stop_name</code> When there is not a published stop name, follow consistent stop naming conventions throughout the feed.    By default, <code>stop_name</code> should not contain generic or redundant words like \u201cStation\u201d or \u201cStop\u201d, but some edge cases are allowed.<ul><li>When it is actually part of the name (Union Station, Central Station<li>When the <code>stop_name</code> is too generic (such as if it is the name of the city). \u201cStation\u201d, \u201cTerminal\u201d, or other words make the meaning clear.   <code>stop_lat</code> &amp; <code>stop_lon</code> Stop locations should be as accurate possible. Stop locations should have an error of no more than four meters when compared to the actual stop position.    Stop locations should be placed very near to the pedestrian right of way where a passenger will board (i.e. correct side of the street).    If a stop location is shared across separate data feeds (i.e. two agencies use exactly the same stop / boarding facility), indicate the stop is shared by using the exact same <code>stop_lat</code> and <code>stop_lon</code> for both stops.   <code>parent_station</code> &amp; <code>location_type</code> Many stations or terminals have multiple boarding facilities (depending on mode, they might be called a bus bay, platform, wharf, gate, or another term). In such cases, feed producers should describe stations, boarding facilities (also called child stops), and their relation. <ul><li>The station or terminal should be defined as a record in <code>stops.txt</code> with <code>location_type = 1</code>.</li><li>Each boarding facility should be defined as a stop with <code>location_type = 0</code>. The <code>parent_station</code> field should reference the <code>stop_id</code> of the station the boarding facility is in.</li></ul>    When naming the station and child stops, set names that are well-recognized by riders, and can help riders to identify the station and boarding facility (bus bay, platform, wharf, gate, etc.).Parent Station NameChild Stop NameChicago Union StationChicago Union Station Platform 19San Francisco Ferry Building TerminalSan Francisco Ferry Building Terminal Gate EDowntown Transit CenterDowntown Transit Center Bay B","title":"stops.txt"},{"location":"schedule/best-practices/#routestxt","text":"Field Name Recommendation     <code>route_short_name</code> Include <code>route_short_name</code> if there is a brief service designation. This should be the commonly-known passenger name of the service, no longer than 12 characters.   <code>route_long_name</code> The definition from Specification reference: This name is generally more descriptive than the <code>route_short_name</code> and will often include the route's destination or stop. At least one of <code>route_short_name</code> or <code>route_long_name</code> must be specified, or potentially both if appropriate. If the route does not have a long name, please specify a <code>route_short_name</code> and use an empty string as the value for this field.Examples of types of long names are below:Primary Travel Path or CorridorRoute NameFormAgency\u201cN\u201d/\u201cJudah\u201d<code>route_short_name</code>/<code>route_long_name</code>Muni, in San Francisco\u201c6\u201c/\u201cML King Jr Blvd\u201c<code>route_short_name</code>/<code>route_long_name</code>TriMet, in Portland, Or.\u201c6\u201d/\u201cNation - \u00c9toile\u201d<code>route_short_name</code>/<code>route_long_name</code>RATP, in Paris France.\u201cU2\u201d-\u201cPankow \u2013 Ruhleben\u201d<code>route_short_name</code>-<code>route_long_name</code>BVG, in Berlin, GermanyDescription of the Service\u201cHartwell Area Shuttle\u201c    <code>route_long_name</code> should not contain the <code>route_short_name</code>.    Include the full designation including a service identity when populating <code>route_long_name</code>. Examples:Service IdentityRecommendationExamples\"MAX Light Rail\"TriMet, in Portland, OregonThe <code>route_long_name</code> should include the brand (MAX) and the specific route designation\"MAX Red Line\" \"MAX Blue Line\"\"Rapid Ride\"ABQ Ride, in Albuquerque, New MexicoThe <code>route_long_name</code> should include the brand (Rapid Ride) and the specific route designation\"Rapid Ride Red Line\"\"Rapid Ride Blue Line\"   <code>route_id</code> All trips on a given named route should reference the same <code>route_id</code>. <li>Different directions of a route should not be separated into different <code>route_id</code> values.</li><li>Different spans of operation of a route should not be separated into different <code>route_id</code> values. i.e. do not create different records in <code>routes.txt</code> for \u201cDowntown AM\u201d and \u201cDowntown PM\u201d services).</li>    If a route group includes distinctly named branches (e.g. 1A and 1B), follow recommendations in the route branches case to determine <code>route_short_name</code> and <code>route_long_name</code>.   <code>route_color</code> &amp; <code>route_text_color</code> Should be consistent with signage and printed and online customer information (and thus not included if they do not exist in other places).","title":"routes.txt"},{"location":"schedule/best-practices/#tripstxt","text":"<ul> <li>See special case for loop routes: Loop routes are cases where trips start and end at the same stop, as opposed to linear routes, which have two distinct termini. Loop routes must be described following specific practices. See Loop route case.</li> <li>See special case for lasso routes: Lasso routes are a hybrid of linear and loop geometries, in which vehicles travel on a loop for only a portion of the route. Lasso routes must be described following specific practices. See Lasso route case.</li> </ul>    Field Name Recommendation     <code>trip_headsign</code> Do not provide route names (matching <code>route_short_name</code> and <code>route_long_name</code>) in the <code>trip_headsign</code> or <code>stop_headsign</code> fields.    Should contain destination, direction, and/or other trip designation text shown on the headsign of the vehicle which may be used to distinguish amongst trips in a route. Consistency with direction information shown on the vehicle is the primary and overriding goal for determining headsigns supplied in GTFS datasets. Other information should be included only if it does not compromise this primary goal. If headsigns change during a trip, override <code>trip_headsign</code> with <code>stop_times.stop_headsign</code>. Below are recommendations for some possible cases:    Route DescriptionRecommendation2A. Destination-onlyProvide the terminus destination. e.g. \"Transit Center\", \u201cPortland City Center\u201d, or \u201cJantzen Beach\u201d&gt; 2B. Destinations with waypoints&lt;destination&gt; via &lt;waypoint&gt; \u201cHighgate via Charing Cross\u201d. If waypoint(s) are removed from the headsign show to passengers after the vehicle passes those waypoints, use <code>stop_times.stop_headsign</code> to set an updated headsign.&gt; 2C. Regional placename with local stopsIf there will be multiple stops inside the city or borough of destination, use <code>stop_times.stop_headsign</code> once reaching the destination city.&gt; 2D. Direction-onlyIndicate using terms such as \u201cNorthbound\u201d, \u201cInbound\u201d, \u201cClockwise,\u201d or similar directions.&gt;2E. Direction with destination&lt;direction&gt; to &lt;terminus name&gt; e.g. \u201cSouthbound to San Jose\u201d&gt;2F. Direction with destination and waypoints&lt;direction&gt; via &lt;waypoint&gt; to &lt;destination&gt; (\u201cNorthbound via Charing Cross to Highgate\u201d).&gt;    Do not begin a headsign with the words \u201cTo\u201d or \u201cTowards\u201d.   <code>direction_id</code> Use values 0 and 1 consistently throughout the dataset. i.e.<ul><li>If 1 = Outbound on the Red route, then 1 = Outbound on the Green route</li><li>If 1 = Northbound on Route X, then 1 = Northbound on Route Y</li><li>If 1 = clockwise on Route X then 1 = clockwise on Route Y</li></ul>","title":"trips.txt"},{"location":"schedule/best-practices/#stop_timestxt","text":"<p>Loop routes: Loop routes require special <code>stop_times</code> considerations. (See: Loop route case)</p>    Field Name Recommendation     <code>pickup_type</code> &amp; <code>drop_off_type</code> Non-revenue (deadhead) trips that do not provide passenger service should be marked with <code>pickup_type</code> and <code>drop_off_type</code> value of <code>1</code> for all <code>stop_times</code> rows.    On revenue trips, internal \u201ctiming points\u201d for monitoring operational performance and other places such as garages that a passenger cannot board should be marked with <code>pickup_type = 1</code> (no pickup available) and <code>drop_off_type = 1</code> (no drop off available).   <code>arrival_time</code> &amp; <code>departure_time</code> <code>arrival_time</code> and <code>departure_time</code> fields should specify time values whenever possible, including non-binding estimated or interpolated times between timepoints.   <code>stop_headsign</code> In general, headsign values should also correspond to signs in the stations.In the cases below, \u201cSouthbound\u201d would mislead customers because it is not used in the station signs.    In NYC, for the 2 going Southbound:For <code>stop_times.txt</code> rows:Use <code>stop_headsign</code> value:Until Manhattan is Reached<code>Manhattan &amp; Brooklyn</code>Until Downtown is Reached<code>Downtown &amp; Brooklyn</code>Until Brooklyn is Reached<code>Brooklyn</code>Once Brooklyn is Reached<code>Brooklyn (New Lots Av)</code>    In Boston, for the Red Line going Southbound, for the Braintree branch:For <code>stop_times.txt</code> rows:Use <code>stop_headsign</code> value:Until Downtown is Reached<code>Inbound to Braintree</code>Once Downtown is Reached<code>Braintree</code>After Downtown<code>Outbound to Braintree</code>    <code>shape_dist_traveled</code> <code>shape_dist_traveled</code> must be provided for routes that have looping or inlining (the vehicle crosses or travels over the same portion of alignment in one trip). See the <code>shapes.shape_dist_traveled</code> recommendation.","title":"stop_times.txt"},{"location":"schedule/best-practices/#calendartxt","text":"Field Name Recommendation     All Fields Including a <code>calendar.service_name</code> field can also increase the human readability of GTFS, although this is not adopted in the spec.","title":"calendar.txt"},{"location":"schedule/best-practices/#calendar_datestxt","text":"Field Name Recommendation     All Fields Including a <code>calendar.service_name</code> field can also increase the human readability of GTFS, although this is not adopted in the spec.","title":"calendar_dates.txt"},{"location":"schedule/best-practices/#fare_attributestxt","text":"Field Name Recommendation     All Fields <code>agency_id</code> should be included in <code>fare_attributes.txt</code> if it the field is included in <code>agency.txt</code>.    If a fare system cannot be accurately modeled, avoid further confusion and leave it blank.    Include fares (<code>fare_attributes.txt</code> and <code>fare_rules.txt</code>) and model them as accurately as possible. In edge cases where fares cannot be accurately modeled, the fare should be represented as more expensive rather than less expensive so customers will not attempt to board with insufficient fare. If the vast majority of fares cannot be modeled correctly, do not include fare information in the feed.","title":"fare_attributes.txt"},{"location":"schedule/best-practices/#fare_rulestxt","text":"Field Name Recommendation     All Fields If a fare system cannot be accurately modeled, avoid further confusion and leave it blank.    Include fares (<code>fare_attributes.txt</code> and <code>fare_rules.txt</code>) and model them as accurately as possible. In edge cases where fares cannot be accurately modeled, the fare should be represented as more expensive rather than less expensive so customers will not attempt to board with insufficient fare. If the vast majority of fares cannot be modeled correctly, do not include fare information in the feed.","title":"fare_rules.txt"},{"location":"schedule/best-practices/#shapestxt","text":"Field Name Recommendation     All Fields Ideally, for alignments that are shared (i.e. in a case where Routes 1 and 2 operate on the same segment of roadway or track) then the shared portion of alignment should match exactly. This helps to facilitate high-quality transit cartography.     Alignments should follow the centerline of the right of way on which the vehicle travels. This could be either the centerline of the street if there are no designated lanes, or the centerline of the side of the roadway that travels in the direction the vehicle moves. Alignments should not \u201cjag\u201d to a curb stop, platform, or boarding location.   <code>shape_dist_traveled</code> Must be provided in both <code>shapes.txt</code> and <code>stop_times.txt</code> if an alignment includes looping or inlining (the vehicle crosses or travels over the same portion of alignment in one trip). If a vehicle retraces or crosses the route alignment at points in the course of a trip, <code>shape_dist_traveled</code> is important to clarify how portions of the points in <code>shapes.txt</code> line up correspond with records in <code>stop_times.txt</code>.    The <code>shape_dist_traveled</code> field allows the agency to specify exactly how the stops in the <code>stop_times.txt</code> file fit into their respective shape. A common value to use for the <code>shape_dist_traveled</code> field is the distance from the beginning of the shape as traveled by the vehicle (think something like an odometer reading). <li>Route alignments (in <code>shapes.txt</code>) should be within 100 meters of stop locations which a trip serves.</li><li>Simplify alignments so that <code>shapes.txt</code> does not contain extraneous points (i.e. remove extra points on straight-line segments; see discussion of line simplification problem).</li>","title":"shapes.txt"},{"location":"schedule/best-practices/#frequenciestxt","text":"Field Name Recommendation     All Fields Actual stop times are ignored for trips referenced by <code>frequencies.txt</code>; only travel time intervals between stops are significant for frequency-based trips. For clarity/human readability, it is recommended that the first stop time of a trip referenced in <code>frequencies.txt</code> should begin at 00:00:00 (first <code>arrival_time</code> value of 00:00:00).   <code>block_id</code> Can be provided for frequency-based trips.","title":"frequencies.txt"},{"location":"schedule/best-practices/#transferstxt","text":"<p><code>transfers.transfer_type</code> can be one of four values defined in the GTFS. These <code>transfer_type</code> definitions are quoted from the GTFS Specification below, in italics, with additional practice recommendations.</p>    Field Name Recommendation     <code>transfer_type</code> 0 or (empty): This is a recommended transfer point between routes.If there are multiple transfer opportunities that include a superior option (i.e. a transit center with additional amenities or a station with adjacent or connected boarding facilities/platforms), specify a recommended transfer point.    1: This is a timed transfer point between two routes. The departing vehicle is expected to wait for the arriving one, with sufficient time for a passenger to transfer between routes.This transfer type overrides a required interval to reliably make transfers.  As an example, Google Maps assumes that passengers need 3 minutes to safely make a transfer. Other applications may assume other defaults.    2: This transfer requires a minimum amount of time between arrival and departure to ensure a connection. The time required to transfer is specified by <code>min_transfer_time</code>.Specify minimum transfer time if there are obstructions or other factors which increase the time to travel between stops.    3: Transfers are not possible between routes at this location.Specify this value if transfers are not possible because of physical barriers, or if they are made unsafe or complicated by difficult road crossings or gaps in the pedestrian network.    If in-seat (block) transfers are allowed between trips, then the last stop of the arriving trip must be the same as the first stop of the departing trip.","title":"transfers.txt"},{"location":"schedule/best-practices/#feed_infotxt","text":"<p><code>feed_info.txt</code> should be included, with all fields below.</p>    Field Name Recommendation     <code>feed_start_date</code> &amp; <code>feed_end_date</code> Should be included   <code>feed_version</code> Should be included   <code>feed_contact_email</code> &amp; <code>feed_contact_url</code> Provide at least one","title":"feed_info.txt"},{"location":"schedule/best-practices/#practice-recommendations-organized-by-case","text":"<p>This section covers particular cases with implications across files and fields.</p>","title":"Practice Recommendations Organized by Case"},{"location":"schedule/best-practices/#loop-routes","text":"<p>On loop routes, vehicles\u2019 trips begin and end at the same location (sometimes a transit or transfer center). Vehicles usually operate continuously and allow passengers to stay onboard as the vehicle continues its loop.</p> <p></p> <p>Headsigns recommendations should therefore be applied in order to show riders the direction in which the vehicle is going.</p> <p>To indicate the changing direction of travel, provide <code>stop_headsigns</code> in the <code>stop_times.txt</code> file. The <code>stop_headsign</code> describes the direction for trips departing from the stop for which it's defined. Adding <code>stop_headsigns</code> to each stop of a trip allows you to change the headsign information along a trip.</p> <p>Don\u2019t define one single circular trip in the stop_times.txt file for a route that operates between two endpoints (such as when the same bus goes back and forth). Instead, split the trip into two separate trip directions.</p> <p>Examples of circular trip modeling:</p> <ul> <li>Circular trip with changing headsign for each stop</li> </ul>    trip_id arrival_time departure_time stop_id stop_sequence stop_headsign     trip_1 06:10:00 06:10:00 stop_A 1 \"B\"   trip_1 06:15:00 06:15:00 stop_B 2 \"C\"   trip_1 06:20:00 06:20:00 stop_C 3 \"D\"   trip_1 06:25:00 06:25:00 stop_D 4 \"E\"   trip_1 06:30:00 06:30:00 stop_E 5 \"A\"   trip_1 06:35:00 06:35:00 stop_A 6 \"\"    <ul> <li>Circular trip with two headsigns</li> </ul>    trip_id arrival_time departure_time stop_id stop_sequence stop_headsign     trip_1 06:10:00 06:10:00 stop_A 1 \"outbound\"   trip_1 06:15:00 06:15:00 stop_B 2 \"outbound\"   trip_1 06:20:00 06:20:00 stop_C 3 \"outbound\"   trip_1 06:25:00 06:25:00 stop_D 4 \"inbound\"   trip_1 06:30:00 06:30:00 stop_E 5 \"inbound\"   trip_1 06:35:00 06:35:00 stop_F 6 \"inbound\"   trip_1 06:40:00 06:40:00 stop_A 7 \"\"       Field Name Recommendation     <code>trips.trip_id</code> Model the complete round-trip for the loop with a single trip.   <code>stop_times.stop_id</code> Include the first/last stop twice in <code>stop_times.txt</code> for the trip that is a loop. Example below. Often, a loop route may include first and last trips that do not travel the entire loop. Include these trips as well. <code>trip_id</code><code>stop_id</code><code>stop_sequence</code>90001011900010229000103390001014   <code>trips.direction_id</code> If loop operates in opposite directions (i.e. clockwise and counterclockwise), then designate <code>direction_id</code> as <code>0</code> or <code>1</code>.   <code>trips.block_id</code> Indicate continuous loop trips with the same <code>block_id</code>.","title":"Loop Routes"},{"location":"schedule/best-practices/#lasso-routes","text":"<p>Lasso routes combine aspects of a loop route and directional route.</p> <p></p>    Examples:     Subway Routes (Chicago)   Bus Suburb to Downtown Routes (St. Albert or Edmonton)   CTA Brown Line (CTA Website and TransitFeeds)       Field Name Recommendation     <code>trips.trip_id</code> The full extent of a \u201cvehicle round-trip\u201d (see illustration above) consists of travel from A to B to B and back to A. An entire vehicle round-trip may be expressed by: <li>A single <code>trip_id</code> value/record in <code>trips.txt</code></li><li>Multiple <code>trip_id</code> values/records in <code>trips.txt</code>, with continuous travel indicated by <code>block_id</code>.</li>   <code>stop_times.stop_headsign</code> The stops along the A-B section will be passed through in both directions. <code>stop_headsign</code> facilitates distinguishing travel direction. Therefore, providing <code>stop_headsign</code> is recommended for these trips.example_table:  Examples:\"A via B\"\"A\"Chicago Transit Authority's Purple Line\"Southbound to Loop\"\"Northbound via Loop\"\"Northbound to Linden\"Edmonton Transit Service Bus Lines, here the 39\"Rutherford\"\"Century Park\"   <code>trip.trip_headsign</code> The trip headsign should be a global description of the trip, like displayed in the schedules. Could be \u201cLinden to Linden via Loop\u201d (Chicago example), or \u201cA to A via B\u201d (generic example).","title":"Lasso Routes"},{"location":"schedule/best-practices/#branches","text":"<p>Some routes may include branches. Alignment and stops are shared amongst these branches, but each also serves distinct stops and alignment sections. The relationship among branches may be indicated by route name(s), headsigns, and trip short name using the further guidelines below.</p> <p></p>    Field Name Recommendation     All Fields In naming branch routes, it is recommended to follow other passenger information materials. Below are descriptions and examples of two cases:    If timetables and on-street signage represent two distinctly named routes (e.g. 1A and 1B), then present this as such in the GTFS, using the <code>route_short_name</code> and/or <code>route_long_name</code> fields. Example: GoDurham Transit routes 2, 2A, and 2B share a common alignment throughout the majority of the route, but they vary in several different aspects. <ul><li>Route 2 is core service, running most hours.</li><li>Route 2 includes a deviation on Main Street nights, Sundays, and holidays.</li><li>Routes 2A and 2B operate daytime hours Monday through Saturday.</li><li>Route 2B serves additional stops in a deviation of the shared alignment path.</li></ul>    If agency-provided information describes branches as the same named route, then utilize the <code>trips.trip_headsign</code>, <code>stop_times.stop_headsign</code>, and/or <code>trips.trip_short_name</code> fields. Example: GoTriangle route 300 travels to different locations depending on the time of day. During peak commuter hours extra legs are added onto the standard route to accommodate workers entering and leaving the city.","title":"Branches"},{"location":"schedule/best-practices/#frequently-asked-questions-faq","text":"","title":"Frequently Asked Questions (FAQ)"},{"location":"schedule/best-practices/#why-are-these-gtfs-best-practices-important","text":"<p>The objectives of GTFS Best Practices are:</p> <ul> <li>To improve end-user customer experience in public transportation apps</li> <li>Support broad data interoperability to make it easier for software developers to deploy and scale applications, products, and services</li> <li>Facilitate the use of GTFS in various application categories (beyond its original focus on trip planning)</li> </ul> <p>Without coordinated GTFS Best Practices, various GTFS-consuming applications may establish requirements and expectations in an uncoordinated way, which leads to diverging requirements and application-specific datasets and less interoperability. Prior to the release of the Best Practices, there was greater ambiguity and disagreement in what constitutes correctly-formed GTFS data.</p>","title":"Why are these GTFS Best Practices important?"},{"location":"schedule/best-practices/#how-were-they-developed-who-developed-them","text":"<p>These Best Practices were developed by a working group of 17 organizations involved in GTFS, including app providers &amp; data consumers, transit providers, and consultants with extensive involvement in GTFS. The working group was convened and facilitated by Rocky Mountain Institute.</p> <p>Working Group members voted on each Best Practice. Most Best Practices were approved by a unanimous vote. In a minority of cases, Best Practices were approved a large majority of organizations.</p>","title":"How were they developed? Who developed them?"},{"location":"schedule/best-practices/#why-not-just-change-the-gtfs-reference","text":"<p>Good question! The process of examining the Specification, data usage and needs did indeed trigger some changes to the Specification (see closed pull requests in GitHub). Specification reference amendments are subject to a higher bar of scrutiny and comment than the Best Practices. However, there was still need to agree on a clear set of Best Practice recommendations.</p> <p>The working group anticipates that some GTFS Best Practices will eventually become part of the core GTFS reference.</p>","title":"Why not just change the GTFS reference?"},{"location":"schedule/best-practices/#do-gtfs-validator-tools-check-for-conformance-with-these-best-practices","text":"<p>No validator tool currently checks for conformance with all Best Practices. Various validator tools check for conformance with some of these best practices. For a list of GTFS validator tools, see GTFS Validators. If you write a GTFS validator tool that references these Best Practices, please email specifications@mobilitydata.org.</p>","title":"Do GTFS validator tools check for conformance with these Best Practices?"},{"location":"schedule/best-practices/#i-represent-a-transit-agency-what-steps-can-i-take-so-that-our-software-service-providers-and-vendors-follow-these-best-practices","text":"<p>Refer your vendor or software service provider to these Best Practices. We recommend referencing the GTFS Best Practices URL, as well as core Spec Reference in procurement for GTFS-producing software.</p>","title":"I represent a transit agency. What steps can I take so that our software service providers and vendors follow these Best Practices?"},{"location":"schedule/best-practices/#what-should-i-do-if-i-notice-a-gtfs-data-feed-does-not-conform-to-these-best-practices","text":"<p>Identify the contact for the feed, using the proposed feed_contact_email or feed_contact_url fields in feed_info.txt if they exist, or looking up contact information on the transit agency or feed producer website. When communicating the issue to the feed producer, link to the specific GTFS Best Practice under discussion. (See \"Linking to this Document\").</p>","title":"What should I do if I notice a GTFS data feed does not conform to these Best Practices?"},{"location":"schedule/best-practices/#i-would-like-to-propose-a-modificationaddition-to-the-best-practices-how-do-i-do-this","text":"<p>Email specifications@mobilitydata.org or open an issue or pull request in the GitHub GTFS Best Practices repo.</p>","title":"I would like to propose a modification/addition to the Best Practices. How do I do this?"},{"location":"schedule/best-practices/#how-do-i-get-involved","text":"<p>Email specifications@mobilitydata.org.</p>","title":"How do I get involved?"},{"location":"schedule/best-practices/#about-this-document","text":"","title":"About This Document"},{"location":"schedule/best-practices/#objectives","text":"<p>The objectives of maintaining GTFS Best Practices is to:</p> <ul> <li>Support greater interoperability of transit data</li> <li>Improve end-user customer experience in public transportation apps</li> <li>Make it easier for software developers to deploy and scale applications, products, and services</li> <li>Facilitate the use of GTFS in various application categories (beyond its original focus on trip planning)</li> </ul>","title":"Objectives"},{"location":"schedule/best-practices/#how-to-propose-or-amend-published-gtfs-best-practices","text":"<p>GTFS applications and practice evolve, and so this document may need to be amended from time to time. To propose an amendment to this document, open a pull request in the GTFS Best Practices GitHub repository and advocate for the change. You can slo email any comments to specifications@mobilitydata.org.</p>","title":"How to propose or amend published GTFS Best Practices"},{"location":"schedule/best-practices/#linking-to-this-document","text":"<p>Please link here in order to provide feed producers with guidance for correct formation of GTFS data. Each individual recommendation has an anchor link. Click the recommendation to get the URL for the in-page anchor link.</p> <p>If a GTFS-consuming application makes requirements or recommendations for GTFS data practices that are not described here, it is recommended to publish a document with those requirements or recommendations to supplement these common best practices.</p>","title":"Linking to This Document"},{"location":"schedule/best-practices/#gtfs-best-practices-working-group","text":"<p>The GTFS Best Practices Working Group was convened by Rocky Mountain Institute in 2016-17, consisting of public transportation providers, developers of GTFS-consuming applications, consultants, and academic organizations to define common practices and expectations for GTFS data.  Members of this working group included:</p> <ul> <li>Cambridge Systematics</li> <li>Capital Metro</li> <li>Center for Urban Transportation Research at University of South Florida</li> <li>Conveyal</li> <li>Google</li> <li>IBI Group</li> <li>Mapzen</li> <li>Microsoft</li> <li>Moovel</li> <li>Oregon Department of Transportation</li> <li>Swiftly</li> <li>Transit</li> <li>Trillium</li> <li>TriMet</li> <li>World Bank</li> </ul> <p>Today, this document is maintained by MobilityData.</p>","title":"GTFS Best Practices Working Group"},{"location":"schedule/data-examples/","text":"","title":"Data Examples"},{"location":"schedule/data-examples/#introduction","text":"<p>These GTFS Data Examples are meant to ease comprehension of the GTFS specification and its different extensions. They provide data samples based on real-life transit systems throughout the world. These examples have been generated by MobilityData in order to facilitate both production and consumption of GTFS data by anyone.</p>","title":"Introduction"},{"location":"schedule/data-examples/#gtfs-continuousstops","text":"","title":"GTFS-ContinuousStops"},{"location":"schedule/data-examples/#example-a-pickup-and-drop-off-everywhere","text":"<p>[Source: pdf schedules available at https://crtransit.org/bus-schedules/]</p> <p>The transit agency The Current (Rockingham, US-VT) applies a continuous-stop policy on the routes 2, 53, and 55. A rider may request to be picked up and dropped off between scheduled stops all along the route, as soon as there is a safe place for the bus to stop.</p> <p>Using GTFS-ContinuousStops, the data would be:</p> <p>File routes.txt</p> <pre><code>route_id,route_short_name,route_long_name,route_type,continuous_pickup,continuous_drop_off\n2,2,Bellows Falls In-Town,3,0,0\n53,53,Bellows Falls / Battleboro Commuter,3,0,0\n55,55,Bellows Falls / Springfield Shuttle,3,0,0\n</code></pre> <p>If the transit agency wants to emphasize that a coordination between the bus driver and the rider must occur, such as hand waving for being picked up or asking the bus driver for being dropped off, the data would be:</p> <p>File routes.txt</p> <pre><code>route_id,route_short_name,route_long_name,route_type,continuous_pickup,continuous_drop_off\n2,2,Bellows Falls In-Town,3,3,3\n53,53,Bellows Falls / Battleboro Commuter,3,3,3\n55,55,Bellows Falls / Springfield Shuttle,3,3,3\n</code></pre>","title":"Example A - Pickup and drop-off everywhere!"},{"location":"schedule/data-examples/#example-b-continuous-pickup-and-drop-off-on-a-route-section","text":"<p>[Source: pdf schedules available at https://vvta.org/routes/route-22/]</p> <p>The transit agency Victor Valley Transit (Victorville, US-CA) applies a continuous-stop policy only on a part of route 22. A rider may board and get off the bus in any safe location within the County Fare zone. This behavior is not allowed within the Local Fare zone. On northbound trips, the bus 22 starts in the Local Fare zone at Victorville Transfer Center (A) and ends in the County Fare zone at Silver Lakes Market (F).</p> <p></p>","title":"Example B - Continuous pickup and drop-off on a route section"},{"location":"schedule/data-examples/#example-b1-continuous-pickup-and-drop-off-starting-from-a-scheduled-stop","text":"<p><code>National Trails Highway - Air Expressway</code> is the first scheduled stop in the County Fare zone, from which the continuous pickup and drop-off is available.</p> <p>Using GTFS-ContinuousStops, the data would be:</p> <p>File stops.txt</p> <pre><code>stop_id,stop_name,stop_lat,stop_lon\nA,Victoriaville Transfer Station,34.514356,-117.318323\nB,Dante St &amp; Venus Ave,34.564499,-117.287097\nC,Victorville Transportation Center,34.538433,-117.294703\nD,National Trails Highway - Air Expressway,34.567536,-117.319716\nE,Oro Grande Post Office,34.599292,-117.334452\nF,Silver Lakes Market,34.744662,-117.335407\n</code></pre> <p>File stop_times.txt</p> <pre><code>trip_id,stop_id,stop_sequence,departure_time,arrival_time,continuous_pickup,continuous_drop_off\n22NB9AM,A,1,09:00:00,09:00:00,1,1\n22NB9AM,B,1,09:14:00,09:14:00,1,1\n22NB9AM,C,1,09:21:00,09:21:00,1,1\n22NB9AM,D,1,09:25:00,09:25:00,0,0\n22NB9AM,E,1,09:31:00,09:31:00,0,0\n22NB9AM,F,1,09:46:00,09:46:00,0,0\n</code></pre>","title":"Example B1:  Continuous pickup and drop-off starting from a scheduled stop"},{"location":"schedule/data-examples/#example-b2-continuous-pickup-and-drop-off-starting-between-2-scheduled-stops","text":"<p>Victor Valley Transit defines the boundary between the Local Fare zone and the County Fare zone as the road Air Expressway. The scheduled stop <code>National Trails Highway - Air Expressway</code> is located slightly north of this boundary. To be accurate, the transit agency can add a stop at the actual intersection of the bus route with the boundary, from which the continuous pickup and drop-off is available. This stop may remain unscheduled.</p> <p>Using GTFS-ContinuousStops and timepoints for adding an unscheduled stop, the data would be:</p> <p>File stops.txt</p> <pre><code>stop_id,stop_name,stop_lat,stop_lon\nA,Victoriaville Transfer Station,34.514356,-117.318323\nB,Dante St &amp; Venus Ave,34.564499,-117.287097\nC,Victorville Transportation Center,34.538433,-117.294703\nX,Local/County Fare Boundary,34.566224,-117.318357\nD,National Trails Highway - Air Expressway,34.567536,-117.319716\nE,Oro Grande Post Office,34.599292,-117.334452\nF,Silver Lakes Market,34.744662,-117.335407\n</code></pre> <p>File stop_times.txt</p> <pre><code>trip_id,stop_id,stop_sequence,departure_time,arrival_time,continuous_pickup,continuouse_drop_off,timepoint\n22NB9AM,A,1,09:00:00,09:00:00,1,1,1\n22NB9AM,B,1,09:14:00,09:14:00,1,1,1\n22NB9AM,C,1,09:21:00,09:21:00,1,1,1\n22NB9AM,X,1,,,0,0,0\n22NB9AM,D,1,09:25:00,09:25:00,0,0,1\n22NB9AM,E,1,09:31:00,09:31:00,0,0,1\n22NB9AM,F,1,09:46:00,09:46:00,0,0,1\n</code></pre>","title":"Example B2:  Continuous pickup and drop-off starting between 2 scheduled stops"},{"location":"schedule/example-feed/","text":"<p>This example GTFS feed shows comma-delimited data samples for each file in a transit feed. The sample data files shown here aren't all related to each other. You can also download a complete GTFS feed in final form to work with as well, or browse the individual files of that same feed online here.</p>","title":"Example GTFS Feed"},{"location":"schedule/example-feed/#agencytxt","text":"<pre><code>agency_id,agency_name,agency_url,agency_timezone,agency_phone,agency_lang\nFunBus,The Fun Bus,https://www.thefunbus.org,America/Los_Angeles,(310) 555-0222,en\n</code></pre> <pre><code>agency_id,agency_name,agency_url,agency_timezone,agency_lang\nagency001,Transit Agency,https://www.transitcommuterbus.com/,PST,en\n[...]\n</code></pre>","title":"agency.txt"},{"location":"schedule/example-feed/#stopstxt","text":"<p><pre><code>stop_id,level_id,stop_name,stop_lat,stop_lon,location_type,parent_station\nF12,,5 Av/53 St,40.760167,-73.975224,1,\nE1,L0,5 Av/53 St SW,40.760474,-73.976099,2,F12\nE2,L0,5 Av/53 St NE,40.76035,-73.97546,2,F12\nE3,L0,5 Av/53 St SE,40.760212,-73.975512,2,F12\nE4,L0,Madison/53 St NE,40.759612,-73.973731,2,F12\nE5,L0,Madison/53 St SE,40.759491,-73.973820,2,F12\nN1,L1,,,40.760457,-73.975912,3,F12\nN2,L1,,40.760531,-73.976111,3,F12\nN3,L1,,40.759746,-73.974203,3,F12\nN4,L1,,40.759679,-73.974064,3,F12\nF12S,,5 Av/53 St,40.760167,-73.975224,0,F12\nB1,L2,,40.759746,-73.974203,4,F12S\nB3,L2,,40.759828,-73.974442,4,F12S\nF12N,,5 Av/53 St,40.760167,-73.975224,0,F12\nB2,L3,,40.760457,-73.975912,4,F12N\nB4,L3,,40.760375,-73.975729,4,F12N \n</code></pre> <code>location_type=</code> 0: platform; 1: station; 2: entrance/exit; 3: generic node; 4: boarding area.</p>","title":"stops.txt"},{"location":"schedule/example-feed/#routestxt","text":"<pre><code>route_id,route_short_name,route_long_name,route_desc,route_type\nA,17,Mission,\"The \"\"A\"\" route travels from lower Mission to Downtown.\",3\n</code></pre>","title":"routes.txt"},{"location":"schedule/example-feed/#tripstxt","text":"<pre><code>route_id,service_id,trip_id,trip_headsign,block_id\nA,WE,AWE1,Downtown,1\nA,WE,AWE2,Downtown,2\n</code></pre>","title":"trips.txt"},{"location":"schedule/example-feed/#stop_timestxt","text":"<pre><code>trip_id,arrival_time,departure_time,stop_id,stop_sequence,pickup_type,drop_off_type\nAWE1,0:06:10,0:06:10,S1,1,0,0\nAWE1,,,S2,2,1,3\nAWE1,0:06:20,0:06:30,S3,3,0,0\nAWE1,,,S5,4,0,0\nAWE1,0:06:45,0:06:45,S6,5,0,0\nAWD1,0:06:10,0:06:10,S1,1,0,0\nAWD1,,,S2,2,0,0\nAWD1,0:06:20,0:06:20,S3,3,0,0\nAWD1,,,S4,4,0,0\nAWD1,,,S5,5,0,0\nAWD1,0:06:45,0:06:45,S6,6,0,0\n</code></pre>","title":"stop_times.txt"},{"location":"schedule/example-feed/#calendartxt","text":"<pre><code>service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date\nWE,0,0,0,0,0,1,1,20060701,20060731\nWD,1,1,1,1,1,0,0,20060701,20060731\n</code></pre>","title":"calendar.txt"},{"location":"schedule/example-feed/#calendar_datestxt","text":"<p>This example shows service exceptions for the Independence Day holiday in 2006. On Monday July 3, 2006, regular weekday service (<code>service_id=WD</code>) is interrupted (<code>exception_type=2</code>). Instead, weekend service (<code>service_id=WE</code>) runs on that date (<code>exception_type=1</code>). The same change applies on Tuesday July 4, as well.</p> <pre><code>service_id,date,exception_type\nWD,20060703,2\nWE,20060703,1\nWD,20060704,2\nWE,20060704,1\n</code></pre>","title":"calendar_dates.txt"},{"location":"schedule/example-feed/#fare_attributestxt","text":"<pre><code>fare_id,price,currency_type,payment_method,transfers,transfer_duration\n1,0.00,USD,0,0,0\n2,0.50,USD,0,0,0\n3,1.50,USD,0,0,0\n4,2.00,USD,0,0,0\n5,2.50,USD,0,0,0\n</code></pre>","title":"fare_attributes.txt"},{"location":"schedule/example-feed/#fare_rulestxt","text":"<pre><code>fare_id,route_id,origin_id,destination_id,contains_id\na,TSW,1,1,\na,TSE,1,1,\na,GRT,1,1,\na,GRJ,1,1,\na,SVJ,1,1,\na,JSV,1,1,\na,GRT,2,4,\na,GRJ,4,2,\nb,GRT,3,3,\nc,GRT,,,6\n</code></pre>","title":"fare_rules.txt"},{"location":"schedule/example-feed/#shapestxt","text":"<pre><code>shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence,shape_dist_traveled\nA_shp,37.61956,-122.48161,1,0\nA_shp,37.64430,-122.41070,2,6.8310\nA_shp,37.65863,-122.30839,3,15.8765\n</code></pre>","title":"shapes.txt"},{"location":"schedule/example-feed/#frequenciestxt","text":"<pre><code>trip_id,start_time,end_time,headway_secs\nAWE1,05:30:00,06:30:00,300\nAWE1,06:30:00,20:30:00,180\nAWE1,20:30:00,28:00:00,420\n</code></pre>","title":"frequencies.txt"},{"location":"schedule/example-feed/#transferstxt","text":"<pre><code>from_stop_id,to_stop_id,transfer_type,min_transfer_time\nS6,S7,2,300\nS7,S6,3,\nS23,S7,1,\n</code></pre>","title":"transfers.txt"},{"location":"schedule/example-feed/#pathwaystxt","text":"<pre><code>pathway_id,from_stop_id,to_stop_id,pathway_mode,is_bidirectional\nE1N1,E1,N1,2,1\nE2N1,E2,N1,2,1\nE3N1,E3,N1,2,1\nN1-N2,N1,N2,6,1\nN2-N1,N2,N1,7,1\nN2N3,N2,N3,2,1\nN2-B1,N2,B1,4,0\nB1-N2,B1,N2,4,0\nB1B2,B1,B2,2,1\n\nB1B3,B1,B3,1,1\nB2B4,B2,B4,1,1\n\nE4N3,E4,N3,2,1\nE5N3,E5,N3,2,1\nN3-N4,N3,N4,6,1\nN4-N3,N4,N3,7,1\nN4B3,N4,B3,2,1\nN4-B3,N4,B3,4,0\nB3-N4,B3,N4,4,0\nB3B4,B3,B4,2,1\n</code></pre>","title":"pathways.txt"},{"location":"schedule/example-feed/#levelstxt","text":"<pre><code>level_id,level_index,level_name,elevation\nL0,0,Street,0\nL1,-1,Mezzanine,-6\nL2,-2,Southbound,-18\nL3,-3,Northbound,-24\n</code></pre>","title":"levels.txt"},{"location":"schedule/example-feed/#translationstxt","text":"<pre><code>table_name,field_name,language,translation,record_id\nstops,stop_name,en,Tokyo Station,stopid000001\nstops,stop_name,fr,Gare de Tokyo,stopid000001\nstops,stop_name,zh,\u6771\u4eac\u7ad9,stopid000001\n</code></pre>","title":"translations.txt"},{"location":"schedule/example-feed/#attributionstxt","text":"<pre><code>attribution_id,is_producer,is_operator,organization_name,agency_id\nattribution001,1,0,Transit Feed Solutions USA,agency001\nattribution002,0,1,Transit Bus Operations USA ,agency001\n[...]\n</code></pre>","title":"attributions.txt"},{"location":"schedule/guiding-principles/","text":"<p>In order to preserve the original vision of GTFS, a number of guiding principles have been established to take into consideration when extending the spec:</p> <p>Feeds should be easy to create and edit We chose CSV as the basis for the specification because it's easy to view and edit using spreadsheet programs and text editors, which is helpful for smaller agencies. It's also straightforward to generate from most programming languages and databases, which is good for publishers of larger feeds.</p> <p>Feeds should be easy to parse Feed readers should be able to extract the information they're looking for with as little work as possible. Changes and additions to the feed should be as broadly useful as possible, to minimize the number of code paths that readers of the feed need to implement. (However, making creation easier should be given precedence, since there will ultimately be more feed publishers than feed readers.)</p> <p>The spec is about passenger information GTFS is primarily concerned with passenger information. That is, the spec should include information that can help power tools for riders, first and foremost. There is potentially a large amount of operations-oriented information that transit agencies might want to transmit internally between systems. GTFS is not intended for that purpose and there are potentially other operations-oriented data-standards that may be more appropriate.</p> <p>Changes to the spec should be backwards-compatible When adding features to the specification, we want to avoid making changes that will make existing feeds invalid. We don't want to create more work for existing feed publishers until they want to add capabilities to their feeds. Also, whenever possible, we want existing parsers to be able to continue to read the older parts of newer feeds.</p> <p>Speculative features are discouraged Every new feature adds complexity to the creation and reading of feeds. Therefore, we want to take care to only add features that we know to be useful. Ideally, any proposal will have been tested by generating data for a real transit system that uses the new feature and writing software to read and display it. Note that the GTFS readily allows for extensions to the format through the addition of extra columns and files that are ignored by the official parsers &amp; validators, so proposals can be easily prototyped and tested on existing feeds.</p>","title":"Guiding Principles"},{"location":"schedule/process/","text":"<p>The official specification, reference and documentation are written in English. If a translation to a different language differs from the English original, the latter takes precedence. All communication is performed in English.</p> <ol> <li>Create a git branch with update of all relevant parts of protocol definition, specification and documentation files (except for translations).</li> <li>Create pull request on https://github.com/google/transit. Pull request must contain an extended description of the patch. The creator of the pull request becomes the advocate.</li> <li>Once pull request is registered, it must be announced by its advocate in the GTFS Changes mailing list, including a link to the pull request. Once announced, the pull request is considered a proposal.  The pull request should also be edited to contain a link to the Google Groups announcement so they can easily be cross-referenced.<ul> <li>Since the advocate is a contributor, they must sign the Contributor License Agreement before pull request can be accepted.</li> </ul> </li> <li>The discussion of the proposal follows. Pull request comments should be used as the sole discussion forum.<ul> <li>The discussion lasts for as long as the advocate feels necessary, but must be at least 7 calendar days.</li> <li>The advocate is responsible for timely update of the proposal (i.e. pull request) based on the comments for which they agree to.</li> <li>At any point in time the advocate can claim proposal abandoned.</li> </ul> </li> <li>The advocate can call for a vote on a version of the proposal at any point in time following the initial 7-day interval required for discussion.<ul> <li>Before calling for a vote, at least one GTFS producer and one GTFS consumer should implement the proposed change.  It is expected that the GTFS producer(s) include the change in a public-facing GTFS feed and provide a link to that data within the pull request comments, and that the GTFS consumer(s) provides a link in the pull request comments to an application that is utilizing the change in a non-trivial manner (i.e, it is supporting new or improved functionality).</li> </ul> </li> <li>Vote lasts the minimum period sufficient to cover 7 full calendar days and 5 full Swiss business days. Vote ends at 23:59:59 UTC.<ul> <li>The advocate should announce the specific end time at the start of the vote.</li> <li>During voting period only editorial changes to the proposal are allowed (typos, wording may change as long as it does not change the meaning).</li> <li>Anyone is allowed to vote yes/no in a form of comment to the pull request, and votes can be changed until the end of the voting period. If a voter changes her vote, it is recommended to do it by updating the original vote comment by striking through the vote and writing the new vote.</li> <li>Votes before the start of the voting period are not considered.</li> <li>Opening and closing of votes must be announced on the GTFS Changes mailing list.</li> </ul> </li> <li>The proposal is accepted if there is a unanimous consensus yes with at least 3 votes.<ul> <li>The proposer's vote does not count towards the 3 vote total. For example, if Proposer X creates a pull request and votes yes, and User Y and Z vote yes, this is counted as 2 total yes votes.</li> <li>Votes against shall be motivated, and ideally provide actionable feedback.</li> <li>If the vote has failed, then the advocate may choose to continue work on the proposal, or to abandon the proposal. Either decision of the advocate must be announced in the GTFS Changes mailing list.</li> <li>If the advocate continues the work on proposal then a new vote can be called for at any point in time.</li> </ul> </li> <li>Any pull request remaining inactive for 30 calendar days will be closed. When a pull request is closed, the corresponding proposal is considered abandoned. The advocate may reopen the pull request at any time if they wish to continue or maintain the conversation.</li> <li>If the proposal is accepted:<ul> <li>Google is committed to merging the voted upon version of the pull request (provided that the contributors have signed the CLA), and performing the pull request within 5 business days.</li> <li>Translations must not be included into the original pull request. Google is responsible for eventually updating relevant translations into supported languages, but pure translation pull requests from the community are welcome and will be accepted as soon as all editorial comments are addressed.</li> </ul> </li> <li>The final result of the pull request (accepted or abandoned) should be announced on the same Google Groups thread where the pull request was originally announced.</li> </ol>","title":"Specification amendment process"},{"location":"schedule/reference/","text":"<p>Revised May 9, 2022. See Revision History for more details.</p> <p>This document defines the format and structure of the files that comprise a GTFS dataset.</p>","title":"GTFS Schedule Reference"},{"location":"schedule/reference/#table-of-contents","text":"<ol> <li>Document Conventions</li> <li>Dataset Files</li> <li>File Requirements</li> <li>Field Definitions<ul> <li>agency.txt</li> <li>stops.txt</li> <li>routes.txt</li> <li>trips.txt</li> <li>stop_times.txt</li> <li>calendar.txt</li> <li>calendar_dates.txt</li> <li>fare_attributes.txt</li> <li>fare_rules.txt</li> <li>fare_products.txt </li> <li>fare_leg_rules.txt</li> <li>fare_transfer_rules.txt</li> <li>areas.txt</li> <li>stop_areas.txt</li> <li>shapes.txt</li> <li>frequencies.txt</li> <li>transfers.txt</li> <li>pathways.txt</li> <li>levels.txt</li> <li>translations.txt</li> <li>feed_info.txt</li> <li>attributions.txt</li> </ul> </li> </ol>","title":"Table of Contents"},{"location":"schedule/reference/#document-conventions","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \u201cSHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p>","title":"Document Conventions"},{"location":"schedule/reference/#term-definitions","text":"<p>This section defines terms that are used throughout this document.</p> <ul> <li>Dataset - A complete set of files defined by this specification reference. Altering the dataset creates a new version of the dataset. Datasets should be published at a public, permanent URL, including the zip file name. (e.g., https://www.agency.org/gtfs/gtfs.zip).</li> <li>Record - A basic data structure comprised of a number of different field values describing a single entity (e.g. transit agency, stop, route, etc.). Represented, in a table, as a row.</li> <li>Field - A property of an object or entity. Represented, in a table, as a column.</li> <li>Field value - An individual entry in a field. Represented, in a table, as a single cell.</li> <li>Service day - A service day is a time period used to indicate route scheduling. The exact definition of service day varies from agency to agency but service days often do not correspond with calendar days. A service day may exceed 24:00:00 if service begins on one day and ends on a following day. For example, service that runs from 08:00:00 on Friday to 02:00:00 on Saturday, could be denoted as running from 08:00:00 to 26:00:00 on a single service day.</li> <li>Text-to-speech field - The field should contain the same information than its parent field (on which it falls back if it is empty). It is aimed to be read as text-to-speech, therefore, abbreviation should be either removed (\"St\" should be either read as \"Street\" or \"Saint\"; \"Elizabeth I\" should be \"Elizabeth the first\") or kept to be read as it (\"JFK Airport\" is said abbreviated).</li> <li>Leg - Travel in which a rider boards and alights between a pair of subsequent locations along a trip.</li> <li>Journey - Overall travel from origin to destination, including all legs and transfers in-between.</li> <li>Sub-journey - Two or more legs that comprise a subset of a journey.</li> <li>Fare product - Purchassable fare products that can be used to pay for or validate travel.</li> </ul>","title":"Term Definitions"},{"location":"schedule/reference/#presence","text":"<p>Presence conditions applicable to fields and files:</p> <ul> <li>Required - The field or file must be included in the dataset and contain a valid value for each record.</li> <li>Optional - The field or file may be omitted from the dataset.</li> <li>Conditionally Required - The field or file must be included under conditions outlined in the field or file description.</li> <li>Conditionally Forbidden - The field or file must not be included under conditions outlined in the field or file description.</li> </ul>","title":"Presence"},{"location":"schedule/reference/#field-types","text":"<ul> <li>Color - A color encoded as a six-digit hexadecimal number. Refer to https://htmlcolorcodes.com to generate a valid value (the leading \"#\" must not be included).  Example: <code>FFFFFF</code> for white, <code>000000</code> for black or <code>0039A6</code> for the A,C,E lines in NYMTA.</li> <li>Currency code - An ISO 4217 alphabetical currency code. For the list of current currency, refer to https://en.wikipedia.org/wiki/ISO_4217#Active_codes.  Example: <code>CAD</code> for Canadian dollars, <code>EUR</code> for euros or <code>JPY</code> for Japanese yen.</li> <li>Currency amount - A decimal value indicating a currency amount. The number of decimal places is specified by ISO 4217 for the accompanying Currency code. All financial calculations should be processed as decimal, currency, or another equivalent type suitable for financial calculations depending on the programming language used to consume data. Processing currency amounts as float is discouraged due to gains or losses of money during calculations.</li> <li>Date - Service day in the YYYYMMDD format. Since time within a service day may be above 24:00:00, a service day may contain information for the subsequent day(s).  Example: <code>20180913</code> for September 13th, 2018.</li> <li>Email - An email address.  Example: <code>example@example.com</code></li> <li>Enum - An option from a set of predefined constants defined in the \"Description\" column.  Example: The <code>route_type</code> field contains a <code>0</code> for tram, a <code>1</code> for subway...</li> <li>ID - An ID field value is an internal ID, not intended to be shown to riders, and is a sequence of any UTF-8 characters. Using only printable ASCII characters is recommended. An ID is labeled \"unique ID\" when it must be unique within a file. IDs defined in one .txt file are often referenced in another .txt file. IDs that reference an ID in another table are labeled \"foreign ID\". Example: The <code>stop_id</code> field in stops.txt is a \"unique ID\". The <code>parent_station</code> field in stops.txt is a \"foreign ID referencing <code>stops.stop_id</code>\".</li> <li>Language code - An IETF BCP 47 language code. For an introduction to IETF BCP 47, refer to https://www.rfc-editor.org/rfc/bcp/bcp47.txt and https://www.w3.org/International/articles/language-tags/.  Example: <code>en</code> for English, <code>en-US</code> for American English or <code>de</code> for German.</li> <li>Latitude - WGS84 latitude in decimal degrees. The value must be greater than or equal to -90.0 and less than or equal to 90.0.  Example: <code>41.890169</code> for the Colosseum in Rome.</li> <li>Longitude - WGS84 longitude in decimal degrees. The value must be greater than or equal to -180.0 and less than or equal to 180.0.  Example: <code>12.492269</code> for the Colosseum in Rome.</li> <li>Float - A floating point number.</li> <li>Integer - An integer.</li> <li>Phone number - A phone number.</li> <li>Time - Time in the HH:MM:SS format (H:MM:SS is also accepted). The time is measured from \"noon minus 12h\" of the service day (effectively midnight except for days on which daylight savings time changes occur). For times occurring after midnight, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins.  Example: <code>14:30:00</code> for 2:30PM or <code>25:35:00</code> for 1:35AM on the next day.</li> <li>Text - A string of UTF-8 characters, which is aimed to be displayed and which must therefore be human readable.</li> <li>Timezone - TZ timezone from the https://www.iana.org/time-zones. Timezone names never contain the space character but may contain an underscore. Refer to https://en.wikipedia.org/wiki/List_of_tz_zones for a list of valid values.  Example: <code>Asia/Tokyo</code>, <code>America/Los_Angeles</code> or <code>Africa/Cairo</code>.</li> <li>URL - A fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the following https://www.w3.org/Addressing/URL/4_URI_Recommentations.html for a description of how to create fully qualified URL values.</li> </ul>","title":"Field Types"},{"location":"schedule/reference/#field-signs","text":"<p>Signs applicable to Float or Integer field types:</p> <ul> <li>Non-negative - Greater than or equal to 0.</li> <li>Non-zero - Not equal to 0.</li> <li>Positive - Greater than 0.</li> </ul> <p>Example: Non-negative float - A floating point number greater than or equal to 0.</p>","title":"Field Signs"},{"location":"schedule/reference/#dataset-attributes","text":"<p>The primary key of a dataset is the field or combination of fields that uniquely identify a row. <code>Primary key (*)</code> is used when all provided fields for a file are used to uniquely identify a row. <code>Primary key (none)</code> means that the file allows only one row. </p> <p>Example: the <code>trip_id</code> and <code>stop_sequence</code> fields make the primary key of stop_times.txt.</p>","title":"Dataset Attributes"},{"location":"schedule/reference/#dataset-files","text":"<p>This specification defines the following files:</p>    File Name Presence Description     agency.txt Required Transit agencies with service represented in this dataset.   stops.txt Required Stops where vehicles pick up or drop off riders. Also defines stations and station entrances.   routes.txt Required Transit routes. A route is a group of trips that are displayed to riders as a single service.   trips.txt Required Trips for each route. A trip is a sequence of two or more stops that occur during a specific time period.   stop_times.txt Required Times that a vehicle arrives at and departs from stops for each trip.   calendar.txt Conditionally Required Service dates specified using a weekly schedule with start and end dates. Conditionally Required: - Required unless all dates of service are defined in calendar_dates.txt. - Optional otherwise.   calendar_dates.txt Conditionally Required Exceptions for the services defined in the calendar.txt. Conditionally Required: - Required if calendar.txt is omitted. In which case calendar_dates.txt must contain all dates of service.  - Optional otherwise.   fare_attributes.txt Optional Fare information for a transit agency's routes.   fare_rules.txt Conditionally Required Rules to apply fares for itineraries.Conditionally Required:- Required if fare_attributes.txt is defined.- Forbidden otherwise.   fare_products.txt Optional To describe the different types of tickets or fares that can be purchased by riders.File fare_products.txt describes fare products that are not represented in fare_attributes.txt and fare_rules.txt. As such, the use of fare_products.txt is entirely separate from files fare_attributes.txt and fare_rules.txt.   fare_leg_rules.txt Optional Fare rules for individual legs of travel.File fare_leg_rules.txt provides a more detailed method for modeling fare structures. As such, the use of fare_leg_rules.txt is entirely separate from files fare_attributes.txt and fare_rules.txt.   fare_transfer_rules.txt Optional Fare rules for transfers between legs of travel.Along with fare_leg_rules.txt, file fare_transfer_rules.txt provides a more detailed method for modeling fare structures. As such, the use of fare_transfer_rules.txt is entirely separate from files fare_attributes.txt and fare_rules.txt.   areas.txt Optional Area grouping of locations.   stop_areas.txt Optional Rules to assign stops to areas.   shapes.txt Optional Rules for mapping vehicle travel paths, sometimes referred to as route alignments.   frequencies.txt Optional Headway (time between trips) for headway-based service or a compressed representation of fixed-schedule service.   transfers.txt Optional Rules for making connections at transfer points between routes.   pathways.txt Optional Pathways linking together locations within stations.   levels.txt Conditionally Required Levels within stations.Conditionally Required:- Required when describing pathways with elevators (<code>pathway_mode=5</code>).- Optional otherwise.   translations.txt Optional Translations of customer-facing dataset values.   feed_info.txt Optional Dataset metadata, including publisher, version, and expiration information.   attributions.txt Optional Dataset attributions.","title":"Dataset Files"},{"location":"schedule/reference/#file-requirements","text":"<p>The following requirements apply to the format and contents of the dataset files:</p> <ul> <li>All files must be saved as comma-delimited text.</li> <li>The first line of each file must contain field names. Each subsection of the Field Definitions section corresponds to one of the files in a GTFS dataset and lists the field names that may be used in that file.</li> <li>All file and field names are case-sensitive.</li> <li>Field values must not contain tabs, carriage returns or new lines.</li> <li>Field values that contain quotation marks or commas must be enclosed within quotation marks. In addition, each quotation mark in the field value must be preceded with a quotation mark. This is consistent with the manner in which Microsoft Excel outputs comma-delimited (CSV) files. For more information on the CSV file format, see https://tools.ietf.org/html/rfc4180. The following example demonstrates how a field value would appear in a comma-delimited file:</li> <li>Original field value: <code>Contains \"quotes\", commas and text</code></li> <li>Field value in CSV file: <code>\"Contains \"\"quotes\"\", commas and text\"</code></li> <li>Field values must not contain HTML tags, comments or escape sequences.</li> <li>Extra spaces between fields or field names should be removed. Many parsers consider the spaces to be part of the value, which may cause errors.</li> <li>Each line must end with a CRLF or LF linebreak character.</li> <li>Files should be encoded in UTF-8 to support all Unicode characters. Files that include the Unicode byte-order mark (BOM) character are acceptable. See https://unicode.org/faq/utf_bom.html#BOM for more information on the BOM character and UTF-8.</li> <li>All dataset files must be zipped together.</li> </ul>","title":"File Requirements"},{"location":"schedule/reference/#field-definitions","text":"","title":"Field Definitions"},{"location":"schedule/reference/#agencytxt","text":"<p>File: Required</p> <p>Primary key (<code>agency_id</code>)</p>    Field Name Type Presence Description     <code>agency_id</code> Unique ID Conditionally Required Identifies a transit brand which is often synonymous with a transit agency. Note that in some cases, such as when a single agency operates multiple separate services, agencies and brands are distinct. This document uses the term \"agency\" in place of \"brand\". A dataset may contain data from multiple agencies. Conditionally Required:- Required when the dataset contains data for multiple transit agencies. - Optional otherwise.   <code>agency_name</code> Text Required Full name of the transit agency.   <code>agency_url</code> URL Required URL of the transit agency.   <code>agency_timezone</code> Timezone Required Timezone where the transit agency is located. If multiple agencies are specified in the dataset, each must have the same <code>agency_timezone</code>.   <code>agency_lang</code> Language code Optional Primary language used by this transit agency. Should be provided to help GTFS consumers choose capitalization rules and other language-specific settings for the dataset.   <code>agency_phone</code> Phone number Optional A voice telephone number for the specified agency. This field is a string value that presents the telephone number as typical for the agency's service area. It may contain punctuation marks to group the digits of the number. Dialable text (for example, TriMet's \"503-238-RIDE\") is permitted, but the field must not contain any other descriptive text.   <code>agency_fare_url</code> URL Optional URL of a web page that allows a rider to purchase tickets or other fare instruments for that agency online.   <code>agency_email</code> Email Optional Email address actively monitored by the agency\u2019s customer service department. This email address should be a direct contact point where transit riders can reach a customer service representative at the agency.","title":"agency.txt"},{"location":"schedule/reference/#stopstxt","text":"<p>File: Required</p> <p>Primary key (<code>stop_id</code>)</p>    Field Name Type Presence Description     <code>stop_id</code> Unique ID Required Identifies a location: stop/platform, station, entrance/exit, generic node or boarding area (see <code>location_type</code>). Multiple routes may use the same <code>stop_id</code>.   <code>stop_code</code> Text Optional Short text or a number that identifies the location for riders. These codes are often used in phone-based transit information systems or printed on signage to make it easier for riders to get information for a particular location. The <code>stop_code</code> may be the same as <code>stop_id</code> if it is public facing. This field should be left empty for locations without a code presented to riders.   <code>stop_name</code> Text Conditionally Required Name of the location. The <code>stop_name</code> should match the agency's rider-facing name for the location as printed on a timetable, published online, or represented on signage. For translations into other languages, use <code>translations.txt</code>.When the location is a boarding area (<code>location_type=4</code>), the <code>stop_name</code> should contains the name of the boarding area as displayed by the agency. It could be just one letter (like on some European intercity railway stations), or text like \u201cWheelchair boarding area\u201d (NYC\u2019s Subway) or \u201cHead of short trains\u201d (Paris\u2019 RER).Conditionally Required:- Required for locations which are stops (<code>location_type=0</code>), stations (<code>location_type=1</code>) or entrances/exits (<code>location_type=2</code>).- Optional for locations which are generic nodes (<code>location_type=3</code>) or boarding areas (<code>location_type=4</code>).   <code>tts_stop_name</code> Text Optional Readable version of the <code>stop_name</code>. See \"Text-to-speech field\" in the Term Definitions for more.   <code>stop_desc</code> Text Optional Description of the location that provides useful, quality information. Should not be a duplicate of <code>stop_name</code>.   <code>stop_lat</code> Latitude Conditionally Required Latitude of the location.For stops/platforms (<code>location_type=0</code>) and boarding area (<code>location_type=4</code>), the coordinates must be the ones of the bus pole \u2014 if exists \u2014 and otherwise of where the travelers are boarding the vehicle (on the sidewalk or the platform, and not on the roadway or the track where the vehicle stops). Conditionally Required:- Required for locations which are stops (<code>location_type=0</code>), stations (<code>location_type=1</code>) or entrances/exits (<code>location_type=2</code>).- Optional for locations which are generic nodes (<code>location_type=3</code>) or boarding areas (<code>location_type=4</code>).   <code>stop_lon</code> Longitude Conditionally Required Longitude of the location.For stops/platforms (<code>location_type=0</code>) and boarding area (<code>location_type=4</code>), the coordinates must be the ones of the bus pole \u2014 if exists \u2014 and otherwise of where the travelers are boarding the vehicle (on the sidewalk or the platform, and not on the roadway or the track where the vehicle stops). Conditionally Required:- Required for locations which are stops (<code>location_type=0</code>), stations (<code>location_type=1</code>) or entrances/exits (<code>location_type=2</code>).- Optional for locations which are generic nodes (<code>location_type=3</code>) or boarding areas (<code>location_type=4</code>).   <code>zone_id</code> ID Conditionally Required Identifies the fare zone for a stop. If this record represents a station or station entrance, the <code>zone_id</code> is ignored.Conditionally Required:- Required if providing fare information using fare_rules.txt - Optional otherwise.   <code>stop_url</code> URL Optional URL of a web page about the location. This should be different from the <code>agency.agency_url</code> and the <code>routes.route_url</code> field values.   <code>location_type</code> Enum Optional Location type. Valid options are:<code>0</code> (or blank) - Stop (or Platform). A location where passengers board or disembark from a transit vehicle. Is called a platform when defined within a <code>parent_station</code>.<code>1</code> - Station. A physical structure or area that contains one or more platform.<code>2</code> - Entrance/Exit. A location where passengers can enter or exit a station from the street. If an entrance/exit belongs to multiple stations, it may be linked by pathways to both, but the data provider must pick one of them as parent.<code>3</code> - Generic Node. A location within a station, not matching any other <code>location_type</code>, that may be used to link together pathways define in pathways.txt.<code>4</code> - Boarding Area. A specific location on a platform, where passengers can board and/or alight vehicles.   <code>parent_station</code> Foreign ID referencing <code>stops.stop_id</code> Conditionally Required Defines hierarchy between the different locations defined in <code>stops.txt</code>. It contains the ID of the parent location, as followed:- Stop/platform (<code>location_type=0</code>): the <code>parent_station</code> field contains the ID of a station.- Station (<code>location_type=1</code>): this field must be empty.- Entrance/exit (<code>location_type=2</code>) or generic node (<code>location_type=3</code>): the <code>parent_station</code> field contains the ID of a station (<code>location_type=1</code>)- Boarding Area (<code>location_type=4</code>): the <code>parent_station</code> field contains ID of a platform.Conditionally Required:- Required for locations which are entrances (<code>location_type=2</code>), generic nodes (<code>location_type=3</code>) or boarding areas (<code>location_type=4</code>).- Optional for stops/platforms (<code>location_type=0</code>).- Forbidden for stations (<code>location_type=1</code>).   <code>stop_timezone</code> Timezone Optional Timezone of the location. If the location has a parent station, it inherits the parent station\u2019s timezone instead of applying its own. Stations and parentless stops with empty <code>stop_timezone</code> inherit the timezone specified by <code>agency.agency_timezone</code>. If <code>stop_timezone</code> values are provided, the times in stop_times.txt should be entered as the time since midnight in the timezone specified by <code>agency.agency_timezone</code>. This ensures that the time values in a trip always increase over the course of a trip, regardless of which timezones the trip crosses.   <code>wheelchair_boarding</code> Enum Optional Indicates whether wheelchair boardings are possible from the location. Valid options are: For parentless stops:<code>0</code> or empty - No accessibility information for the stop.<code>1</code> - Some vehicles at this stop can be boarded by a rider in a wheelchair.<code>2</code> - Wheelchair boarding is not possible at this stop. For child stops: <code>0</code> or empty - Stop will inherit its <code>wheelchair_boarding</code> behavior from the parent station, if specified in the parent.<code>1</code> - There exists some accessible path from outside the station to the specific stop/platform.<code>2</code> - There exists no accessible path from outside the station to the specific stop/platform. For station entrances/exits: <code>0</code> or empty - Station entrance will inherit its <code>wheelchair_boarding</code> behavior from the parent station, if specified for the parent.<code>1</code> - Station entrance is wheelchair accessible.<code>2</code> - No accessible path from station entrance to stops/platforms.   <code>level_id</code> Foreign ID referencing <code>levels.level_id</code> Optional Level of the location. The same level may be used by multiple unlinked stations.   <code>platform_code</code> Text Optional Platform identifier for a platform stop (a stop belonging to a station). This should be just the platform identifier (eg. \"G\" or \"3\"). Words like \u201cplatform\u201d or \"track\" (or the feed\u2019s language-specific equivalent) should not be included. This allows feed consumers to more easily internationalize and localize the platform identifier into other languages.","title":"stops.txt"},{"location":"schedule/reference/#routestxt","text":"<p>File: Required</p> <p>Primary key (<code>route_id</code>)</p>    Field Name Type Presence Description     <code>route_id</code> Unique ID Required Identifies a route.   <code>agency_id</code> Foreign ID referencing <code>agency.agency_id</code> Conditionally Required Agency for the specified route.Conditionally Required:- Required if multiple agencies are defined in agency.txt. - Optional otherwise.   <code>route_short_name</code> Text Conditionally Required Short name of a route. Often a short, abstract identifier (e.g., \"32\", \"100X\", \"Green\") that riders use to identify a route. Both <code>route_short_name</code> and <code>route_long_name</code> may be defined.Conditionally Required:- Required if <code>routes.route_long_name</code> is empty.- Optional otherwise.   <code>route_long_name</code> Text Conditionally Required Full name of a route. This name is generally more descriptive than the <code>route_short_name</code> and often includes the route's destination or stop. Both <code>route_short_name</code> and <code>route_long_name</code> may be defined.Conditionally Required:- Required if <code>routes.route_short_name</code> is empty.- Optional otherwise.   <code>route_desc</code> Text Optional Description of a route that provides useful, quality information. Should not be a duplicate of <code>route_short_name</code> or <code>route_long_name</code>.  Example: \"A\" trains operate between Inwood-207 St, Manhattan and Far Rockaway-Mott Avenue, Queens at all times. Also from about 6AM until about midnight, additional \"A\" trains operate between Inwood-207 St and Lefferts Boulevard (trains typically alternate between Lefferts Blvd and Far Rockaway).   <code>route_type</code> Enum Required Indicates the type of transportation used on a route. Valid options are: <code>0</code> - Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.<code>1</code> - Subway, Metro. Any underground rail system within a metropolitan area.<code>2</code> - Rail. Used for intercity or long-distance travel.<code>3</code> - Bus. Used for short- and long-distance bus routes.<code>4</code> - Ferry. Used for short- and long-distance boat service.<code>5</code> - Cable tram. Used for street-level rail cars where the cable runs beneath the vehicle (e.g., cable car in San Francisco).<code>6</code> - Aerial lift, suspended cable car (e.g., gondola lift, aerial tramway). Cable transport where cabins, cars, gondolas or open chairs are suspended by means of one or more cables.<code>7</code> - Funicular. Any rail system designed for steep inclines.<code>11</code> - Trolleybus. Electric buses that draw power from overhead wires using poles.<code>12</code> - Monorail. Railway in which the track consists of a single rail or a beam.   <code>route_url</code> URL Optional URL of a web page about the particular route. Should be different from the <code>agency.agency_url</code> value.   <code>route_color</code> Color Optional Route color designation that matches public facing material. Defaults to white (<code>FFFFFF</code>) when omitted or left empty. The color difference between <code>route_color</code> and <code>route_text_color</code> should provide sufficient contrast when viewed on a black and white screen.   <code>route_text_color</code> Color Optional Legible color to use for text drawn against a background of <code>route_color</code>. Defaults to black (<code>000000</code>) when omitted or left empty. The color difference between <code>route_color</code> and <code>route_text_color</code> should provide sufficient contrast when viewed on a black and white screen.   <code>route_sort_order</code> Non-negative integer Optional Orders the routes in a way which is ideal for presentation to customers. Routes with smaller <code>route_sort_order</code> values should be displayed first.   <code>continuous_pickup</code> Enum Optional Indicates that the rider can board the transit vehicle at any point along the vehicle\u2019s travel path as described by <code>shapes.txt</code>, on every trip of the route. Valid options are: <code>0</code> - Continuous stopping pickup. <code>1</code> or empty - No continuous stopping pickup. <code>2</code> - Must phone agency to arrange continuous stopping pickup. <code>3</code> - Must coordinate with driver to arrange continuous stopping pickup.  Values for <code>routes.continuous_pickup</code> may be overridden by defining values in <code>stop_times.continuous_pickup</code> for specific <code>stop_time</code>s along the route.   <code>continuous_drop_off</code> Enum Optional Indicates that the rider can alight from the transit vehicle at any point along the vehicle\u2019s travel path as described by <code>shapes.txt</code>, on every trip of the route. Valid options are: <code>0</code> - Continuous stopping drop off. <code>1</code> or empty - No continuous stopping drop off. <code>2</code> - Must phone agency to arrange continuous stopping drop off. <code>3</code> - Must coordinate with driver to arrange continuous stopping drop off. Values for <code>routes.continuous_drop_off</code> may be overridden by defining values in <code>stop_times.continuous_drop_off</code> for specific <code>stop_time</code>s along the route.   <code>network_id</code> ID Optional Identifies a group of routes. Multiple rows in routes.txt may have the same <code>network_id</code>.","title":"routes.txt"},{"location":"schedule/reference/#tripstxt","text":"<p>File: Required</p> <p>Primary key (<code>trip_id</code>)</p>    Field Name Type Presence Description     <code>route_id</code> Foreign ID referencing <code>routes.route_id</code> Required Identifies a route.   <code>service_id</code> Foreign ID referencing <code>calendar.service_id</code> or <code>calendar_dates.service_id</code> Required Identifies a set of dates when service is available for one or more routes.   <code>trip_id</code> Unique ID Required Identifies a trip.   <code>trip_headsign</code> Text Optional Text that appears on signage identifying the trip's destination to riders. Should be used to distinguish between different patterns of service on the same route. If the headsign changes during a trip, values for <code>trip_headsign</code> may be overridden by defining values in <code>stop_times.stop_headsign</code> for specific <code>stop_time</code>s along the trip.   <code>trip_short_name</code> Text Optional Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trips. If riders do not commonly rely on trip names, <code>trip_short_name</code> should be empty. A <code>trip_short_name</code> value, if provided, should uniquely identify a trip within a service day; it should not be used for destination names or limited/express designations.   <code>direction_id</code> Enum Optional Indicates the direction of travel for a trip. This field should not be used in routing; it provides a way to separate trips by direction when publishing time tables. Valid options are: <code>0</code> - Travel in one direction (e.g. outbound travel).<code>1</code> - Travel in the opposite direction (e.g. inbound travel).Example: The <code>trip_headsign</code> and <code>direction_id</code> fields may be used together to assign a name to travel in each direction for a set of trips. A trips.txt file could contain these records for use in time tables:  <code>trip_id,...,trip_headsign,direction_id</code>  <code>1234,...,Airport,0</code>  <code>1505,...,Downtown,1</code>   <code>block_id</code> ID Optional Identifies the block to which the trip belongs. A block consists of a single trip or many sequential trips made using the same vehicle, defined by shared service days and <code>block_id</code>. A <code>block_id</code> may have trips with different service days, making distinct blocks. See the example below   <code>shape_id</code> Foreign ID referencing <code>shapes.shape_id</code> Conditionally Required Identifies a geospatial shape describing the vehicle travel path for a trip. Conditionally Required: - Required if the trip has a continuous pickup or drop-off behavior defined either in <code>routes.txt</code> or in <code>stop_times.txt</code>. - Optional otherwise.   <code>wheelchair_accessible</code> Enum Optional Indicates wheelchair accessibility. Valid options are:<code>0</code> or empty - No accessibility information for the trip.<code>1</code> - Vehicle being used on this particular trip can accommodate at least one rider in a wheelchair.<code>2</code> - No riders in wheelchairs can be accommodated on this trip.   <code>bikes_allowed</code> Enum Optional Indicates whether bikes are allowed. Valid options are:<code>0</code> or empty - No bike information for the trip.<code>1</code> - Vehicle being used on this particular trip can accommodate at least one bicycle.<code>2</code> - No bicycles are allowed on this trip.","title":"trips.txt"},{"location":"schedule/reference/#example-blocks-and-service-day","text":"<p>The example below is valid, with distinct blocks every day of the week.</p>    route_id trip_id service_id block_id (first stop time) (last stop time)     red trip_1 mon-tues-wed-thurs-fri-sat-sun red_loop 22:00:00 22:55:00   red trip_2 fri-sat-sun red_loop 23:00:00 23:55:00   red trip_3 fri-sat red_loop 24:00:00 24:55:00   red trip_4 mon-tues-wed-thurs red_loop 20:00:00 20:50:00   red trip_5 mon-tues-wed-thurs red_loop 21:00:00 21:50:00    <p>Notes on above table:</p> <ul> <li>On Friday into Saturday morning, for example, a single vehicle operates <code>trip_1</code>, <code>trip_2</code>, and <code>trip_3</code> (10:00 PM through 12:55 AM). Note that the last trip occurs on Saturday, 12:00 AM to 12:55 AM, but is part of the Friday \u201cservice day\u201d because the times are 24:00:00 to 24:55:00.</li> <li>On Monday, Tuesday, Wednesday, and Thursday, a single vehicle operates <code>trip_1</code>, <code>trip_4</code>, and <code>trip_5</code> in a block from 8:00 PM to 10:55 PM.</li> </ul>","title":"Example: Blocks and service day"},{"location":"schedule/reference/#stop_timestxt","text":"<p>File: Required</p> <p>Primary key (<code>trip_id</code>, <code>stop_sequence</code>)</p>    Field Name Type Presence Description     <code>trip_id</code> Foreign ID referencing <code>trips.trip_id</code> Required Identifies a trip.   <code>arrival_time</code> Time Conditionally Required Arrival time at the stop (defined by <code>stop_times.stop_id</code>) for a specific trip (defined by <code>stop_times.trip_id</code>). If there are not separate times for arrival and departure at a stop, <code>arrival_time</code> and <code>departure_time</code> should be the same. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. If exact arrival and departure times (<code>timepoint=1</code> or empty) are not available, estimated or interpolated arrival and departure times (<code>timepoint=0</code>) should be provided.Conditionally Required:- Required for the first and last stop in a trip (defined by <code>stop_times.stop_sequence</code>). - Required for <code>timepoint=1</code>.- Optional otherwise.   <code>departure_time</code> Time Conditionally Required Departure time from the stop (defined by <code>stop_times.stop_id</code>) for a specific trip (defined by <code>stop_times.trip_id</code>).If there are not separate times for arrival and departure at a stop, <code>arrival_time</code> and <code>departure_time</code> should be the same. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. If exact arrival and departure times (<code>timepoint=1</code> or empty) are not available, estimated or interpolated arrival and departure times (<code>timepoint=0</code>) should be provided.Conditionally Required:- Required for <code>timepoint=1</code>.- Optional otherwise.   <code>stop_id</code> Foreign ID referencing <code>stops.stop_id</code> Required Identifies the serviced stop. All stops serviced during a trip must have a record in stop_times.txt. Referenced locations must be stops/platforms, i.e. their <code>stops.location_type</code> value must be <code>0</code> or empty. A stop may be serviced multiple times in the same trip, and multiple trips and routes may service the same stop.   <code>stop_sequence</code> Non-negative integer Required Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.Example: The first location on the trip could have a <code>stop_sequence</code>=<code>1</code>, the second location on the trip could have a <code>stop_sequence</code>=<code>23</code>, the third location could have a <code>stop_sequence</code>=<code>40</code>, and so on.   <code>stop_headsign</code> Text Optional Text that appears on signage identifying the trip's destination to riders. This field overrides the default <code>trips.trip_headsign</code> when the headsign changes between stops. If the headsign is displayed for an entire trip, <code>trips.trip_headsign</code> should be used instead.   A <code>stop_headsign</code> value specified for one <code>stop_time</code> does not apply to subsequent <code>stop_time</code>s in the same trip. If you want to override the <code>trip_headsign</code> for multiple <code>stop_time</code>s in the same trip, the <code>stop_headsign</code> value must be repeated in each <code>stop_time</code> row.   <code>pickup_type</code> Enum Optional Indicates pickup method. Valid options are:<code>0</code> or empty - Regularly scheduled pickup. <code>1</code> - No pickup available.<code>2</code> - Must phone agency to arrange pickup.<code>3</code> - Must coordinate with driver to arrange pickup.   <code>drop_off_type</code> Enum Optional Indicates drop off method. Valid options are:<code>0</code> or empty - Regularly scheduled drop off.<code>1</code> - No drop off available.<code>2</code> - Must phone agency to arrange drop off.<code>3</code> - Must coordinate with driver to arrange drop off.   <code>continuous_pickup</code> Enum Optional Indicates that the rider can board the transit vehicle at any point along the vehicle\u2019s travel path as described by <code>shapes.txt</code>, from this <code>stop_time</code> to the next <code>stop_time</code> in the trip\u2019s <code>stop_sequence</code>. Valid options are: <code>0</code> - Continuous stopping pickup. <code>1</code> or empty - No continuous stopping pickup. <code>2</code> - Must phone agency to arrange continuous stopping pickup. <code>3</code> - Must coordinate with driver to arrange continuous stopping pickup.  If this field is populated, it overrides any continuous pickup behavior defined in <code>routes.txt</code>. If this field is empty, the <code>stop_time</code> inherits any continuous pickup behavior defined in <code>routes.txt</code>.   <code>continuous_drop_off</code> Enum Optional Indicates that the rider can alight from the transit vehicle at any point along the vehicle\u2019s travel path as described by <code>shapes.txt</code>, from this <code>stop_time</code> to the next <code>stop_time</code> in the trip\u2019s <code>stop_sequence</code>. Valid options are: <code>0</code> - Continuous stopping drop off. <code>1</code> or empty - No continuous stopping drop off. <code>2</code> - Must phone agency to arrange continuous stopping drop off. <code>3</code> - Must coordinate with driver to arrange continuous stopping drop off. If this field is populated, it overrides any continuous drop-off behavior defined in <code>routes.txt</code>. If this field is empty, the <code>stop_time</code> inherits any continuous drop-off behavior defined in <code>routes.txt</code>.   <code>shape_dist_traveled</code> Non-negative float Optional Actual distance traveled along the associated shape, from the first stop to the stop specified in this record. This field specifies how much of the shape to draw between any two stops during a trip. Must be in the same units used in shapes.txt. Values used for <code>shape_dist_traveled</code> must increase along with <code>stop_sequence</code>; they must not be used to show reverse travel along a route.Example: If a bus travels a distance of 5.25 kilometers from the start of the shape to the stop,<code>shape_dist_traveled</code>=<code>5.25</code>.   <code>timepoint</code> Enum Optional Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate. Valid options are:<code>0</code> - Times are considered approximate.<code>1</code> or empty - Times are considered exact.","title":"stop_times.txt"},{"location":"schedule/reference/#calendartxt","text":"<p>File: Conditionally Required</p> <p>Primary key (<code>service_id</code>)</p>    Field Name Type Presence Description     <code>service_id</code> Unique ID Required Identifies a set of dates when service is available for one or more routes. Each <code>service_id</code> value must be unique in a calendar.txt file.   <code>monday</code> Enum Required Indicates whether the service operates on all Mondays in the date range specified by the <code>start_date</code> and <code>end_date</code> fields. Note that exceptions for particular dates may be listed in calendar_dates.txt. Valid options are:<code>1</code> - Service is available for all Mondays in the date range.<code>0</code> - Service is not available for Mondays in the date range.   <code>tuesday</code> Enum Required Functions in the same way as <code>monday</code> except applies to Tuesdays   <code>wednesday</code> Enum Required Functions in the same way as <code>monday</code> except applies to Wednesdays   <code>thursday</code> Enum Required Functions in the same way as <code>monday</code> except applies to Thursdays   <code>friday</code> Enum Required Functions in the same way as <code>monday</code> except applies to Fridays   <code>saturday</code> Enum Required Functions in the same way as <code>monday</code> except applies to Saturdays.   <code>sunday</code> Enum Required Functions in the same way as <code>monday</code> except applies to Sundays.   <code>start_date</code> Date Required Start service day for the service interval.   <code>end_date</code> Date Required End service day for the service interval. This service day is included in the interval.","title":"calendar.txt"},{"location":"schedule/reference/#calendar_datestxt","text":"<p>File: Conditionally Required</p> <p>Primary key (<code>service_id</code>, <code>date</code>)</p> <p>The calendar_dates.txt table explicitly activates or disables service by date. It may be used in two ways.</p> <ul> <li>Recommended: Use calendar_dates.txt in conjunction with calendar.txt to define exceptions to the default service patterns defined in calendar.txt. If service is generally regular, with a few changes on explicit dates (for instance, to accommodate special event services, or a school schedule), this is a good approach. In this case <code>calendar_dates.service_id</code> is a foreign ID referencing <code>calendar.service_id</code>.</li> <li>Alternate: Omit calendar.txt, and specify each date of service in calendar_dates.txt. This allows for considerable service variation and accommodates service without normal weekly schedules. In this case <code>service_id</code> is an ID.</li> </ul>    Field Name Type Presence Description     <code>service_id</code> Foreign ID referencing <code>calendar.service_id</code> or ID Required Identifies a set of dates when a service exception occurs for one or more routes. Each (<code>service_id</code>, <code>date</code>) pair may only appear once in calendar_dates.txt if using calendar.txt and calendar_dates.txt in conjunction. If a <code>service_id</code> value appears in both calendar.txt and calendar_dates.txt, the information in calendar_dates.txt modifies the service information specified in calendar.txt.   <code>date</code> Date Required Date when service exception occurs.   <code>exception_type</code> Enum Required Indicates whether service is available on the date specified in the date field. Valid options are: <code>1</code> - Service has been added for the specified date.<code>2</code> - Service has been removed for the specified date.Example: Suppose a route has one set of trips available on holidays and another set of trips available on all other days. One <code>service_id</code> could correspond to the regular service schedule and another <code>service_id</code> could correspond to the holiday schedule. For a particular holiday, the calendar_dates.txt file could be used to add the holiday to the holiday <code>service_id</code> and to remove the holiday from the regular <code>service_id</code> schedule.","title":"calendar_dates.txt"},{"location":"schedule/reference/#fare_attributestxt","text":"<p>File: Optional</p> <p>Primary key (<code>fare_id</code>)</p> <p>Versions There are two modelling options for describing fares. GTFS-Fares V1 is the legacy option for describing minimal fare information. GTFS-Fares V2 is an updated method that allows for a more detailed account of an agency's fare structure. Both are allowed to be present in a dataset, but only one method should be used by a data consumer for a given dataset. It is recommended that GTFS-Fares V2 takes precedence over GTFS-Fares V1. The files associated with GTFS-Fares V1 are: - fare_attributes.txt- fare_rules.txtThe files associated with GTFS-Fares V2 are: - fare_products.txt- fare_leg_rules.txt- fare_transfer_rules.txt</p> <p></p>    Field Name Type Presence Description     <code>fare_id</code> Unique ID Required Identifies a fare class.   <code>price</code> Non-negative float Required Fare price, in the unit specified by <code>currency_type</code>.   <code>currency_type</code> Currency code Required Currency used to pay the fare.   <code>payment_method</code> Enum Required Indicates when the fare must be paid. Valid options are:<code>0</code> - Fare is paid on board.<code>1</code> - Fare must be paid before boarding.   <code>transfers</code> Enum Required Indicates the number of transfers permitted on this fare. Valid options are:<code>0</code> - No transfers permitted on this fare.<code>1</code> - Riders may transfer once.<code>2</code> - Riders may transfer twice.empty - Unlimited transfers are permitted.   <code>agency_id</code> Foreign ID referencing <code>agency.agency_id</code> Conditionally Required Identifies the relevant agency for a fare. Conditionally Required:- Required if multiple agencies are defined in <code>agency.txt</code>.- Optional otherwise.   <code>transfer_duration</code> Non-negative integer Optional Length of time in seconds before a transfer expires. When <code>transfers</code>=<code>0</code> this field may be used to indicate how long a ticket is valid for or it may be left empty.","title":"fare_attributes.txt"},{"location":"schedule/reference/#fare_rulestxt","text":"<p>File: Conditionally Required</p> <p>Primary key (<code>*</code>)</p> <p>The fare_rules.txt table specifies how fares in fare_attributes.txt apply to an itinerary. Most fare structures use some combination of the following rules:</p> <ul> <li>Fare depends on origin or destination stations.</li> <li>Fare depends on which zones the itinerary passes through.</li> <li>Fare depends on which route the itinerary uses.</li> </ul> <p>For examples that demonstrate how to specify a fare structure with fare_rules.txt and fare_attributes.txt, see https://code.google.com/p/googletransitdatafeed/wiki/FareExamples in the GoogleTransitDataFeed open source project wiki.</p>    Field Name Type Presence Description     <code>fare_id</code> Foreign ID referencing <code>fare_attributes.fare_id</code> Required Identifies a fare class.   <code>route_id</code> Foreign ID referencing <code>routes.route_id</code> Optional Identifies a route associated with the fare class. If several routes with the same fare attributes exist, create a record in fare_rules.txt for each route.Example: If fare class \"b\" is valid on route \"TSW\" and \"TSE\", the fare_rules.txt file would contain these records for the fare class:  <code>fare_id,route_id</code><code>b,TSW</code>  <code>b,TSE</code>   <code>origin_id</code> Foreign ID referencing <code>stops.zone_id</code> Optional Identifies an origin zone. If a fare class has multiple origin zones, create a record in fare_rules.txt for each <code>origin_id</code>.Example: If fare class \"b\" is valid for all travel originating from either zone \"2\" or zone \"8\", the fare_rules.txt file would contain these records for the fare class:  <code>fare_id,...,origin_id</code>  <code>b,...,2</code>  <code>b,...,8</code>   <code>destination_id</code> Foreign ID referencing <code>stops.zone_id</code> Optional Identifies a destination zone. If a fare class has multiple destination zones, create a record in fare_rules.txt for each <code>destination_id</code>.Example: The <code>origin_id</code> and <code>destination_id</code> fields could be used together to specify that fare class \"b\" is valid for travel between zones 3 and 4, and for travel between zones 3 and 5, the fare_rules.txt file would contain these records for the fare class: <code>fare_id,...,origin_id,destination_id</code> <code>b,...,3,4</code> <code>b,...,3,5</code>   <code>contains_id</code> Foreign ID referencing <code>stops.zone_id</code> Optional Identifies the zones that a rider will enter while using a given fare class. Used in some systems to calculate correct fare class. Example: If fare class \"c\" is associated with all travel on the GRT route that passes through zones 5, 6, and 7 the fare_rules.txt would contain these records:  <code>fare_id,route_id,...,contains_id</code>  <code>c,GRT,...,5</code> <code>c,GRT,...,6</code> <code>c,GRT,...,7</code>  Because all <code>contains_id</code> zones must be matched for the fare to apply, an itinerary that passes through zones 5 and 6 but not zone 7 would not have fare class \"c\". For more detail, see https://code.google.com/p/googletransitdatafeed/wiki/FareExamples in the GoogleTransitDataFeed project wiki.","title":"fare_rules.txt"},{"location":"schedule/reference/#fare_productstxt","text":"<p>File: Optional</p> <p>Primary Key (<code>fare_product_id</code>)</p> <p>To describe the different types of tickets or fares that can be purchased by riders.</p>    Field Name Type Presence Description     <code>fare_product_id</code> ID Required Identifies a fare product.   <code>fare_product_name</code> Text Optional The name of the fare product as displayed to riders.   <code>amount</code> Currency amount Required The cost of the fare product. May be negative to represent transfer discounts. May be zero to represent a fare product that is free.   <code>currency</code> Currency code Required The currency of the cost of the fare product.","title":"fare_products.txt"},{"location":"schedule/reference/#fare_leg_rulestxt","text":"<p>File: Optional</p> <p>Primary Key (<code>network_id, from_area_id, to_area_id, fare_product_id</code>)</p> <p>Fare rules for individual legs of travel.</p> <p>Fares in <code>fare_leg_rules.txt</code> must be queried by filtering all the records in the file to find rules that match the leg to be traveled by the rider.</p> <p>To process the cost of a leg:</p> <ol> <li> <p>The file <code>fare_leg_rules.txt</code> must be filtered by the fields that define the characteristics of travel, these fields are:</p> <ul> <li><code>fare_leg_rules.network_id</code></li> <li><code>fare_leg_rules.from_area_id</code></li> <li><code>fare_leg_rules.to_area_id</code> </li> </ul> </li> <li> <p>If the leg exactly matches a record in <code>fare_leg_rules.txt</code> based on the characteristics of travel, that record must be processed to determine the cost of the leg.</p> </li> <li> <p>If no exact matches are found, then empty entries in <code>fare_leg_rules.network_id</code>, <code>fare_leg_rules.from_area_id</code>, and <code>fare_leg_rules.to_area_id</code> must be checked to process the cost of the leg:</p> <ul> <li>An empty entry in <code>fare_leg_rules.network_id</code> corresponds to all networks defined in <code>routes.txt</code> excluding the ones listed under <code>fare_leg_rules.network_id</code></li> <li>An empty entry in <code>fare_leg_rules.from_area_id</code> corresponds to all areas defined in <code>areas.area_id</code> excluding the ones listed under <code>fare_leg_rules.from_area_id</code></li> <li>An empty entry in <code>fare_leg_rules.to_area_id</code> corresponds to all areas defined in <code>areas.area_id</code> excluding the ones listed under <code>fare_leg_rules.to_area_id</code> </li> </ul> </li> <li> <p>If the leg does not match any of the rules described above, then the fare is unknown.</p> </li> </ol> <p></p>    Field Name Type Presence Description     <code>leg_group_id</code> ID Optional Identifies a group of entries in fare_leg_rules.txt. Used to describe fare transfer rules between <code>fare_transfer_rules.from_leg_group_id</code> and <code>fare_transfer_rules.to_leg_group_id</code>.Multiple entries in fare_leg_rules.txt may belong to the same <code>fare_leg_rules.leg_group_id</code>.The same entry in fare_leg_rules.txt (not including <code>fare_leg_rules.leg_group_id</code>) must not belong to multiple <code>fare_leg_rules.leg_group_id</code>.   <code>network_id</code> Foreign ID referencing <code>routes.network_id</code> Optional Identifies a route network that applies for the fare leg rule.If there are no matching <code>fare_leg_rules.network_id</code> values to the <code>network_id</code> being filtered, empty <code>fare_leg_rules.network_id</code> will be matched by default. An empty entry in <code>fare_leg_rules.network_id</code> corresponds to all networks defined in <code>routes.txt</code> excluding the ones listed under <code>fare_leg_rules.network_id</code>   <code>from_area_id</code> Foreign ID referencing <code>areas.area_id</code> Optional Identifies a departure area.If there are no matching <code>fare_leg_rules.from_area_id</code> values to the <code>area_id</code> being filtered, empty <code>fare_leg_rules.from_area_id</code> will be matched by default. An empty entry in <code>fare_leg_rules.from_area_id</code> corresponds to all areas defined in <code>areas.area_id</code> excluding the ones listed under <code>fare_leg_rules.from_area_id</code>   <code>to_area_id</code> Foreign ID referencing <code>areas.area_id</code> Optional Identifies an arrival area.If there are no matching <code>fare_leg_rules.to_area_id</code> values to the <code>area_id</code> being filtered, empty <code>fare_leg_rules.to_area_id</code> will be matched by default. An empty entry in <code>fare_leg_rules.to_area_id</code> corresponds to all areas defined in <code>areas.area_id</code> excluding the ones listed under <code>fare_leg_rules.to_area_id</code>   <code>fare_product_id</code> Foreign ID referencing <code>fare_products.fare_product_id</code> Required The fare product required to travel the leg.","title":"fare_leg_rules.txt"},{"location":"schedule/reference/#fare_transfer_rulestxt","text":"<p>File: Optional</p> <p>Primary Key (<code>from_leg_group_id, to_leg_group_id, fare_product_id, transfer_count, duration_limit</code>)</p> <p>Fare rules for transfers between legs of travel defined in <code>fare_leg_rules.txt</code>.</p> <p>To process the cost of a multi-leg journey:</p> <ol> <li>The applicable fare leg groups defined in <code>fare_leg_rules.txt</code> should be determined for all individual legs of travel based on the rider\u2019s journey.</li> <li> <p>The file <code>fare_transfer_rules.txt</code> must be filtered by the fields that define the characteristics of the transfer, these fields are:</p> <ul> <li><code>fare_transfer_rules.from_leg_group_id</code></li> <li><code>fare_transfer_rules.to_leg_group_id</code> </li> </ul> </li> <li> <p>If the transfer exactly matches a record in <code>fare_transfer_rules.txt</code> based on the characteristics of the transfer, then that record must be processed to determine the transfer cost.</p> </li> <li>If no exact matches are found, then empty entries in <code>from_leg_group_id</code> or in <code>to_leg_group_id</code> must be checked to process the transfer cost:<ul> <li>An empty entry in <code>fare_transfer_rules.from_leg_group_id</code> corresponds to all leg groups defined under <code>fare_leg_rules.leg_group_id</code> excluding the ones listed under <code>fare_transfer_rules.from_leg_group_id</code></li> <li>An empty entry in <code>fare_transfer_rules.to_leg_group_id</code> corresponds to all leg groups defined under <code>fare_leg_rules.leg_group_id</code> excluding the ones listed under <code>fare_transfer_rules.to_leg_group_id</code> </li> </ul> </li> <li>If the transfer does not match any of the rules described above, then there is no transfer arrangement and the legs are considered separate.</li> </ol> <p></p>    Field Name Type Presence Description     <code>from_leg_group_id</code> Foreign ID referencing <code>fare_leg_rules.leg_group_id</code> Optional Identifies a group of pre-transfer fare leg rules.If there are no matching <code>fare_transfer_rules.from_leg_group_id</code> values to the <code>leg_group_id</code> being filtered, empty <code>fare_transfer_rules.from_leg_group_id</code> will be matched by default. An empty entry in <code>fare_transfer_rules.from_leg_group_id</code> corresponds to all leg groups defined under <code>fare_leg_rules.leg_group_id</code> excluding the ones listed under <code>fare_transfer_rules.from_leg_group_id</code>   <code>to_leg_group_id</code> Foreign ID referencing <code>fare_leg_rules.leg_group_id</code> Optional Identifies a group of post-transfer fare leg rules.If there are no matching <code>fare_transfer_rules.to_leg_group_id</code> values to the <code>leg_group_id</code> being filtered, empty <code>fare_transfer_rules.to_leg_group_id</code> will be matched by default.An empty entry in <code>fare_transfer_rules.to_leg_group_id</code> corresponds to all leg groups defined under <code>fare_leg_rules.leg_group_id</code> excluding the ones listed under <code>fare_transfer_rules.to_leg_group_id</code>   <code>transfer_count</code> Non-zero integer Conditionally Forbidden Defines how many consecutive transfers the transfer rule may be applied to.Valid options are:<code>-1</code> - No limit.<code>1</code> or more - Defines how many transfers the transfer rule may span.If a sub-journey matches multiple records with different <code>transfer_count</code>s, then the rule with the minimum <code>transfer_count</code> that is greater than or equal to the current transfer count of the sub-journey is to be selected.Conditionally Forbidden:- Forbidden if <code>fare_transfer_rules.from_leg_group_id</code> does not equal <code>fare_transfer_rules.to_leg_group_id</code>.- Required if <code>fare_transfer_rules.from_leg_group_id</code> equals <code>fare_transfer_rules.to_leg_group_id</code>.   <code>duration_limit</code> Positive integer Optional Defines the duration limit of the transfer.Must be expressed in integer increments of seconds.If there is no duration limit, <code>fare_transfer_rules.duration_limit</code> must be empty.   <code>duration_limit_type</code> Enum Conditionally Required Defines the relative start and end of <code>fare_transfer_rules.duration_limit</code>.Valid options are:<code>0</code> - Between the departure fare validation of the current leg and the arrival fare validation of the next leg.<code>1</code> - Between the departure fare validation of the current leg and the departure fare validation of the next leg.<code>2</code> - Between the arrival fare validation of the current leg and the departure fare validation of the next leg.<code>3</code> - Between the arrival fare validation of the current leg and the arrival fare validation of the next leg.Conditionally Required:- Required if <code>fare_transfer_rules.duration_limit</code> is defined.- Forbidden if <code>fare_transfer_rules.duration_limit</code> is empty.   <code>fare_transfer_type</code> Enum Required Indicates the cost processing method of transferring between legs in a journey:  Valid options are:<code>0</code> - From-leg <code>fare_leg_rules.fare_product_id</code> plus <code>fare_transfer_rules.fare_product_id</code>; A + AB.<code>1</code> - From-leg <code>fare_leg_rules.fare_product_id</code> plus <code>fare_transfer_rules.fare_product_id</code> plus to-leg <code>fare_leg_rules.fare_product_id</code>; A + AB + B.<code>2</code> - <code>fare_transfer_rules.fare_product_id</code>; AB. Cost processing interactions between multiple transfers in a journey:<code>fare_transfer_type</code>Processing A &gt; BProcessing B &gt; C<code>0</code>A + ABS + BC<code>1</code>A + AB +BS + BC + C<code>2</code>ABS + BCWhere S indicates the total processed cost of the preceding leg(s) and transfer(s).   <code>fare_product_id</code> Foreign ID referencing <code>fare_products.fare_product_id</code> Optional The fare product required to transfer between two fare legs. If empty, the cost of the transfer rule is 0.","title":"fare_transfer_rules.txt"},{"location":"schedule/reference/#areastxt","text":"<p>File: Optional</p> <p>Primary key (<code>area_id</code>)</p> <p>Defines area identifiers.</p>    Field Name Type Presence Description     <code>area_id</code> Unique ID Required Identifies an area. Must be unique in areas.txt.   <code>area_name</code> Text Optional The name of the area as displayed to the rider.","title":"areas.txt"},{"location":"schedule/reference/#stop_areastxt","text":"<p>File: Optional</p> <p>Primary key (<code>*</code>)</p> <p>Assigns stops from stops.txt to areas.</p>    Field Name Type Presence Description     <code>area_id</code> Foreign ID referencing <code>areas.area_id</code> Required Identifies an area to which one or multiple <code>stop_id</code>s belong. The same <code>stop_id</code> may be defined in many <code>area_id</code>s.   <code>stop_id</code> Foreign ID referencing <code>stops.stop_id</code> Required Identifies a stop. If a station (i.e. a stop with <code>stops.location_type=1</code>) is defined in this field, it is assumed that all of its platforms (i.e. all stops with <code>stops.location_type=0</code> that have this station defined as <code>stops.parent_station</code>) are part of the same area. This behavior can be overridden by assigning platforms to other areas.","title":"stop_areas.txt"},{"location":"schedule/reference/#shapestxt","text":"<p>File: Optional</p> <p>Primary key (<code>shape_id</code>, <code>shape_pt_sequence</code>)</p> <p>Shapes describe the path that a vehicle travels along a route alignment, and are defined in the file shapes.txt. Shapes are associated with Trips, and consist of a sequence of points through which the vehicle passes in order. Shapes do not need to intercept the location of Stops exactly, but all Stops on a trip should lie within a small distance of the shape for that trip, i.e. close to straight line segments connecting the shape points.</p>    Field Name Type Presence Description     <code>shape_id</code> ID Required Identifies a shape.   <code>shape_pt_lat</code> Latitude Required Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.   <code>shape_pt_lon</code> Longitude Required Longitude of a shape point.   <code>shape_pt_sequence</code> Non-negative integer Required Sequence in which the shape points connect to form the shape. Values must increase along the trip but do not need to be consecutive.Example: If the shape \"A_shp\" has three points in its definition, the shapes.txt file might contain these records to define the shape:  <code>shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence</code>  <code>A_shp,37.61956,-122.48161,0</code>  <code>A_shp,37.64430,-122.41070,6</code>  <code>A_shp,37.65863,-122.30839,11</code>   <code>shape_dist_traveled</code> Non-negative float Optional Actual distance traveled along the shape from the first shape point to the point specified in this record. Used by trip planners to show the correct portion of the shape on a map. Values must increase along with <code>shape_pt_sequence</code>; they must not be used to show reverse travel along a route. Distance units must be consistent with those used in stop_times.txt.Example: If a bus travels along the three points defined above for A_shp, the additional <code>shape_dist_traveled</code> values (shown here in kilometers) would look like this:  <code>shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence,shape_dist_traveled</code>  <code>A_shp,37.61956,-122.48161,0,0</code><code>A_shp,37.64430,-122.41070,6,6.8310</code>  <code>A_shp,37.65863,-122.30839,11,15.8765</code>","title":"shapes.txt"},{"location":"schedule/reference/#frequenciestxt","text":"<p>File: Optional</p> <p>Primary key (<code>trip_id</code>, <code>start_time</code>)</p> <p>Frequencies.txt represents trips that operate on regular headways (time between trips). This file may be used to represent two different types of service.</p> <ul> <li>Frequency-based service (<code>exact_times</code>=<code>0</code>) in which service does not follow a fixed schedule throughout the day. Instead, operators attempt to strictly maintain predetermined headways for trips.</li> <li>A compressed representation of schedule-based service (<code>exact_times</code>=<code>1</code>) that has the exact same headway for trips over specified time period(s). In schedule-based service operators try to strictly adhere to a schedule.</li> </ul>    Field Name Type Presence Description     <code>trip_id</code> Foreign ID referencing <code>trips.trip_id</code> Required Identifies a trip to which the specified headway of service applies.   <code>start_time</code> Time Required Time at which the first vehicle departs from the first stop of the trip with the specified headway.   <code>end_time</code> Time Required Time at which service changes to a different headway (or ceases) at the first stop in the trip.   <code>headway_secs</code> Positive integer Required Time, in seconds, between departures from the same stop (headway) for the trip, during the time interval specified by <code>start_time</code> and <code>end_time</code>. Multiple headways may be defined for the same trip, but must not overlap. New headways may start at the exact time the previous headway ends.   <code>exact_times</code> Enum Optional Indicates the type of service for a trip. See the file description for more information. Valid options are:<code>0</code> or empty - Frequency-based trips.<code>1</code> - Schedule-based trips with the exact same headway throughout the day. In this case the <code>end_time</code> value must be greater than the last desired trip <code>start_time</code> but less than the last desired trip start_time + <code>headway_secs</code>.","title":"frequencies.txt"},{"location":"schedule/reference/#transferstxt","text":"<p>File: Optional</p> <p>Primary key (<code>from_stop_id</code>, <code>to_stop_id</code>, <code>from_trip_id</code>, <code>to_trip_id</code>, <code>from_route_id</code>, <code>to_route_id</code>)</p> <p>When calculating an itinerary, GTFS-consuming applications interpolate transfers based on allowable time and stop proximity. Transfers.txt specifies additional rules and overrides for selected transfers.</p> <p>Fields <code>from_trip_id</code>, <code>to_trip_id</code>, <code>from_route_id</code> and <code>to_route_id</code> allow higher orders of specificity for transfer rules. Along with <code>from_stop_id</code> and <code>to_stop_id</code>, the ranking of specificity is as follows:</p> <ol> <li>Both <code>trip_id</code>s defined: <code>from_trip_id</code> and <code>to_trip_id</code>.</li> <li>One <code>trip_id</code> and <code>route_id</code> set defined: (<code>from_trip_id</code> and <code>to_route_id</code>) or (<code>from_route_id</code> and <code>to_trip_id</code>).</li> <li>One <code>trip_id</code> defined: <code>from_trip_id</code> or <code>to_trip_id</code>.</li> <li>Both <code>route_id</code>s defined: <code>from_route_id</code> and <code>to_route_id</code>.</li> <li>One <code>route_id</code> defined: <code>from_route_id</code> or <code>to_route_id</code>.</li> <li>Only <code>from_stop_id</code> and <code>to_stop_id</code> defined: no route or trip related fields set.</li> </ol> <p>For a given ordered pair of arriving trip and departing trip, the transfer with the greatest specificity that applies between these two trips is chosen. For any pair of trips, there should not be two transfers with equally maximal specificity that could apply.</p>    Field Name Type Presence Description     <code>from_stop_id</code> Foreign ID referencing <code>stops.stop_id</code> Required Identifies a stop or station where a connection between routes begins. If this field refers to a station, the transfer rule applies to all its child stops.   <code>to_stop_id</code> Foreign ID referencing <code>stops.stop_id</code> Required Identifies a stop or station where a connection between routes ends. If this field refers to a station, the transfer rule applies to all child stops.   <code>from_route_id</code> Foreign ID referencing <code>routes.route_id</code> Optional Identifies a route where a connection begins.If <code>from_route_id</code> is defined, the transfer will apply to the arriving trip on the route for the given <code>from_stop_id</code>.If both <code>from_trip_id</code> and <code>from_route_id</code> are defined, the <code>trip_id</code> must belong to the <code>route_id</code>, and <code>from_trip_id</code> will take precedence.   <code>to_route_id</code> Foreign ID referencing <code>routes.route_id</code> Optional Identifies a route where a connection ends.If <code>to_route_id</code> is defined, the transfer will apply to the departing trip on the route for the given <code>to_stop_id</code>.If both <code>to_trip_id</code> and <code>to_route_id</code> are defined, the <code>trip_id</code> must belong to the <code>route_id</code>, and <code>to_trip_id</code> will take precedence.   <code>from_trip_id</code> Foreign ID referencing <code>trips.trip_id</code> Optional Identifies a trip where a connection between routes begins.If <code>from_trip_id</code> is defined, the transfer will apply to the arriving trip for the given <code>from_stop_id</code>.If both <code>from_trip_id</code> and <code>from_route_id</code> are defined, the <code>trip_id</code> must belong to the <code>route_id</code>, and <code>from_trip_id</code> will take precedence.   <code>to_trip_id</code> Foreign ID referencing <code>trips.trip_id</code> Optional Identifies a trip where a connection between routes ends.If <code>to_trip_id</code> is defined, the transfer will apply to the departing trip for the given <code>to_stop_id</code>.If both <code>to_trip_id</code> and <code>to_route_id</code> are defined, the <code>trip_id</code> must belong to the <code>route_id</code>, and <code>to_trip_id</code> will take precedence.   <code>transfer_type</code> Enum Required Indicates the type of connection for the specified (<code>from_stop_id</code>, <code>to_stop_id</code>) pair. Valid options are: <code>0</code> or empty - Recommended transfer point between routes.<code>1</code> - Timed transfer point between two routes. The departing vehicle is expected to wait for the arriving one and leave sufficient time for a rider to transfer between routes.<code>2</code> - Transfer requires a minimum amount of time between arrival and departure to ensure a connection. The time required to transfer is specified by <code>min_transfer_time</code>.<code>3</code> - Transfers are not possible between routes at the location.   <code>min_transfer_time</code> Non-negative integer Optional Amount of time, in seconds, that must be available to permit a transfer between routes at the specified stops. The <code>min_transfer_time</code> should be sufficient to permit a typical rider to move between the two stops, including buffer time to allow for schedule variance on each route.","title":"transfers.txt"},{"location":"schedule/reference/#pathwaystxt","text":"<p>File: Optional</p> <p>Primary key (<code>pathway_id</code>)</p> <p>Files pathways.txt and levels.txt use a graph representation to describe subway or train stations, with nodes representing locations and edges representing pathways.</p> <p>To navigate from the station entrance/exit (a node represented as a location with <code>location_type=2</code>) to a platform (a node represented as a location with <code>location_type=0</code> or empty), the rider will move through walkways, fare gates, stairs, and other edges represented as pathways. Generic nodes (nodes represented with <code>location_type=3</code>) can be used to connect pathways throughout a station.</p> <p>Pathways must be defined exhaustively in a station. If any pathways are defined, it is assumed that all pathways throughout the station are represented. Therefore, the following guidelines apply:</p> <ul> <li>No dangling locations: If any location within a station has a pathway, then all locations within that station should have pathways, except for platforms that have boarding areas (<code>location_type=4</code>, see guideline below).</li> <li>No pathways for a platform with boarding areas: A platform (<code>location_type=0</code> or empty) that has boarding areas (<code>location_type=4</code>) is treated as a parent object, not a point. In such cases, the platform must not have pathways assigned. All pathways should be assigned for each of the platform's boarding areas.</li> <li>No locked platforms: Each platform (<code>location_type=0</code> or empty) or boarding area (<code>location_type=4</code>) must be connected to at least one entrance/exit (<code>location_type=2</code>) via some chain of pathways. Stations not allowing a pathway to the outside of the station from a given platform are rare.</li> </ul>    Field Name Type Presence Description     <code>pathway_id</code> Unique ID Required Identifies a pathway. Used by systems as an internal identifier for the record. Must be unique in the dataset.  Different pathways may have the same values for <code>from_stop_id</code> and <code>to_stop_id</code>.Example: When two escalators are side-by-side in opposite directions, or when a stair set and elevator go from the same place to the same place, different <code>pathway_id</code> may have the same <code>from_stop_id</code> and <code>to_stop_id</code> values.   <code>from_stop_id</code> Foreign ID referencing <code>stops.stop_id</code> Required Location at which the pathway begins.Must contain a <code>stop_id</code> that identifies a platform (<code>location_type=0</code> or empty), entrance/exit (<code>location_type=2</code>), generic node (<code>location_type=3</code>) or boarding area (<code>location_type=4</code>). Values for <code>stop_id</code> that identify stations (<code>location_type=1</code>) are forbidden.   <code>to_stop_id</code> Foreign ID referencing <code>stops.stop_id</code> Required Location at which the pathway ends.Must contain a <code>stop_id</code> that identifies a platform (<code>location_type=0</code> or empty), entrance/exit (<code>location_type=2</code>), generic node (<code>location_type=3</code>) or boarding area (<code>location_type=4</code>). Values for <code>stop_id</code> that identify stations (<code>location_type=1</code>) are forbidden.   <code>pathway_mode</code> Enum Required Type of pathway between the specified (<code>from_stop_id</code>, <code>to_stop_id</code>) pair. Valid options are: <code>1</code> - Walkway. <code>2</code> - Stairs. <code>3</code> - Moving sidewalk/travelator. <code>4</code> - Escalator. <code>5</code> - Elevator. <code>6</code> - Fare gate (or payment gate): A pathway that crosses into an area of the station where proof of payment is required to cross. Fare gates may separate paid areas of the station from unpaid ones, or separate different payment areas within the same station from each other. This information can be used to avoid routing passengers through stations using shortcuts that would require passengers to make unnecessary payments, like directing a passenger to walk through a subway platform to reach a busway. <code>7</code>-  Exit gate: A pathway exiting a paid area into an unpaid area where proof of payment is not required to cross.   <code>is_bidirectional</code> Enum Required Indicates the direction that the pathway can be taken:<code>0</code> - Unidirectional pathway that can only be used from <code>from_stop_id</code> to <code>to_stop_id</code>.<code>1</code> - Bidirectional pathway that can be used in both directions.Exit gates (<code>pathway_mode=7</code>) must not be bidirectional.   <code>length</code> Non-negative float Optional Horizontal length in meters of the pathway from the origin location (defined in <code>from_stop_id</code>) to the destination location (defined in <code>to_stop_id</code>).This field is recommended for walkways (<code>pathway_mode=1</code>), fare gates (<code>pathway_mode=6</code>) and exit gates (<code>pathway_mode=7</code>).   <code>traversal_time</code> Positive integer Optional Average time in seconds needed to walk through the pathway from the origin location (defined in <code>from_stop_id</code>) to the destination location (defined in <code>to_stop_id</code>).This field is recommended for moving sidewalks (<code>pathway_mode=3</code>), escalators (<code>pathway_mode=4</code>) and elevator (<code>pathway_mode=5</code>).   <code>stair_count</code> Non-null integer Optional Number of stairs of the pathway.A positive <code>stair_count</code> implies that the rider walk up from <code>from_stop_id</code> to <code>to_stop_id</code>. And a negative <code>stair_count</code> implies that the rider walk down from <code>from_stop_id</code> to <code>to_stop_id</code>.This field is recommended for stairs (<code>pathway_mode=2</code>).If only an estimated stair count can be provided, it is recommended to approximate 15 stairs for 1 floor.   <code>max_slope</code> Float Optional Maximum slope ratio of the pathway. Valid options are:<code>0</code> or empty - No slope.<code>Float</code> - Slope ratio of the pathway, positive for upwards, negative for downwards.This field should only be used with walkways (<code>pathway_mode=1</code>) and moving sidewalks (<code>pathway_mode=3</code>).Example: In the US, 0.083 (also written 8.3%) is the maximum slope ratio for hand-propelled wheelchair, which mean an increase of 0.083m (so 8.3cm) for each 1m.   <code>min_width</code> Positive float Optional Minimum width of the pathway in meters.This field is recommended if the minimum width is less than 1 meter.   <code>signposted_as</code> Text Optional Public facing text from physical signage that is visible to riders. May be used to provide text directions to riders, such as 'follow signs to '. The text in <code>singposted_as</code> should appear exactly how it is printed on the signs.When the physical signage is multilingual, this field may be populated and translated following the example of <code>stops.stop_name</code> in the field definition of <code>feed_info.feed_lang</code>.   <code>reversed_signposted_as</code> Text Optional Same as <code>signposted_as</code>, but when the pathway is used from the <code>to_stop_id</code> to the <code>from_stop_id</code>.","title":"pathways.txt"},{"location":"schedule/reference/#levelstxt","text":"<p>File: Conditionally Required</p> <p>Primary key (<code>level_id</code>)</p> <p>Describes levels in a station. Useful in conjunction with <code>pathways.txt</code>, and is required for navigating pathways with elevators (<code>pathway_mode=5</code>).</p>    Field Name Type Presence Description     <code>level_id</code> Unique ID Required Identifies a level in a station.   <code>level_index</code> Float Required Numeric index of the level that indicates its relative position. Ground level should have index <code>0</code>, with levels above ground indicated by positive indices and levels below ground by negative indices.   <code>level_name</code> Text Optional Name of the level as seen by the rider inside the building or station.Example: Take the elevator to \"Mezzanine\" or \"Platform\" or \"-1\".","title":"levels.txt"},{"location":"schedule/reference/#translationstxt","text":"<p>File: Optional</p> <p>Primary key (<code>*</code>)</p> <p>In regions that have multiple official languages, transit agencies/operators typically have language-specific names and web pages. In order to best serve riders in those regions, it is useful for the dataset to include these language-dependent values.</p>    Field Name Type Presence Description     <code>table_name</code> Enum Required Defines the table that contains the field to be translated. Allowed values are:- <code>agency</code>- <code>stops</code>- <code>routes</code>- <code>trips</code>- <code>stop_times</code>- <code>pathways</code>- <code>levels</code>- <code>feed_info</code>- <code>attributions</code> Any file added to GTFS will have a <code>table_name</code> value equivalent to the file name, as listed above (i.e., not including the <code>.txt</code> file extension).   <code>field_name</code> Text Required Name of the field to be translated. Fields with type <code>Text</code> may be translated, fields with type <code>URL</code>, <code>Email</code> and <code>Phone number</code> may also be \u201ctranslated\u201d to provide resources in the correct language. Fields with other types should not be translated.   <code>language</code> Language code Required Language of translation.If the language is the same as in <code>feed_info.feed_lang</code>, the original value of the field will be assumed to be the default value to use in languages without specific translations (if <code>default_lang</code> doesn't specify otherwise).Example: In Switzerland, a city in an officially bilingual canton is officially called \u201cBiel/Bienne\u201d, but would simply be called \u201cBienne\u201d in French and \u201cBiel\u201d in German.   <code>translation</code> Text or URL or Email or Phone number Required Translated value.   <code>record_id</code> Foreign ID Conditionally Required Defines the record that corresponds to the field to be translated. The value in <code>record_id</code> must be the first or only field of a table's primary key, as defined in the primary key attribute for each table and below:- <code>agency_id</code> for <code>agency.txt</code>- <code>stop_id</code> for <code>stops.txt</code>;- <code>route_id</code> for <code>routes.txt</code>;- <code>trip_id</code> for <code>trips.txt</code>;- <code>trip_id</code> for <code>stop_times.txt</code>;- <code>pathway_id</code> for <code>pathways.txt</code>;- <code>level_id</code> for <code>levels.txt</code>;- <code>attribution_id</code> for <code>attribution.txt</code>.Fields in tables not defined above should not be translated. However producers sometimes add extra fields that are outside the official specification and these unofficial fields may be translated. Below is the recommended way to use <code>record_id</code> for those tables:- <code>service_id</code> for <code>calendar.txt</code>;- <code>service_id</code> for <code>calendar_dates.txt</code>;- <code>fare_id</code> for <code>fare_attributes.txt</code>;- <code>fare_id</code> for <code>fare_rules.txt</code>;- <code>shape_id</code> for <code>shapes.txt</code>;- <code>trip_id</code> for <code>frequencies.txt</code>;- <code>from_stop_id</code> for <code>transfers.txt</code>.Conditionally Required:- Forbidden if <code>table_name</code> is <code>feed_info</code>.- Forbidden if <code>field_value</code> is defined.- Required if <code>field_value</code> is empty.   <code>record_sub_id</code> Foreign ID Conditionally Required Helps the record that contains the field to be translated when the table doesn\u2019t have a unique ID. Therefore, the value in <code>record_sub_id</code> is the secondary ID of the table, as defined by the table below:- None for <code>agency.txt</code>;- None for <code>stops.txt</code>;- None for <code>routes.txt</code>;- None for <code>trips.txt</code>;- <code>stop_sequence</code> for <code>stop_times.txt</code>;- None for <code>pathways.txt</code>;- None for <code>levels.txt</code>;- None for <code>attributions.txt</code>.Fields in tables not defined above should not be translated. However producers sometimes add extra fields that are outside the official specification and these unofficial fields may be translated. Below is the recommended way to use <code>record_sub_id</code> for those tables:- None for <code>calendar.txt</code>;- <code>date</code> for <code>calendar_dates.txt</code>;- None for <code>fare_attributes.txt</code>;- <code>route_id</code> for <code>fare_rules.txt</code>;- None for <code>shapes.txt</code>;- <code>start_time</code> for <code>frequencies.txt</code>;- <code>to_stop_id</code> for <code>transfers.txt</code>.Conditionally Required:- Forbidden if <code>table_name</code> is <code>feed_info</code>.- Forbidden if <code>field_value</code> is defined.- Required if <code>table_name=stop_times</code> and <code>record_id</code> is defined.   <code>field_value</code> Text or URL or Email or Phone number Conditionally Required Instead of defining which record should be translated by using <code>record_id</code> and <code>record_sub_id</code>, this field can be used to define the value which should be translated. When used, the translation will be applied when the fields identified by <code>table_name</code> and <code>field_name</code> contains the exact same value defined in field_value.The field must have exactly the value defined in <code>field_value</code>. If only a subset of the value matches <code>field_value</code>, the translation won\u2019t be applied.If two translation rules match the same record (one with <code>field_value</code>, and the other one with <code>record_id</code>), the rule with <code>record_id</code> takes precedence.Conditionally Required:- Forbidden if <code>table_name</code> is <code>feed_info</code>.- Forbidden if <code>record_id</code> is defined.- Required if <code>record_id</code> is empty.","title":"translations.txt"},{"location":"schedule/reference/#feed_infotxt","text":"<p>File: Optional (Required if <code>translations.txt</code> is provided)</p> <p>Primary key (none)</p> <p>The file contains information about the dataset itself, rather than the services that the dataset describes. In some cases, the publisher of the dataset is a different entity than any of the agencies.</p>    Field Name Type Presence Description     <code>feed_publisher_name</code> Text Required Full name of the organization that publishes the dataset. This may be the same as one of the <code>agency.agency_name</code> values.   <code>feed_publisher_url</code> URL Required URL of the dataset publishing organization's website. This may be the same as one of the <code>agency.agency_url</code> values.   <code>feed_lang</code> Language code Required Default language used for the text in this dataset. This setting helps GTFS consumers choose capitalization rules and other language-specific settings for the dataset. The file <code>translations.txt</code> can be used if the text needs to be translated into languages other than the default one.The default language may be multilingual for datasets with the original text in multiple languages. In such cases, the <code>feed_lang</code> field should contain the language code <code>mul</code> defined by the norm ISO 639-2, and a translation for each language used in the dataset should be provided in <code>translations.txt</code>. If all the original text in the dataset is in the same language, then <code>mul</code> should not be used.Example: Consider a dataset from a multilingual country like Switzerland, with the original <code>stops.stop_name</code> field populated with stop names in different languages. Each stop name is written according to the dominant language in that stop\u2019s geographic location, e.g. <code>Gen\u00e8ve</code> for the French-speaking city of Geneva, <code>Z\u00fcrich</code> for the German-speaking city of Zurich, and <code>Biel/Bienne</code> for the bilingual city of Biel/Bienne. The dataset <code>feed_lang</code> should be <code>mul</code> and translations would be provided in <code>translations.txt</code>, in German: <code>Genf</code>, <code>Z\u00fcrich</code> and <code>Biel</code>; in French: <code>Gen\u00e8ve</code>, <code>Zurich</code> and <code>Bienne</code>; in Italian: <code>Ginevra</code>, <code>Zurigo</code> and <code>Bienna</code>; and in English: <code>Geneva</code>, <code>Zurich</code> and <code>Biel/Bienne</code>.   <code>default_lang</code> Language code Optional Defines the language that should be used when the data consumer doesn\u2019t know the language of the rider. It will often be <code>en</code> (English).   <code>feed_start_date</code> Date Optional The dataset provides complete and reliable schedule information for service in the period from the beginning of the <code>feed_start_date</code> day to the end of the <code>feed_end_date</code> day. Both days may be left empty if unavailable. The <code>feed_end_date</code> date must not precede the <code>feed_start_date</code> date if both are given. It is recommended that dataset providers give schedule data outside this period to advise of likely future service, but dataset consumers should treat it mindful of its non-authoritative status. If <code>feed_start_date</code> or <code>feed_end_date</code> extend beyond the active calendar dates defined in calendar.txt and calendar_dates.txt, the dataset is making an explicit assertion that there is no service for dates within the <code>feed_start_date</code> or <code>feed_end_date</code> range but not included in the active calendar dates.   <code>feed_end_date</code> Date Optional (see above)   <code>feed_version</code> Text Optional String that indicates the current version of their GTFS dataset. GTFS-consuming applications can display this value to help dataset publishers determine whether the latest dataset has been incorporated.   <code>feed_contact_email</code> Email Optional Email address for communication regarding the GTFS dataset and data publishing practices. <code>feed_contact_email</code> is a technical contact for GTFS-consuming applications. Provide customer service contact information through agency.txt.   <code>feed_contact_url</code> URL Optional URL for contact information, a web-form, support desk, or other tools for communication regarding the GTFS dataset and data publishing practices. <code>feed_contact_url</code> is a technical contact for GTFS-consuming applications. Provide customer service contact information through agency.txt.","title":"feed_info.txt"},{"location":"schedule/reference/#attributionstxt","text":"<p>File: Optional</p> <p>Primary key (<code>attribution_id</code>)</p> <p>The file defines the attributions applied to the dataset.</p>    Field Name Type Presence Description     <code>attribution_id</code> Unique ID Optional Identifies an attribution for the dataset or a subset of it. This is mostly useful for translations.   <code>agency_id</code> Foreign ID referencing <code>agency.agency_id</code> Optional Agency to which the attribution applies.If one <code>agency_id</code>, <code>route_id</code>, or <code>trip_id</code> attribution is defined, the other ones must be empty. If none of them is specified, the attribution will apply to the whole dataset.   <code>route_id</code> Foreign ID referencing <code>routes.route_id</code> Optional Functions in the same way as <code>agency_id</code> except the attribution applies to a route. Multiple attributions may apply to the same route.   <code>trip_id</code> Foreign ID referencing <code>trips.trip_id</code> Optional Functions in the same way as <code>agency_id</code> except the attribution applies to a trip. Multiple attributions may apply to the same trip.   <code>organization_name</code> Text Required Name of the organization that the dataset is attributed to.   <code>is_producer</code> Enum Optional The role of the organization is producer. Valid options are:<code>0</code> or empty - Organization doesn\u2019t have this role.<code>1</code> - Organization does have this role.At least one of the fields <code>is_producer</code>, <code>is_operator</code>, or <code>is_authority</code> should be set at <code>1</code>.   <code>is_operator</code> Enum Optional Functions in the same way as <code>is_producer</code> except the role of the organization is operator.   <code>is_authority</code> Enum Optional Functions in the same way as <code>is_producer</code> except the role of the organization is authority.   <code>attribution_url</code> URL Optional URL of the organization.   <code>attribution_email</code> Email Optional Email of the organization.   <code>attribution_phone</code> Phone number Optional Phone number of the organization.","title":"attributions.txt"},{"location":"schedule/revision-history/","text":"<p>September 15, 2021</p> <ul> <li>Allowed fare gates (pathway_mode=6) to be bidirectional. See discussion.</li> </ul> <p>September 13, 2021</p> <ul> <li>Updated <code>stop_name</code> best practices. See discussion.</li> </ul> <p>August 27, 2021</p> <ul> <li>Updated GTFS Schedule to RFC 2119. See discussion.</li> </ul> <p>January 4, 2021</p> <ul> <li>Clarified description of <code>stop_times.stop_id</code>. See discussion.</li> <li>Defined positive and non-zero field signs. See discussion.</li> </ul> <p>October 2, 2020</p> <ul> <li>Changed field type of <code>frequencies.headway_secs</code> from non-negative to positive integer. See discussion.</li> </ul> <p>May 25, 2020</p> <ul> <li>Defined <code>pathways.txt</code>, <code>levels.txt</code> and <code>attributions.txt</code> as translatable tables. Added recommendations for translating multilingual <code>signposted_as</code> values. See discussion.</li> </ul> <p>May 13, 2020</p> <ul> <li>Added <code>continuous_pickup</code> and <code>continuous_drop_off</code> to <code>routes.txt</code> and <code>stop_times.txt</code>. Changed <code>shape_id</code> from \"Optional\" to \"Conditionally required\". See discussion.</li> </ul> <p>March 24, 2020</p> <ul> <li>Defined text-to-speech field and added <code>tts_stop_name</code> to <code>stops.txt</code>. See discussion.</li> </ul> <p>February 5, 2020</p> <ul> <li>Added trolleybus and monorail <code>route_types</code>. See discussion.</li> </ul> <p>January 9, 2020</p> <ul> <li>Added <code>translations.txt</code>. See discussion.</li> </ul> <p>December 26, 2019</p> <ul> <li>Updated definitions for cable tram and aerial lift in <code>route_type</code>. See discussion.</li> </ul> <p>December 20, 2019</p> <ul> <li>Added <code>attributions.txt</code>. See discussion.</li> </ul> <p>August 26, 2019</p> <ul> <li>Specified that <code>stop_lat</code> and <code>stop_lon</code> be positioned where passengers wait to board the vehicle. See discussion.</li> </ul> <p>July 9, 2019</p> <ul> <li>Added arrival and departure time best practices. See discussion.</li> <li>Added headsign best practices. See discussion.</li> <li>Added <code>stop_id</code> best practices. See discussion.</li> </ul> <p>June 25, 2019</p> <ul> <li>Clarified relationship of shape points and stops. See discussion.</li> </ul> <p>April 4, 2019</p> <ul> <li>Added <code>platform_code</code> field in <code>stops.txt</code>. See discussion.</li> </ul> <p>March 27, 2019</p> <ul> <li>Added <code>pathways.txt</code> and <code>levels.txt</code>. See discussion.</li> </ul> <p>February 6, 2019</p> <ul> <li>Editorial and formatting changes for clarity.  See discussion.</li> </ul> <p>October 2, 2018</p> <ul> <li>Factorized field types. See discussion.</li> </ul> <p>September 14, 2018</p> <ul> <li>Added \"Conditionally required\" concept. See discussion.</li> </ul> <p>September 4, 2018</p> <ul> <li>Unified the definitions of <code>agency_lang</code> and <code>feed_lang</code>. See discussion.</li> </ul> <p>August 27, 2018</p> <ul> <li>Updated <code>CHANGES.md</code> and last revised date. See discussion.</li> </ul> <p>August 22, 2018</p> <ul> <li>Added <code>feed_contact_email</code> and <code>feed_contact_url</code> fields in the <code>feed_info.txt</code> file. See discussion.</li> </ul> <p>December 11, 2017</p> <ul> <li>Added <code>route_sort_order</code> to <code>routes.txt</code>. See discussion.</li> </ul> <p>March 15, 2017</p> <ul> <li>Clarified that a proposer's vote does not count towards total. See discussion.</li> <li>Specified that at before calling a vote, at least one GTFS producer and one GTFS consumer should implement the proposed change. See discussion.</li> </ul> <p>February 7, 2017</p> <ul> <li>Clarified relationship of <code>block_id</code> and <code>service_id</code>. See discussion.</li> <li>Clarified that frequency-based service begins at vehicle departure. See discussion.</li> <li>Clarified descriptions of <code>stop_id</code> and <code>stop_code</code>. See discussion.</li> </ul> <p>December 11, 2017</p> <ul> <li>Added <code>route_sort_order</code> field in the <code>routes.txt</code> file. See discussion.</li> </ul> <p>November 27, 2016</p> <ul> <li>Added station entrance as a <code>stops.location_type</code>. See discussion.</li> </ul> <p>September 2, 2016</p> <ul> <li>Updated documentation to add <code>agency_id</code> under <code>fare_attributes.txt</code>. See discussion.</li> </ul> <p>March 16, 2016</p> <ul> <li>Transition of GTFS documentation to Github at https://github.com/google/transit</li> </ul> <p>February 3, 2016</p> <ul> <li>Added  <code>agency_email</code> to <code>agency.txt</code> proposal to spec: discussion</li> </ul> <p>February 2, 2015</p> <ul> <li>Added stop_times.txt 'timepoint' proposal to spec: discussion</li> </ul> <p>February 17, 2014</p> <ul> <li>Added trips.txt 'bikes_allowed' proposal to spec: discussion</li> </ul> <p>October 15, 2012</p> <p>Added trips.txt 'wheelchair_accessible' proposal to spec: discussion</p> <p>June 20, 2012</p> <ul> <li>Added 'wheelchair_boarding' proposal to spec: discussion</li> </ul> <p>February 2, 2012</p> <ul> <li>Added 'stop_timezone' proposal to spec: discussion</li> </ul> <p>January 18, 2012</p> <ul> <li>Migrated documentation from old code.google.com to their new location at developers.google.com.</li> </ul> <p>September 26, 2011</p> <ul> <li>Added 'feed_info' proposal to spec: discussion</li> </ul> <p>September 6, 2011</p> <ul> <li>Added 'agency_fare_url' proposal to spec: discussion</li> <li>Added 'exact_times' proposal to spec: discussion</li> </ul> <p>March 30, 2009</p> <ul> <li>A new section on making a transit feed publicly available. This wasn't previously discussed on the group, because it wasn't strictly a change to how the data is interpreted or written. However, some of the folks at Google thought that it would be informative to include discussion of non-Google uses of GTFS, since there are an increasing number of applications that can make use of GTFS-formatted data.</li> <li>CSV format clarifications: discussion.</li> <li>Additional guidance on how to pick contrasting colors in the descriptions of the route_color and route_text_color fields.</li> <li>trip_short_name, as proposed and tested in these threads: a and b.</li> <li>A fix for a minor error in the sample data included at the end of the document (giving stop S7 the parent_station S8).</li> <li>Added \"agency_lang\" information to the sample data at the end of the document, as suggested by Marcy during the comment period: discussion.</li> <li>Updated the link to OCTA's GTFS feed in the sidebar</li> <li>See original summary.</li> </ul> <p>February 26, 2009</p> <ul> <li>Removed most of the Google-specific feed submission instructions, since there are many other applications that consume GTFS data at this point.</li> <li>Fixed a broken link in the sidebar to Orange County OCTA's public feed.</li> </ul> <p>August 7, 2008</p> <ul> <li>Restored the stop_url field, which was accidentally omitted in the August 6 version</li> <li>Added agency_phone to sample data</li> <li>Added a mention of the data use agreement when submitting a feed to Google</li> </ul> <p>August 6, 2008</p> <ul> <li>Added transfers.txt file, allowing the feed publishers to provide hints on preferred transfer behavior (original proposal)</li> <li>Added location_type and parent_station fields to stops.txt, allowing stop points to be grouped into stations (original proposal)</li> <li>Added agency_phone field for providing voice telephone number for an agency (original proposal)</li> <li>Added \"Testing Your Feeds\" section mentioning open-source testing tools</li> <li>Added clarifications about CSV format, agency_timezone, agency_lang, route_color, route_text_color, arrival_time, departure_time, calendar.txt vs. calendar_dates.txt, fare tables, and frequencies.txt</li> <li>Added link to feed history document, and corrected some public feed links</li> <li>Updated example images to depict the current Google Maps UI</li> <li>Updated/fixed sample data in document</li> </ul> <p>February 29, 2008</p> <ul> <li>Added the stop_code field in stops.txt to allow for the specification of rider-facing stop codes (original proposal)</li> <li>Clarified the descriptions of route_short_name and route_long_name in routes.txt</li> <li>Clarified the descriptions of arrival_time and departure_time in stop_times.txt</li> <li>Fixed typos in the Sample Data section</li> </ul> <p>November 20, 2007</p> <ul> <li>Clarified block_id description</li> <li>Changed language to de-emphasize Google Transit (since non-Google applications are using GTFS, and transit routing is now an integrated feature of Google Maps), and to fix assorted typos</li> <li>Updated example screenshots to reflect the presentation of GTFS fields in the current Google Maps UI</li> <li>Updated the Google contact email address for transit data providers</li> <li>Updated formatting</li> </ul> <p>October 5, 2007</p> <ul> <li>Changed stop_sequence and shape_pt_sequence to allow for any increasing non-negative integers</li> <li>Clarified descriptions and fixed typos</li> </ul> <p>May 31, 2007</p> <ul> <li>Updated page style, made HTML cleaner and more accessible</li> <li>Added links to public feed examples and other useful sites</li> <li>Removed examples from individual field descriptions</li> </ul> <p>April 9, 2007</p> <ul> <li>Added section on submitting a feed.</li> <li>Added the Example Demo Transit Agency feed.</li> <li>Added note that calendar.txt can be omitted if all the service dates are defined in calendar_dates.txt.</li> <li>Made the agency_id field optional in feeds containing only one agency. This allows existing feeds without agency_id to remain valid.</li> <li>Added fuller specification of agency_url, stop_url, and route_url, and additional example values for those fields.</li> <li>Added 6 (Gondola) and 7 (Funicular) as valid route_type values.</li> </ul> <p>March 8, 2007</p> <ul> <li>Minor edit to move the stop_url field from stop_times.txt, where it was incorrectly specified in the Feb. 28 update, to stops.txt, where it belongs.</li> </ul> <p>March 5, 2007</p> <ul> <li>Minor edit to clarify the description of the route_long_name field.</li> </ul> <p>February 28, 2007</p> <ul> <li>Addition of frequencies.txt for headway-based schedule support.</li> <li>Multiple agencies now allowed in the the same feed. Also added new agency_id field in both agencies.txt and routes.txt that lets you specify which route is operated by which agency.</li> <li>Addition of per-route and per-stop URLs.</li> <li>Addition of direction_id field in trips.txt.</li> <li>Support for mid-trip headsign changes with addition of stop_headsign field in stop_times.txt.</li> <li>Support for route colors with addition of optional route_color and route_text_color in routes.txt.</li> <li>Removed the ability to specify stops using street addresses. The previous version of the spec allowed you to give the location of a transit stop using a street address in the stop_street, stop_city, stop_region, stop_postcode, and stop_country fields. Now stop locations must be given using stop_lat for latitude and stop_lon for longitude, which are more useful for most applications.</li> <li>Addition of cable car vehicle type for route_type field in routes.txt.</li> <li>See the original Headway blog post summary of the changes.</li> </ul> <p>November 29, 2006</p> <ul> <li>Added support for trip shape information via shapes.txt</li> <li>Clarified the definition of stop_sequence</li> <li>Marked pickup_type and drop_off_type optional</li> </ul> <p>October 31, 2006</p> <ul> <li>Added support for fare information</li> <li>Removed dates from individual file names</li> <li>Changed the route_type value definitions</li> <li>Allowed for multiple feed files to be posted at the same time, as long as their service periods didn't overlap</li> <li>Fixed block_id in trips.txt so that it was correctly marked Optional</li> <li>Noted that column headers must be included</li> </ul> <p>September 29, 2006</p> <ul> <li>Minor edit to fix a couple errors in the examples.</li> </ul> <p>September 25, 2006</p> <ul> <li>Initial version.</li> </ul>","title":"Revision History"},{"location":"schedule/changes/","text":"<p>The GTFS Specification is not set in stone. Instead, it is an open specification developed and maintained by the community of transit agencies, developers, and other stakeholders who use GTFS. It is expected that this community of producers and consumers of GTFS data will have proposals for extending the spec to enable new capabilities. To help manage that process, the following procedures and guidelines have been established.</p> <p> Specification Amendment ProcessGuiding PrinciplesRevision History </p>","title":"GTFS Schedule Changes"},{"location":"schedule/examples/","text":"<p>To help in understanding the GTFS specification and in producing tools that read and write GTFS data, take a look at the following examples of GTFS feeds:</p> <ul> <li>The Example GTFS Feed page provides a simple GTFS feed that can be used as a model to understand how a GTFS feed is put together.</li> <li>The Data Examples page provides instructions on modeling specific use cases.</li> <li>See OpenMobilityData for public feeds from real transit agencies.</li> </ul>","title":"GTFS Schedule Examples"}]}